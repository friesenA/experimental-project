{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "CreateGitHubIntLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/service-source-accounts-local-createGitHubInt",
        "RetentionInDays": 14,
        "Tags": [
          {
            "Key": "SERVICE",
            "Value": "service-source-accounts"
          },
          {
            "Key": "STAGE",
            "Value": "local"
          }
        ]
      }
    },
    "CreateGitHubIntTestLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/service-source-accounts-local-createGitHubIntTest",
        "RetentionInDays": 14,
        "Tags": [
          {
            "Key": "SERVICE",
            "Value": "service-source-accounts"
          },
          {
            "Key": "STAGE",
            "Value": "local"
          }
        ]
      }
    },
    "CreateProviderAuthLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/service-source-accounts-local-createProviderAuth",
        "RetentionInDays": 14,
        "Tags": [
          {
            "Key": "SERVICE",
            "Value": "service-source-accounts"
          },
          {
            "Key": "STAGE",
            "Value": "local"
          }
        ]
      }
    },
    "CreateProviderAuthTestLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/service-source-accounts-local-createProviderAuthTest",
        "RetentionInDays": 14,
        "Tags": [
          {
            "Key": "SERVICE",
            "Value": "service-source-accounts"
          },
          {
            "Key": "STAGE",
            "Value": "local"
          }
        ]
      }
    },
    "GithubWebhookLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/service-source-accounts-local-githubWebhook",
        "RetentionInDays": 14,
        "Tags": [
          {
            "Key": "SERVICE",
            "Value": "service-source-accounts"
          },
          {
            "Key": "STAGE",
            "Value": "local"
          }
        ]
      }
    },
    "GithubWebhookTestLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/service-source-accounts-local-githubWebhookTest",
        "RetentionInDays": 14,
        "Tags": [
          {
            "Key": "SERVICE",
            "Value": "service-source-accounts"
          },
          {
            "Key": "STAGE",
            "Value": "local"
          }
        ]
      }
    },
    "InternalEventsListenerLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/service-source-accounts-local-internalEventsListener",
        "RetentionInDays": 14,
        "Tags": [
          {
            "Key": "SERVICE",
            "Value": "service-source-accounts"
          },
          {
            "Key": "STAGE",
            "Value": "local"
          }
        ]
      }
    },
    "InternalEventsListTestLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/service-source-accounts-local-internalEventsListTest",
        "RetentionInDays": 14,
        "Tags": [
          {
            "Key": "SERVICE",
            "Value": "service-source-accounts"
          },
          {
            "Key": "STAGE",
            "Value": "local"
          }
        ]
      }
    },
    "GetIntegrationLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/service-source-accounts-local-getIntegration",
        "RetentionInDays": 14,
        "Tags": [
          {
            "Key": "SERVICE",
            "Value": "service-source-accounts"
          },
          {
            "Key": "STAGE",
            "Value": "local"
          }
        ]
      }
    },
    "GetIntegrationTestLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/service-source-accounts-local-getIntegrationTest",
        "RetentionInDays": 14,
        "Tags": [
          {
            "Key": "SERVICE",
            "Value": "service-source-accounts"
          },
          {
            "Key": "STAGE",
            "Value": "local"
          }
        ]
      }
    },
    "DeleteIntegrationLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/service-source-accounts-local-deleteIntegration",
        "RetentionInDays": 14,
        "Tags": [
          {
            "Key": "SERVICE",
            "Value": "service-source-accounts"
          },
          {
            "Key": "STAGE",
            "Value": "local"
          }
        ]
      }
    },
    "DeleteIntegrationTestLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/service-source-accounts-local-deleteIntegrationTest",
        "RetentionInDays": 14,
        "Tags": [
          {
            "Key": "SERVICE",
            "Value": "service-source-accounts"
          },
          {
            "Key": "STAGE",
            "Value": "local"
          }
        ]
      }
    },
    "ListIntegrationsLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/service-source-accounts-local-listIntegrations",
        "RetentionInDays": 14,
        "Tags": [
          {
            "Key": "SERVICE",
            "Value": "service-source-accounts"
          },
          {
            "Key": "STAGE",
            "Value": "local"
          }
        ]
      }
    },
    "ListIntegrationsTestLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/service-source-accounts-local-listIntegrationsTest",
        "RetentionInDays": 14,
        "Tags": [
          {
            "Key": "SERVICE",
            "Value": "service-source-accounts"
          },
          {
            "Key": "STAGE",
            "Value": "local"
          }
        ]
      }
    },
    "ModifyIntegrationLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/service-source-accounts-local-modifyIntegration",
        "RetentionInDays": 14,
        "Tags": [
          {
            "Key": "SERVICE",
            "Value": "service-source-accounts"
          },
          {
            "Key": "STAGE",
            "Value": "local"
          }
        ]
      }
    },
    "ModifyIntegrationTestLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/service-source-accounts-local-modifyIntegrationTest",
        "RetentionInDays": 14,
        "Tags": [
          {
            "Key": "SERVICE",
            "Value": "service-source-accounts"
          },
          {
            "Key": "STAGE",
            "Value": "local"
          }
        ]
      }
    },
    "ListIntegrationsIntlLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/service-source-accounts-local-listIntegrationsIntl",
        "RetentionInDays": 14,
        "Tags": [
          {
            "Key": "SERVICE",
            "Value": "service-source-accounts"
          },
          {
            "Key": "STAGE",
            "Value": "local"
          }
        ]
      }
    },
    "ListIntegIntlTestLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/service-source-accounts-local-listIntegIntlTest",
        "RetentionInDays": 14,
        "Tags": [
          {
            "Key": "SERVICE",
            "Value": "service-source-accounts"
          },
          {
            "Key": "STAGE",
            "Value": "local"
          }
        ]
      }
    },
    "PublishLifecycleEventsLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/service-source-accounts-local-publishLifecycleEvents",
        "RetentionInDays": 14,
        "Tags": [
          {
            "Key": "SERVICE",
            "Value": "service-source-accounts"
          },
          {
            "Key": "STAGE",
            "Value": "local"
          }
        ]
      }
    },
    "PublishLifecycleTestLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/service-source-accounts-local-publishLifecycleTest",
        "RetentionInDays": 14,
        "Tags": [
          {
            "Key": "SERVICE",
            "Value": "service-source-accounts"
          },
          {
            "Key": "STAGE",
            "Value": "local"
          }
        ]
      }
    },
    "C1AccEventsListenerLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/service-source-accounts-local-c1AccEventsListener",
        "RetentionInDays": 14,
        "Tags": [
          {
            "Key": "SERVICE",
            "Value": "service-source-accounts"
          },
          {
            "Key": "STAGE",
            "Value": "local"
          }
        ]
      }
    },
    "C1AccEventsListenerTestLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/service-source-accounts-local-c1AccEventsListenerTest",
        "RetentionInDays": 14,
        "Tags": [
          {
            "Key": "SERVICE",
            "Value": "service-source-accounts"
          },
          {
            "Key": "STAGE",
            "Value": "local"
          }
        ]
      }
    },
    "SetStagePropertiesLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/service-source-accounts-local-setStageProperties",
        "RetentionInDays": 14,
        "Tags": [
          {
            "Key": "SERVICE",
            "Value": "service-source-accounts"
          },
          {
            "Key": "STAGE",
            "Value": "local"
          }
        ]
      }
    },
    "CreateGitHubIntLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "codepipeline-dev-sourcebucket-us-east-2-787388474266",
          "S3Key": "serverless/service-source-accounts/local/1667485921781-2022-11-03T14:32:01.781Z/service-source-accounts.zip"
        },
        "Handler": "dist/handlers/github/create-integration.handler",
        "Runtime": "nodejs14.x",
        "FunctionName": "service-source-accounts-local-createGitHubInt",
        "MemorySize": 512,
        "Timeout": 30,
        "Tags": [
          {
            "Key": "SERVICE",
            "Value": "service-source-accounts"
          },
          {
            "Key": "STAGE",
            "Value": "local"
          }
        ],
        "TracingConfig": {
          "Mode": "Active"
        },
        "Environment": {
          "Variables": {
            "ALLOWED_ORIGIN": "https://dev-cloudone.trendmicro.com",
            "TABLE_NAME": {
              "Ref": "sourceAccountsTable"
            },
            "GLOBAL_TABLE_NAME": "service-source-accounts-local-sourceAccountsGlobalTable",
            "GITHUB_CREDENTIALS": {
              "Ref": "githubAppKey"
            },
            "GITHUB_APP_ID": "242515",
            "SERVICE_EVENT_BRIDGE": {
              "Fn::Sub": [
                "arn:${AWS::Partition}:events:${AWS::Region}:${awsAccountNumber}:event-bus/service-eventbridge-${AWS::Region}-alpha",
                {
                  "awsAccountNumber": "000568857918"
                }
              ]
            },
            "PENDO_SECRET_ARN": {
              "Ref": "pendoTrackEventSharedSecretKey"
            },
            "STAGE": "local",
            "LOG_LEVEL": ""
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "createGitHubIntRole",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "CreateGitHubIntLogGroup",
        "createGitHubIntRole"
      ]
    },
    "CreateGitHubIntTestLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "codepipeline-dev-sourcebucket-us-east-2-787388474266",
          "S3Key": "serverless/service-source-accounts/local/1667485921781-2022-11-03T14:32:01.781Z/service-source-accounts.zip"
        },
        "Handler": "dist/handlers/github/create-integration-pipeline-test.createGitHubIntPipelineTest",
        "Runtime": "nodejs14.x",
        "FunctionName": "service-source-accounts-local-createGitHubIntTest",
        "MemorySize": 512,
        "Timeout": 20,
        "Tags": [
          {
            "Key": "SERVICE",
            "Value": "service-source-accounts"
          },
          {
            "Key": "STAGE",
            "Value": "local"
          }
        ],
        "TracingConfig": {
          "Mode": "Active"
        },
        "Environment": {
          "Variables": {
            "STAGE": "local",
            "LAMBDA_NAME": {
              "Ref": "CreateGitHubIntLambdaFunction"
            },
            "NODE_OPTIONS": "--enable-source-maps",
            "PUT_JOB_RESULT_ROLE_ARN": "arn:aws:iam::787388474266:role/orchestrator-put-job-result-role",
            "TABLE_NAME": {
              "Ref": "sourceAccountsTable"
            },
            "GLOBAL_TABLE_NAME": "service-source-accounts-local-sourceAccountsGlobalTable",
            "INSTALLATION_ID": "29693386",
            "LOG_LEVEL": ""
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "createGitHubIntTestRole",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "CreateGitHubIntTestLogGroup",
        "createGitHubIntTestRole"
      ]
    },
    "CreateProviderAuthLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "codepipeline-dev-sourcebucket-us-east-2-787388474266",
          "S3Key": "serverless/service-source-accounts/local/1667485921781-2022-11-03T14:32:01.781Z/service-source-accounts.zip"
        },
        "Handler": "dist/handlers/create-provider-auth.handler",
        "Runtime": "nodejs14.x",
        "FunctionName": "service-source-accounts-local-createProviderAuth",
        "MemorySize": 512,
        "Timeout": 10,
        "Tags": [
          {
            "Key": "SERVICE",
            "Value": "service-source-accounts"
          },
          {
            "Key": "STAGE",
            "Value": "local"
          }
        ],
        "TracingConfig": {
          "Mode": "Active"
        },
        "Environment": {
          "Variables": {
            "ALLOWED_ORIGIN": "https://dev-cloudone.trendmicro.com",
            "GITHUB_CREDENTIALS": {
              "Ref": "githubAppKey"
            },
            "GITHUB_APP_ID": "242515",
            "TABLE_NAME": {
              "Ref": "sourceAccountsTable"
            },
            "LOG_LEVEL": ""
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "createProviderAuthRole",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "CreateProviderAuthLogGroup",
        "createProviderAuthRole"
      ]
    },
    "CreateProviderAuthTestLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "codepipeline-dev-sourcebucket-us-east-2-787388474266",
          "S3Key": "serverless/service-source-accounts/local/1667485921781-2022-11-03T14:32:01.781Z/service-source-accounts.zip"
        },
        "Handler": "dist/handlers/create-provider-auth-pipeline-test.createProviderAuthPipelineTest",
        "Runtime": "nodejs14.x",
        "FunctionName": "service-source-accounts-local-createProviderAuthTest",
        "MemorySize": 512,
        "Timeout": 20,
        "Tags": [
          {
            "Key": "SERVICE",
            "Value": "service-source-accounts"
          },
          {
            "Key": "STAGE",
            "Value": "local"
          }
        ],
        "TracingConfig": {
          "Mode": "Active"
        },
        "Environment": {
          "Variables": {
            "STAGE": "local",
            "LAMBDA_NAME": {
              "Ref": "CreateProviderAuthLambdaFunction"
            },
            "NODE_OPTIONS": "--enable-source-maps",
            "PUT_JOB_RESULT_ROLE_ARN": "arn:aws:iam::787388474266:role/orchestrator-put-job-result-role",
            "TABLE_NAME": {
              "Ref": "sourceAccountsTable"
            },
            "GLOBAL_TABLE_NAME": "service-source-accounts-local-sourceAccountsGlobalTable",
            "INSTALLATION_ID": "29693386",
            "LOG_LEVEL": ""
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "createProviderAuthTestRole",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "CreateProviderAuthTestLogGroup",
        "createProviderAuthTestRole"
      ]
    },
    "GithubWebhookLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "codepipeline-dev-sourcebucket-us-east-2-787388474266",
          "S3Key": "serverless/service-source-accounts/local/1667485921781-2022-11-03T14:32:01.781Z/service-source-accounts.zip"
        },
        "Handler": "dist/handlers/github/webhook.handler",
        "Runtime": "nodejs14.x",
        "FunctionName": "service-source-accounts-local-githubWebhook",
        "MemorySize": 512,
        "Timeout": 10,
        "Tags": [
          {
            "Key": "SERVICE",
            "Value": "service-source-accounts"
          },
          {
            "Key": "STAGE",
            "Value": "local"
          }
        ],
        "TracingConfig": {
          "Mode": "Active"
        },
        "Environment": {
          "Variables": {
            "TABLE_NAME": {
              "Ref": "sourceAccountsTable"
            },
            "GLOBAL_TABLE_NAME": "service-source-accounts-local-sourceAccountsGlobalTable",
            "GITHUB_WEBHOOK_KEY": {
              "Ref": "githubWebhookKey"
            },
            "INTERNAL_EVENTS_QUEUE_URL": {
              "Fn::Sub": [
                "https://sqs.*.amazonaws.com/${AWS::AccountId}/${queueName}",
                {
                  "queueName": "service-source-accounts-local-internalEventsQueue.fifo"
                }
              ]
            },
            "SERVICE_EVENT_BRIDGE": {
              "Fn::Sub": [
                "arn:${AWS::Partition}:events:*:${awsAccountNumber}:event-bus/service-eventbridge-*-alpha",
                {
                  "awsAccountNumber": "000568857918"
                }
              ]
            },
            "LOG_LEVEL": ""
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "githubWebhookRole",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GithubWebhookLogGroup",
        "githubWebhookRole"
      ]
    },
    "GithubWebhookTestLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "codepipeline-dev-sourcebucket-us-east-2-787388474266",
          "S3Key": "serverless/service-source-accounts/local/1667485921781-2022-11-03T14:32:01.781Z/service-source-accounts.zip"
        },
        "Handler": "dist/handlers/github/webhook-pipeline-test.githubWebhookPipelineTest",
        "Runtime": "nodejs14.x",
        "FunctionName": "service-source-accounts-local-githubWebhookTest",
        "MemorySize": 512,
        "Timeout": 20,
        "Tags": [
          {
            "Key": "SERVICE",
            "Value": "service-source-accounts"
          },
          {
            "Key": "STAGE",
            "Value": "local"
          }
        ],
        "TracingConfig": {
          "Mode": "Active"
        },
        "Environment": {
          "Variables": {
            "STAGE": "local",
            "LAMBDA_NAME": {
              "Ref": "GithubWebhookLambdaFunction"
            },
            "GITHUB_WEBHOOK_KEY": {
              "Ref": "githubWebhookKey"
            },
            "NODE_OPTIONS": "--enable-source-maps",
            "PUT_JOB_RESULT_ROLE_ARN": "arn:aws:iam::787388474266:role/orchestrator-put-job-result-role",
            "TABLE_NAME": {
              "Ref": "sourceAccountsTable"
            },
            "GLOBAL_TABLE_NAME": "service-source-accounts-local-sourceAccountsGlobalTable",
            "LOG_LEVEL": ""
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "githubWebhookTestRole",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GithubWebhookTestLogGroup",
        "githubWebhookTestRole"
      ]
    },
    "InternalEventsListenerLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "codepipeline-dev-sourcebucket-us-east-2-787388474266",
          "S3Key": "serverless/service-source-accounts/local/1667485921781-2022-11-03T14:32:01.781Z/service-source-accounts.zip"
        },
        "Handler": "dist/handlers/internal-events-listener.handler",
        "Runtime": "nodejs14.x",
        "FunctionName": "service-source-accounts-local-internalEventsListener",
        "MemorySize": 512,
        "Timeout": 10,
        "Tags": [
          {
            "Key": "SERVICE",
            "Value": "service-source-accounts"
          },
          {
            "Key": "STAGE",
            "Value": "local"
          }
        ],
        "TracingConfig": {
          "Mode": "Active"
        },
        "Environment": {
          "Variables": {
            "TABLE_NAME": {
              "Ref": "sourceAccountsTable"
            },
            "GLOBAL_TABLE_NAME": "service-source-accounts-local-sourceAccountsGlobalTable",
            "INTERNAL_EVENTS_QUEUE_URL": {
              "Ref": "internalEventsQueue"
            },
            "PENDO_SECRET_ARN": {
              "Ref": "pendoTrackEventSharedSecretKey"
            },
            "STAGE": "local",
            "LOG_LEVEL": ""
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "internalEventsListenerRole",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "InternalEventsListenerLogGroup",
        "internalEventsListenerRole"
      ]
    },
    "InternalEventsListTestLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "codepipeline-dev-sourcebucket-us-east-2-787388474266",
          "S3Key": "serverless/service-source-accounts/local/1667485921781-2022-11-03T14:32:01.781Z/service-source-accounts.zip"
        },
        "Handler": "dist/handlers/internal-events-listener-pipeline-test.internalEventsListenerPipelineTest",
        "Runtime": "nodejs14.x",
        "FunctionName": "service-source-accounts-local-internalEventsListTest",
        "MemorySize": 512,
        "Timeout": 20,
        "Tags": [
          {
            "Key": "SERVICE",
            "Value": "service-source-accounts"
          },
          {
            "Key": "STAGE",
            "Value": "local"
          }
        ],
        "TracingConfig": {
          "Mode": "Active"
        },
        "Environment": {
          "Variables": {
            "GLOBAL_TABLE_NAME": "service-source-accounts-local-sourceAccountsGlobalTable",
            "LAMBDA_NAME": {
              "Ref": "InternalEventsListenerLambdaFunction"
            },
            "NODE_OPTIONS": "--enable-source-maps",
            "PUT_JOB_RESULT_ROLE_ARN": "arn:aws:iam::787388474266:role/orchestrator-put-job-result-role",
            "STAGE": "local",
            "TABLE_NAME": {
              "Ref": "sourceAccountsTable"
            },
            "LOG_LEVEL": ""
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "internalEventsListenerTestRole",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "InternalEventsListTestLogGroup",
        "internalEventsListenerTestRole"
      ]
    },
    "GetIntegrationLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "codepipeline-dev-sourcebucket-us-east-2-787388474266",
          "S3Key": "serverless/service-source-accounts/local/1667485921781-2022-11-03T14:32:01.781Z/service-source-accounts.zip"
        },
        "Handler": "dist/handlers/get-integration.handler",
        "Runtime": "nodejs14.x",
        "FunctionName": "service-source-accounts-local-getIntegration",
        "MemorySize": 512,
        "Timeout": 10,
        "Tags": [
          {
            "Key": "SERVICE",
            "Value": "service-source-accounts"
          },
          {
            "Key": "STAGE",
            "Value": "local"
          }
        ],
        "TracingConfig": {
          "Mode": "Active"
        },
        "Environment": {
          "Variables": {
            "ALLOWED_ORIGIN": "https://dev-cloudone.trendmicro.com",
            "LOG_LEVEL": "",
            "TABLE_NAME": {
              "Ref": "sourceAccountsTable"
            }
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "getIntegrationRole",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetIntegrationLogGroup",
        "getIntegrationRole"
      ]
    },
    "GetIntegrationTestLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "codepipeline-dev-sourcebucket-us-east-2-787388474266",
          "S3Key": "serverless/service-source-accounts/local/1667485921781-2022-11-03T14:32:01.781Z/service-source-accounts.zip"
        },
        "Handler": "dist/handlers/get-integration-pipeline-test.getIntegrationPipelineTest",
        "Runtime": "nodejs14.x",
        "FunctionName": "service-source-accounts-local-getIntegrationTest",
        "MemorySize": 512,
        "Timeout": 20,
        "Tags": [
          {
            "Key": "SERVICE",
            "Value": "service-source-accounts"
          },
          {
            "Key": "STAGE",
            "Value": "local"
          }
        ],
        "TracingConfig": {
          "Mode": "Active"
        },
        "Environment": {
          "Variables": {
            "STAGE": "local",
            "LAMBDA_NAME": {
              "Ref": "GetIntegrationLambdaFunction"
            },
            "NODE_OPTIONS": "--enable-source-maps",
            "PUT_JOB_RESULT_ROLE_ARN": "arn:aws:iam::787388474266:role/orchestrator-put-job-result-role",
            "TABLE_NAME": {
              "Ref": "sourceAccountsTable"
            },
            "GLOBAL_TABLE_NAME": "service-source-accounts-local-sourceAccountsGlobalTable",
            "LOG_LEVEL": ""
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "getIntegrationTestRole",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetIntegrationTestLogGroup",
        "getIntegrationTestRole"
      ]
    },
    "DeleteIntegrationLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "codepipeline-dev-sourcebucket-us-east-2-787388474266",
          "S3Key": "serverless/service-source-accounts/local/1667485921781-2022-11-03T14:32:01.781Z/service-source-accounts.zip"
        },
        "Handler": "dist/handlers/delete-integration.handler",
        "Runtime": "nodejs14.x",
        "FunctionName": "service-source-accounts-local-deleteIntegration",
        "MemorySize": 512,
        "Timeout": 10,
        "Tags": [
          {
            "Key": "SERVICE",
            "Value": "service-source-accounts"
          },
          {
            "Key": "STAGE",
            "Value": "local"
          }
        ],
        "TracingConfig": {
          "Mode": "Active"
        },
        "Environment": {
          "Variables": {
            "ALLOWED_ORIGIN": "https://dev-cloudone.trendmicro.com",
            "TABLE_NAME": {
              "Ref": "sourceAccountsTable"
            },
            "GLOBAL_TABLE_NAME": "service-source-accounts-local-sourceAccountsGlobalTable",
            "SERVICE_EVENT_BRIDGE": {
              "Fn::Sub": [
                "arn:${AWS::Partition}:events:${AWS::Region}:${awsAccountNumber}:event-bus/service-eventbridge-${AWS::Region}-alpha",
                {
                  "awsAccountNumber": "000568857918"
                }
              ]
            },
            "PENDO_SECRET_ARN": {
              "Ref": "pendoTrackEventSharedSecretKey"
            },
            "STAGE": "local",
            "LOG_LEVEL": ""
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "deleteIntegrationRole",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "DeleteIntegrationLogGroup",
        "deleteIntegrationRole"
      ]
    },
    "DeleteIntegrationTestLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "codepipeline-dev-sourcebucket-us-east-2-787388474266",
          "S3Key": "serverless/service-source-accounts/local/1667485921781-2022-11-03T14:32:01.781Z/service-source-accounts.zip"
        },
        "Handler": "dist/handlers/delete-integration-pipeline-test.deleteIntegrationPipelineTest",
        "Runtime": "nodejs14.x",
        "FunctionName": "service-source-accounts-local-deleteIntegrationTest",
        "MemorySize": 512,
        "Timeout": 20,
        "Tags": [
          {
            "Key": "SERVICE",
            "Value": "service-source-accounts"
          },
          {
            "Key": "STAGE",
            "Value": "local"
          }
        ],
        "TracingConfig": {
          "Mode": "Active"
        },
        "Environment": {
          "Variables": {
            "STAGE": "local",
            "LAMBDA_NAME": {
              "Ref": "DeleteIntegrationLambdaFunction"
            },
            "NODE_OPTIONS": "--enable-source-maps",
            "PUT_JOB_RESULT_ROLE_ARN": "arn:aws:iam::787388474266:role/orchestrator-put-job-result-role",
            "TABLE_NAME": {
              "Ref": "sourceAccountsTable"
            },
            "GLOBAL_TABLE_NAME": "service-source-accounts-local-sourceAccountsGlobalTable",
            "LOG_LEVEL": ""
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "deleteIntegrationTestRole",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "DeleteIntegrationTestLogGroup",
        "deleteIntegrationTestRole"
      ]
    },
    "ListIntegrationsLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "codepipeline-dev-sourcebucket-us-east-2-787388474266",
          "S3Key": "serverless/service-source-accounts/local/1667485921781-2022-11-03T14:32:01.781Z/service-source-accounts.zip"
        },
        "Handler": "dist/handlers/list-integrations.handler",
        "Runtime": "nodejs14.x",
        "FunctionName": "service-source-accounts-local-listIntegrations",
        "MemorySize": 512,
        "Timeout": 20,
        "Tags": [
          {
            "Key": "SERVICE",
            "Value": "service-source-accounts"
          },
          {
            "Key": "STAGE",
            "Value": "local"
          }
        ],
        "TracingConfig": {
          "Mode": "Active"
        },
        "Environment": {
          "Variables": {
            "TABLE_NAME": {
              "Ref": "sourceAccountsTable"
            },
            "ALLOWED_ORIGIN": "https://dev-cloudone.trendmicro.com",
            "LOG_LEVEL": ""
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "listIntegrationsRole",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "ListIntegrationsLogGroup",
        "listIntegrationsRole"
      ]
    },
    "ListIntegrationsTestLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "codepipeline-dev-sourcebucket-us-east-2-787388474266",
          "S3Key": "serverless/service-source-accounts/local/1667485921781-2022-11-03T14:32:01.781Z/service-source-accounts.zip"
        },
        "Handler": "dist/handlers/list-integrations-pipeline-test.listIntegrationsPipelineTest",
        "Runtime": "nodejs14.x",
        "FunctionName": "service-source-accounts-local-listIntegrationsTest",
        "MemorySize": 512,
        "Timeout": 20,
        "Tags": [
          {
            "Key": "SERVICE",
            "Value": "service-source-accounts"
          },
          {
            "Key": "STAGE",
            "Value": "local"
          }
        ],
        "TracingConfig": {
          "Mode": "Active"
        },
        "Environment": {
          "Variables": {
            "STAGE": "local",
            "LAMBDA_NAME": {
              "Ref": "ListIntegrationsLambdaFunction"
            },
            "NODE_OPTIONS": "--enable-source-maps",
            "PUT_JOB_RESULT_ROLE_ARN": "arn:aws:iam::787388474266:role/orchestrator-put-job-result-role",
            "TABLE_NAME": {
              "Ref": "sourceAccountsTable"
            },
            "GLOBAL_TABLE_NAME": "service-source-accounts-local-sourceAccountsGlobalTable",
            "LOG_LEVEL": ""
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "listIntegrationsTestRole",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "ListIntegrationsTestLogGroup",
        "listIntegrationsTestRole"
      ]
    },
    "ModifyIntegrationLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "codepipeline-dev-sourcebucket-us-east-2-787388474266",
          "S3Key": "serverless/service-source-accounts/local/1667485921781-2022-11-03T14:32:01.781Z/service-source-accounts.zip"
        },
        "Handler": "dist/handlers/modify-integration.handler",
        "Runtime": "nodejs14.x",
        "FunctionName": "service-source-accounts-local-modifyIntegration",
        "MemorySize": 512,
        "Timeout": 10,
        "Tags": [
          {
            "Key": "SERVICE",
            "Value": "service-source-accounts"
          },
          {
            "Key": "STAGE",
            "Value": "local"
          }
        ],
        "TracingConfig": {
          "Mode": "Active"
        },
        "Environment": {
          "Variables": {
            "ALLOWED_ORIGIN": "https://dev-cloudone.trendmicro.com",
            "LOG_LEVEL": "",
            "TABLE_NAME": {
              "Ref": "sourceAccountsTable"
            },
            "SERVICE_EVENT_BRIDGE": {
              "Fn::Sub": [
                "arn:${AWS::Partition}:events:${AWS::Region}:${awsAccountNumber}:event-bus/service-eventbridge-${AWS::Region}-alpha",
                {
                  "awsAccountNumber": "000568857918"
                }
              ]
            }
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "modifyIntegrationRole",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "ModifyIntegrationLogGroup",
        "modifyIntegrationRole"
      ]
    },
    "ModifyIntegrationTestLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "codepipeline-dev-sourcebucket-us-east-2-787388474266",
          "S3Key": "serverless/service-source-accounts/local/1667485921781-2022-11-03T14:32:01.781Z/service-source-accounts.zip"
        },
        "Handler": "dist/handlers/modify-integration-pipeline-test.modifyIntegrationPipelineTest",
        "Runtime": "nodejs14.x",
        "FunctionName": "service-source-accounts-local-modifyIntegrationTest",
        "MemorySize": 512,
        "Timeout": 20,
        "Tags": [
          {
            "Key": "SERVICE",
            "Value": "service-source-accounts"
          },
          {
            "Key": "STAGE",
            "Value": "local"
          }
        ],
        "TracingConfig": {
          "Mode": "Active"
        },
        "Environment": {
          "Variables": {
            "STAGE": "local",
            "LAMBDA_NAME": {
              "Ref": "ModifyIntegrationLambdaFunction"
            },
            "NODE_OPTIONS": "--enable-source-maps",
            "PUT_JOB_RESULT_ROLE_ARN": "arn:aws:iam::787388474266:role/orchestrator-put-job-result-role",
            "TABLE_NAME": {
              "Ref": "sourceAccountsTable"
            },
            "GLOBAL_TABLE_NAME": "service-source-accounts-local-sourceAccountsGlobalTable",
            "LOG_LEVEL": ""
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "modifyIntegrationTestRole",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "ModifyIntegrationTestLogGroup",
        "modifyIntegrationTestRole"
      ]
    },
    "ListIntegrationsIntlLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "codepipeline-dev-sourcebucket-us-east-2-787388474266",
          "S3Key": "serverless/service-source-accounts/local/1667485921781-2022-11-03T14:32:01.781Z/service-source-accounts.zip"
        },
        "Handler": "dist/handlers/list-integrations-internal.handler",
        "Runtime": "nodejs14.x",
        "FunctionName": "service-source-accounts-local-listIntegrationsIntl",
        "MemorySize": 512,
        "Timeout": 20,
        "Tags": [
          {
            "Key": "SERVICE",
            "Value": "service-source-accounts"
          },
          {
            "Key": "STAGE",
            "Value": "local"
          }
        ],
        "TracingConfig": {
          "Mode": "Active"
        },
        "Environment": {
          "Variables": {
            "TABLE_NAME": {
              "Ref": "sourceAccountsTable"
            },
            "ALLOWED_ORIGIN": "https://dev-cloudone.trendmicro.com",
            "LOG_LEVEL": ""
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "listIntegrationsInternalRole",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "ListIntegrationsIntlLogGroup",
        "listIntegrationsInternalRole"
      ]
    },
    "ListIntegIntlTestLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "codepipeline-dev-sourcebucket-us-east-2-787388474266",
          "S3Key": "serverless/service-source-accounts/local/1667485921781-2022-11-03T14:32:01.781Z/service-source-accounts.zip"
        },
        "Handler": "dist/handlers/list-integrations-internal-pipeline-test.listIntegrationsIntlPipelineTest",
        "Runtime": "nodejs14.x",
        "FunctionName": "service-source-accounts-local-listIntegIntlTest",
        "MemorySize": 512,
        "Timeout": 20,
        "Tags": [
          {
            "Key": "SERVICE",
            "Value": "service-source-accounts"
          },
          {
            "Key": "STAGE",
            "Value": "local"
          }
        ],
        "TracingConfig": {
          "Mode": "Active"
        },
        "Environment": {
          "Variables": {
            "STAGE": "local",
            "LAMBDA_NAME": {
              "Ref": "ListIntegrationsIntlLambdaFunction"
            },
            "NODE_OPTIONS": "--enable-source-maps",
            "PUT_JOB_RESULT_ROLE_ARN": "arn:aws:iam::787388474266:role/orchestrator-put-job-result-role",
            "TABLE_NAME": {
              "Ref": "sourceAccountsTable"
            },
            "GLOBAL_TABLE_NAME": "service-source-accounts-local-sourceAccountsGlobalTable",
            "LOG_LEVEL": ""
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "listIntegrationsInternalTestRole",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "ListIntegIntlTestLogGroup",
        "listIntegrationsInternalTestRole"
      ]
    },
    "PublishLifecycleEventsLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "codepipeline-dev-sourcebucket-us-east-2-787388474266",
          "S3Key": "serverless/service-source-accounts/local/1667485921781-2022-11-03T14:32:01.781Z/service-source-accounts.zip"
        },
        "Handler": "dist/handlers/publish-lifecycle-events.handler",
        "Runtime": "nodejs14.x",
        "FunctionName": "service-source-accounts-local-publishLifecycleEvents",
        "MemorySize": 512,
        "Timeout": 10,
        "Tags": [
          {
            "Key": "SERVICE",
            "Value": "service-source-accounts"
          },
          {
            "Key": "STAGE",
            "Value": "local"
          }
        ],
        "TracingConfig": {
          "Mode": "Active"
        },
        "Environment": {
          "Variables": {
            "SERVICE_EVENT_BRIDGE": {
              "Fn::Sub": [
                "arn:${AWS::Partition}:events:*:${awsAccountNumber}:event-bus/service-eventbridge-*-alpha",
                {
                  "awsAccountNumber": "000568857918"
                }
              ]
            },
            "LOG_LEVEL": ""
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "publishLifecycleEventsRole",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "PublishLifecycleEventsLogGroup",
        "publishLifecycleEventsRole"
      ]
    },
    "PublishLifecycleTestLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "codepipeline-dev-sourcebucket-us-east-2-787388474266",
          "S3Key": "serverless/service-source-accounts/local/1667485921781-2022-11-03T14:32:01.781Z/service-source-accounts.zip"
        },
        "Handler": "dist/handlers/publish-lifecycle-events-pipeline-test.publishLifecycleEventPipelineTest",
        "Runtime": "nodejs14.x",
        "FunctionName": "service-source-accounts-local-publishLifecycleTest",
        "MemorySize": 512,
        "Timeout": 20,
        "Tags": [
          {
            "Key": "SERVICE",
            "Value": "service-source-accounts"
          },
          {
            "Key": "STAGE",
            "Value": "local"
          }
        ],
        "TracingConfig": {
          "Mode": "Active"
        },
        "Environment": {
          "Variables": {
            "PUT_JOB_RESULT_ROLE_ARN": "arn:aws:iam::787388474266:role/orchestrator-put-job-result-role",
            "STAGE": "local",
            "LAMBDA_NAME": {
              "Ref": "PublishLifecycleEventsLambdaFunction"
            },
            "NODE_OPTIONS": "--enable-source-maps",
            "LOG_LEVEL": ""
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "publishLifecycleTestRole",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "PublishLifecycleTestLogGroup",
        "publishLifecycleTestRole"
      ]
    },
    "C1AccEventsListenerLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "codepipeline-dev-sourcebucket-us-east-2-787388474266",
          "S3Key": "serverless/service-source-accounts/local/1667485921781-2022-11-03T14:32:01.781Z/service-source-accounts.zip"
        },
        "Handler": "dist/handlers/c1-account-lifecycle-events-listener.handler",
        "Runtime": "nodejs14.x",
        "FunctionName": "service-source-accounts-local-c1AccEventsListener",
        "MemorySize": 512,
        "Timeout": 10,
        "Tags": [
          {
            "Key": "SERVICE",
            "Value": "service-source-accounts"
          },
          {
            "Key": "STAGE",
            "Value": "local"
          }
        ],
        "TracingConfig": {
          "Mode": "Active"
        },
        "Environment": {
          "Variables": {
            "TABLE_NAME": {
              "Ref": "sourceAccountsTable"
            },
            "GLOBAL_TABLE_NAME": "service-source-accounts-local-sourceAccountsGlobalTable",
            "LOG_LEVEL": ""
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "c1AccEventsListenerRole",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "C1AccEventsListenerLogGroup",
        "c1AccEventsListenerRole"
      ]
    },
    "C1AccEventsListenerTestLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "codepipeline-dev-sourcebucket-us-east-2-787388474266",
          "S3Key": "serverless/service-source-accounts/local/1667485921781-2022-11-03T14:32:01.781Z/service-source-accounts.zip"
        },
        "Handler": "dist/handlers/c1-account-lifecycle-events-listener-pipeline-test.c1AccountLifecycleListenerPipelineTest",
        "Runtime": "nodejs14.x",
        "FunctionName": "service-source-accounts-local-c1AccEventsListenerTest",
        "MemorySize": 512,
        "Timeout": 10,
        "Tags": [
          {
            "Key": "SERVICE",
            "Value": "service-source-accounts"
          },
          {
            "Key": "STAGE",
            "Value": "local"
          }
        ],
        "TracingConfig": {
          "Mode": "Active"
        },
        "Environment": {
          "Variables": {
            "PUT_JOB_RESULT_ROLE_ARN": "arn:aws:iam::787388474266:role/orchestrator-put-job-result-role",
            "STAGE": "local",
            "LAMBDA_NAME": {
              "Ref": "C1AccEventsListenerLambdaFunction"
            },
            "NODE_OPTIONS": "--enable-source-maps",
            "TABLE_NAME": {
              "Ref": "sourceAccountsTable"
            },
            "GLOBAL_TABLE_NAME": "service-source-accounts-local-sourceAccountsGlobalTable",
            "LOG_LEVEL": ""
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "c1AccEventsListenerTestRole",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "C1AccEventsListenerTestLogGroup",
        "c1AccEventsListenerTestRole"
      ]
    },
    "SetStagePropertiesLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "codepipeline-dev-sourcebucket-us-east-2-787388474266",
          "S3Key": "serverless/service-source-accounts/local/1667485921781-2022-11-03T14:32:01.781Z/setStageProperties.zip"
        },
        "Handler": "resources/stagepatcher.handler",
        "Runtime": "python3.8",
        "FunctionName": "service-source-accounts-local-setStageProperties",
        "MemorySize": 1024,
        "Timeout": 60,
        "Tags": [
          {
            "Key": "SERVICE",
            "Value": "service-source-accounts"
          },
          {
            "Key": "STAGE",
            "Value": "local"
          }
        ],
        "TracingConfig": {
          "Mode": "Active"
        },
        "Role": {
          "Fn::GetAtt": [
            "setStagePropertiesRole",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "SetStagePropertiesLogGroup",
        "setStagePropertiesRole"
      ]
    },
    "DecryptSecretLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "codepipeline-dev-sourcebucket-us-east-2-787388474266",
          "S3Key": "serverless/service-source-accounts/local/1667485921781-2022-11-03T14:32:01.781Z/serverless-plugin-secret-value-lambda.zip"
        },
        "Handler": "lambda_function.lambda_handler",
        "Runtime": "python3.9",
        "MemorySize": 1024,
        "Timeout": 300,
        "Tags": [
          {
            "Key": "SERVICE",
            "Value": "service-source-accounts"
          },
          {
            "Key": "STAGE",
            "Value": "local"
          }
        ],
        "TracingConfig": {
          "Mode": "Active"
        },
        "Environment": {
          "Variables": {
            "KmsKeyId": "arn:aws:kms:us-east-2:245873510408:key/66f5e1af-7ab3-441d-ac00-47c2f7e40eca"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "DecryptSecretRole",
            "Arn"
          ]
        },
        "Layers": []
      },
      "DependsOn": [
        "DecryptSecretRole"
      ]
    },
    "CreateGitHubIntLambdaVersion1fsmUjJlgumQzDCQjXQPq0HYNuhrOyf5kwVyAvk3z4": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CreateGitHubIntLambdaFunction"
        },
        "CodeSha256": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU="
      }
    },
    "CreateProviderAuthLambdaVersionVsA0EvFwiw1edQDrpf7g0FCklV7wZxOxEwfu1HOgrQ": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CreateProviderAuthLambdaFunction"
        },
        "CodeSha256": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU="
      }
    },
    "CreateGitHubIntTestLambdaVersionf4IAGecHdlJqP4vz8OB9zqA3v5labkjYmBrQcN2cU": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CreateGitHubIntTestLambdaFunction"
        },
        "CodeSha256": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU="
      }
    },
    "CreateProviderAuthTestLambdaVersionrp2dVD4A5KYGrDLUHPQkmlMN67CYSYM292Xt0zriDIY": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CreateProviderAuthTestLambdaFunction"
        },
        "CodeSha256": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU="
      }
    },
    "GithubWebhookLambdaVersionX9FTe3zt4tZ7lkbFvuXDPhG4mvg7AHIl8jZ2dWlhi8k": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GithubWebhookLambdaFunction"
        },
        "CodeSha256": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU="
      }
    },
    "GithubWebhookTestLambdaVersiong2FIXa0liTyXcwTB6A3DFpHc9o0fwH70zfDMxBDSBjU": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GithubWebhookTestLambdaFunction"
        },
        "CodeSha256": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU="
      }
    },
    "InternalEventsListenerLambdaVersionjAaT9ygNruL26ZxeCjZ4vkY23uiEI6kUwQcaKMnvYGY": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "InternalEventsListenerLambdaFunction"
        },
        "CodeSha256": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU="
      }
    },
    "GetIntegrationLambdaVersion59KAa8XqoEI3at1B4I5cbrzG7lzLTREecHfMPCu7jA": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetIntegrationLambdaFunction"
        },
        "CodeSha256": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU="
      }
    },
    "InternalEventsListTestLambdaVersionUPogTSGJz3MRRSCR4l85FfYMx0p67twxZPmrmWDw": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "InternalEventsListTestLambdaFunction"
        },
        "CodeSha256": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU="
      }
    },
    "ListIntegrationsLambdaVersion8kNs5blhAavl9RMD8Gic10bLYwoIj39EbtsD0qADW6g": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "ListIntegrationsLambdaFunction"
        },
        "CodeSha256": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU="
      }
    },
    "DeleteIntegrationLambdaVersionK7raFWq34ZssQXHhhjRqavuyxTjtnNSsHTtfA1LrXI": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "DeleteIntegrationLambdaFunction"
        },
        "CodeSha256": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU="
      }
    },
    "DeleteIntegrationTestLambdaVersionz4C70GUkkMs04mxextDHmjrRNGIvZA0ewhKaScHg": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "DeleteIntegrationTestLambdaFunction"
        },
        "CodeSha256": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU="
      }
    },
    "ListIntegrationsTestLambdaVersionK7x8xCt3ENufGquwhQI4Hw1rHkCkYzMWymBKBQYqpLE": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "ListIntegrationsTestLambdaFunction"
        },
        "CodeSha256": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU="
      }
    },
    "ModifyIntegrationLambdaVersiondehYOPo4B7ylqrF4D8EwTkUPcVTNoHAG8jjZGwV2U": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "ModifyIntegrationLambdaFunction"
        },
        "CodeSha256": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU="
      }
    },
    "GetIntegrationTestLambdaVersion7vTp6LLKn24v6JQn0ykT3dvPAnZrjj2aJGvyPXbRl8": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetIntegrationTestLambdaFunction"
        },
        "CodeSha256": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU="
      }
    },
    "ListIntegrationsIntlLambdaVersionxKqpqpWppLsKSy7OdNMgpVmnglHQWyOtFO7ldXDMAEU": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "ListIntegrationsIntlLambdaFunction"
        },
        "CodeSha256": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU="
      }
    },
    "ListIntegIntlTestLambdaVersionj6C11pqesTazLkqCzFXdwqZ3IvuBkdhidsFzIEfHCI": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "ListIntegIntlTestLambdaFunction"
        },
        "CodeSha256": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU="
      }
    },
    "ModifyIntegrationTestLambdaVersionVVp8AfLR27yoPlEv33UatRtPY9s1pPuQCPwKKBbe9E": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "ModifyIntegrationTestLambdaFunction"
        },
        "CodeSha256": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU="
      }
    },
    "PublishLifecycleEventsLambdaVersionHIsDJcH96DcTlJo9Jytg0JLWBWQXeUQU1gYG7meWpA": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "PublishLifecycleEventsLambdaFunction"
        },
        "CodeSha256": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU="
      }
    },
    "PublishLifecycleTestLambdaVersionZ1Q5496Hp1Gia8ccx2TnpWKpLwOzKqMlLFBwS86jM": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "PublishLifecycleTestLambdaFunction"
        },
        "CodeSha256": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU="
      }
    },
    "C1AccEventsListenerTestLambdaVersionkLdJ2Jv0TODhb3RB85kuq3zxP260X9PNjJz5cbXm28": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "C1AccEventsListenerTestLambdaFunction"
        },
        "CodeSha256": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU="
      }
    },
    "C1AccEventsListenerLambdaVersionkWdziiOYkLu50jIRCZiv12TEtAnZVR1fGuk7Bcw": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "C1AccEventsListenerLambdaFunction"
        },
        "CodeSha256": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU="
      }
    },
    "SetStagePropertiesLambdaVersionxl3w52izpdEC5Mw74V1N3m4ePpyJI1DbWUUYvOOT4": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "SetStagePropertiesLambdaFunction"
        },
        "CodeSha256": "PlySBw5fYODTVplSGHJ0fTCFdYUkY9ypJT5RMPuaCb0="
      }
    },
    "DecryptSecretLambdaVersiondLo6GXPatZFS2r4OJ0WiB8ffyy23lFqgR7zhYNjhG7o": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "DecryptSecretLambdaFunction"
        },
        "CodeSha256": "zMJqkL0WayQCdJCuRuY2BMc+iLtuylYngbkHhITuEnE="
      }
    },
    "ApiGatewayRestApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "local-service-source-accounts",
        "EndpointConfiguration": {
          "Types": [
            "REGIONAL"
          ]
        },
        "Policy": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": "*",
              "Action": "execute-api:Invoke",
              "Resource": [
                "execute-api:/local/POST/api/integrations/github",
                "execute-api:/local/OPTIONS/api/integrations/github",
                "execute-api:/local/DELETE/api/integrations/*",
                "execute-api:/local/OPTIONS/api/integrations/*",
                "execute-api:/local/GET/api/integrations",
                "execute-api:/local/OPTIONS/api/integrations",
                "execute-api:/local/GET/setup",
                "execute-api:/local/POST/webhooks/github"
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "execute-api:Invoke"
              ],
              "Principal": {
                "AWS": [
                  "431319421842",
                  {
                    "Fn::Sub": "arn:${AWS::Partition}:iam::431319421842:role/ADFS-ADMIN"
                  },
                  "136900188386",
                  {
                    "Fn::Sub": "arn:${AWS::Partition}:iam::136900188386:role/ADFS-ADMIN"
                  }
                ]
              },
              "Resource": [
                "execute-api:/local/POST/api/authorizations",
                "execute-api:/local/GET/api/internal-integrations",
                "execute-api:/local/OPTIONS/api/internal-integrations"
              ]
            }
          ]
        },
        "MinimumCompressionSize": 0,
        "Parameters": {
          "endpointConfigurationTypes": "REGIONAL"
        },
        "Tags": [
          {
            "Key": "SERVICE",
            "Value": "service-source-accounts"
          },
          {
            "Key": "STAGE",
            "Value": "local"
          }
        ]
      },
      "DependsOn": [
        "accessLogGroup"
      ]
    },
    "ApiGatewayResourceApi": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "api",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceApiIntegrations": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceApi"
        },
        "PathPart": "integrations",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceApiIntegrationsGithub": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceApiIntegrations"
        },
        "PathPart": "github",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceApiIntegrationsIntegrationidVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceApiIntegrations"
        },
        "PathPart": "{integrationID}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceApiAuthorizations": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceApi"
        },
        "PathPart": "authorizations",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceApiInternalDashintegrations": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceApi"
        },
        "PathPart": "internal-integrations",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceWebhooks": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "webhooks",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceWebhooksGithub": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceWebhooks"
        },
        "PathPart": "github",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodApiIntegrationsGithubOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Credentials": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'https://dev-cloudone.trendmicro.com'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Api-Version,Api-Version'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'",
                "method.response.header.Access-Control-Allow-Credentials": "'true'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceApiIntegrationsGithub"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodApiAuthorizationsOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Credentials": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'https://dev-cloudone.trendmicro.com'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Api-Version,Api-Version'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'",
                "method.response.header.Access-Control-Allow-Credentials": "'true'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceApiAuthorizations"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodWebhooksGithubOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceWebhooksGithub"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodApiIntegrationsIntegrationidVarOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Credentials": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'https://dev-cloudone.trendmicro.com'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Api-Version,Api-Version'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST,DELETE,GET'",
                "method.response.header.Access-Control-Allow-Credentials": "'true'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceApiIntegrationsIntegrationidVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodApiIntegrationsOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Credentials": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'https://dev-cloudone.trendmicro.com'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Api-Version,Api-Version'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'",
                "method.response.header.Access-Control-Allow-Credentials": "'true'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceApiIntegrations"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodApiInternalDashintegrationsOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'https://dev-cloudone.trendmicro.com'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceApiInternalDashintegrations"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodApiIntegrationsGithubPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {
          "method.request.header.Api-Version": true
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceApiIntegrationsGithub"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "CUSTOM",
        "AuthorizerId": {
          "Ref": "CloudOneAuthorizerApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "CreateGitHubIntLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": [],
        "RequestValidatorId": {
          "Ref": "ApiGatewayServicesourceaccountsRequestValidator"
        }
      },
      "DependsOn": "CloudOneAuthorizerApiGatewayAuthorizer"
    },
    "ApiGatewayMethodApiAuthorizationsPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {
          "method.request.header.Api-Version": true,
          "method.request.header.cloudOneAccountID": true
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceApiAuthorizations"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "AWS_IAM",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "CreateProviderAuthLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": [],
        "RequestValidatorId": {
          "Ref": "ApiGatewayServicesourceaccountsRequestValidator"
        }
      },
      "DependsOn": [
        "CreateProviderAuthLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodWebhooksGithubPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceWebhooksGithub"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GithubWebhookLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "GithubWebhookLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodApiIntegrationsIntegrationidVarGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {
          "method.request.header.Api-Version": true
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceApiIntegrationsIntegrationidVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "CUSTOM",
        "AuthorizerId": {
          "Ref": "CloudOneAuthorizerApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetIntegrationLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": [],
        "RequestValidatorId": {
          "Ref": "ApiGatewayServicesourceaccountsRequestValidator"
        }
      },
      "DependsOn": "CloudOneAuthorizerApiGatewayAuthorizer"
    },
    "ApiGatewayMethodApiIntegrationsIntegrationidVarDelete": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "DELETE",
        "RequestParameters": {
          "method.request.header.Api-Version": true
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceApiIntegrationsIntegrationidVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "CUSTOM",
        "AuthorizerId": {
          "Ref": "CloudOneAuthorizerApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "DeleteIntegrationLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": [],
        "RequestValidatorId": {
          "Ref": "ApiGatewayServicesourceaccountsRequestValidator"
        }
      },
      "DependsOn": "CloudOneAuthorizerApiGatewayAuthorizer"
    },
    "ApiGatewayMethodApiIntegrationsGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {
          "method.request.header.Api-Version": true
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceApiIntegrations"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "CUSTOM",
        "AuthorizerId": {
          "Ref": "CloudOneAuthorizerApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "ListIntegrationsLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": [],
        "RequestValidatorId": {
          "Ref": "ApiGatewayServicesourceaccountsRequestValidator"
        }
      },
      "DependsOn": "CloudOneAuthorizerApiGatewayAuthorizer"
    },
    "ApiGatewayMethodApiIntegrationsIntegrationidVarPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {
          "method.request.header.Api-Version": true
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceApiIntegrationsIntegrationidVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "CUSTOM",
        "AuthorizerId": {
          "Ref": "CloudOneAuthorizerApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "ModifyIntegrationLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": [],
        "RequestValidatorId": {
          "Ref": "ApiGatewayServicesourceaccountsRequestValidator"
        }
      },
      "DependsOn": "CloudOneAuthorizerApiGatewayAuthorizer"
    },
    "ApiGatewayMethodApiInternalDashintegrationsGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {
          "method.request.header.Api-Version": true,
          "method.request.header.cloudOneAccountID": true
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceApiInternalDashintegrations"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "AWS_IAM",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "ListIntegrationsIntlLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": [],
        "RequestValidatorId": {
          "Ref": "ApiGatewayServicesourceaccountsRequestValidator"
        }
      },
      "DependsOn": [
        "ListIntegrationsIntlLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayServicesourceaccountsRequestValidator": {
      "Type": "AWS::ApiGateway::RequestValidator",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ValidateRequestBody": true,
        "ValidateRequestParameters": true,
        "Name": "service-source-accounts-local | Validate request body and querystring parameters"
      }
    },
    "CloudOneAuthorizerApiGatewayAuthorizer": {
      "Type": "AWS::ApiGateway::Authorizer",
      "Properties": {
        "AuthorizerResultTtlInSeconds": 0,
        "IdentitySource": "method.request.header.Authorization",
        "Name": "cloudOneAuthorizer",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "AuthorizerUri": {
          "Fn::Sub": [
            "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${c1AuthorizerArn}/invocations",
            {
              "c1AuthorizerArn": {
                "Fn::Sub": [
                  "arn:${AWS::Partition}:lambda:${AWS::Region}:${awsAccountNumber}:function:regional-tokens-pre-staging-cloudOneAuthorizer",
                  {
                    "awsAccountNumber": "000568857918"
                  }
                ]
              }
            }
          ]
        },
        "Type": "REQUEST"
      }
    },
    "ApiGatewayDeployment1667485915587": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "StageName": "local"
      },
      "DependsOn": [
        "ApiGatewayMethodApiIntegrationsGithubOptions",
        "ApiGatewayMethodApiAuthorizationsOptions",
        "ApiGatewayMethodWebhooksGithubOptions",
        "ApiGatewayMethodApiIntegrationsIntegrationidVarOptions",
        "ApiGatewayMethodApiIntegrationsOptions",
        "ApiGatewayMethodApiInternalDashintegrationsOptions",
        "ApiGatewayMethodApiIntegrationsGithubPost",
        "ApiGatewayMethodApiAuthorizationsPost",
        "ApiGatewayMethodWebhooksGithubPost",
        "ApiGatewayMethodApiIntegrationsIntegrationidVarGet",
        "ApiGatewayMethodApiIntegrationsIntegrationidVarDelete",
        "ApiGatewayMethodApiIntegrationsGet",
        "ApiGatewayMethodApiIntegrationsIntegrationidVarPost",
        "ApiGatewayMethodApiInternalDashintegrationsGet"
      ]
    },
    "CreateGitHubIntLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CreateGitHubIntLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "CreateProviderAuthLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CreateProviderAuthLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GithubWebhookLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GithubWebhookLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetIntegrationLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetIntegrationLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "DeleteIntegrationLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "DeleteIntegrationLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "ListIntegrationsLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "ListIntegrationsLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "ModifyIntegrationLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "ModifyIntegrationLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "ListIntegrationsIntlLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "ListIntegrationsIntlLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "PublishLifecycleEventsEventSourceMappingDynamodbSourceAccountsTable": {
      "Type": "AWS::Lambda::EventSourceMapping",
      "DependsOn": [
        "publishLifecycleEventsRole"
      ],
      "Properties": {
        "BatchSize": 1,
        "Enabled": true,
        "EventSourceArn": {
          "Fn::GetAtt": [
            "sourceAccountsTable",
            "StreamArn"
          ]
        },
        "FunctionName": {
          "Fn::GetAtt": [
            "PublishLifecycleEventsLambdaFunction",
            "Arn"
          ]
        },
        "StartingPosition": "TRIM_HORIZON"
      }
    },
    "InternalEventsListenerEventSourceMappingSQSInternalEventsQueue": {
      "Type": "AWS::Lambda::EventSourceMapping",
      "DependsOn": [
        "internalEventsListenerRole",
        "internalEventsListenerPolicy"
      ],
      "Properties": {
        "BatchSize": 1,
        "EventSourceArn": {
          "Fn::GetAtt": [
            "internalEventsQueue",
            "Arn"
          ]
        },
        "FunctionName": {
          "Fn::GetAtt": [
            "InternalEventsListenerLambdaFunction",
            "Arn"
          ]
        },
        "Enabled": true
      }
    },
    "C1AccEventsListenerEventSourceMappingSQSC1AccLifecycleEventsQueue": {
      "Type": "AWS::Lambda::EventSourceMapping",
      "DependsOn": [
        "c1AccEventsListenerRole",
        "c1AccEventsListenerPolicy"
      ],
      "Properties": {
        "BatchSize": 1,
        "EventSourceArn": {
          "Fn::GetAtt": [
            "c1AccLifecycleEventsQueue",
            "Arn"
          ]
        },
        "FunctionName": {
          "Fn::GetAtt": [
            "C1AccEventsListenerLambdaFunction",
            "Arn"
          ]
        },
        "Enabled": true
      }
    },
    "GatewayResponseDEFAULT4XX": {
      "Type": "AWS::ApiGateway::GatewayResponse",
      "Properties": {
        "ResponseParameters": {
          "gatewayresponse.header.Strict-Transport-Security": "'max-age=31536000; includeSubdomains'",
          "gatewayresponse.header.Cache-Control": "'no-store; max-age=0'"
        },
        "ResponseType": "DEFAULT_4XX",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "GatewayResponseDEFAULT5XX": {
      "Type": "AWS::ApiGateway::GatewayResponse",
      "Properties": {
        "ResponseParameters": {
          "gatewayresponse.header.Strict-Transport-Security": "'max-age=31536000; includeSubdomains'",
          "gatewayresponse.header.Cache-Control": "'no-store; max-age=0'"
        },
        "ResponseType": "DEFAULT_5XX",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "configureApiGatewayStageSettings": {
      "Type": "Custom::PatchApiGatewayStage",
      "DependsOn": [
        "ApiGatewayDeployment1667485915587",
        "setStagePropertiesPolicy",
        "SetStagePropertiesLogGroup"
      ],
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "SetStagePropertiesLambdaFunction",
            "Arn"
          ]
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "StageName": "local",
        "StageDescription": {
          "LoggingLevel": "ERROR",
          "MetricsEnabled": true,
          "DataTraceEnabled": false,
          "AccessLogSetting": {
            "DestinationArn": {
              "Fn::GetAtt": [
                "accessLogGroup",
                "Arn"
              ]
            },
            "Format": "{\"requestId\":\"$context.requestId\",\"domainName\":\"$context.domainName\",\"path\":\"$context.path\",\"apiDeploymentStage\":\"$context.stage\",\"httpMethod\":\"$context.httpMethod\",\"status\":\"$context.status\",\"latency\":\"$context.responseLatency\",\"waf\":{\"latency\":\"$context.waf.latency\"},\"authorizer\":{\"latency\":\"$context.authorizer.latency\",\"status\":\"$context.authorizer.status\"},\"integration\":{\"requestId\":\"$context.integration.requestId\",\"error\":\"$context.integration.error\",\"latency\":\"$context.integration.latency\"},\"error\":{\"message\":\"$context.error.message\",\"responseType\":\"$context.error.responseType\"}}"
          },
          "TracingEnabled": true,
          "Variables": {
            "stage": "local"
          }
        }
      }
    },
    "accessLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "service-source-accounts-local-AccessLogGroup",
        "RetentionInDays": 14,
        "Tags": [
          {
            "Key": "SERVICE",
            "Value": "service-source-accounts"
          },
          {
            "Key": "STAGE",
            "Value": "local"
          }
        ]
      }
    },
    "apiWAFWebACLAssociation": {
      "Type": "AWS::WAFv2::WebACLAssociation",
      "DependsOn": [
        "ApiGatewayDeployment1667485915587"
      ],
      "Properties": {
        "ResourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":apigateway:",
              {
                "Ref": "AWS::Region"
              },
              "::/restapis/",
              {
                "Fn::Join": [
                  "/",
                  [
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "stages",
                    "local"
                  ]
                ]
              }
            ]
          ]
        },
        "WebACLArn": {
          "Fn::GetAtt": [
            "apiWAFWebACL",
            "Arn"
          ]
        }
      }
    },
    "apiWAFWebACL": {
      "Type": "AWS::WAFv2::WebACL",
      "Properties": {
        "Name": "service-source-accounts-local-WebACL",
        "Scope": "REGIONAL",
        "Description": "API Gateway Web Access Control List",
        "DefaultAction": {
          "Allow": {}
        },
        "CustomResponseBodies": {
          "TooManyRequestsResponseBodyKey": {
            "ContentType": "APPLICATION_JSON",
            "Content": "{\"message\": \"too many requests\"}"
          },
          "PayloadTooLargeResponseBodyKey": {
            "ContentType": "APPLICATION_JSON",
            "Content": "{\"message\": \"payload too large\"}"
          }
        },
        "VisibilityConfig": {
          "CloudWatchMetricsEnabled": true,
          "MetricName": "service-source-accounts-local",
          "SampledRequestsEnabled": true
        },
        "Rules": [
          {
            "Name": "localRateLimitRule",
            "Action": {
              "Block": {
                "CustomResponse": {
                  "ResponseCode": 429,
                  "CustomResponseBodyKey": "TooManyRequestsResponseBodyKey"
                }
              }
            },
            "Priority": 0,
            "Statement": {
              "RateBasedStatement": {
                "AggregateKeyType": "IP",
                "Limit": 1000
              }
            },
            "VisibilityConfig": {
              "CloudWatchMetricsEnabled": true,
              "MetricName": "localSubscriptionsRateLimit",
              "SampledRequestsEnabled": true
            }
          },
          {
            "Name": "AWS-AWSManagedRulesCommonRuleSet",
            "Priority": 1,
            "Statement": {
              "ManagedRuleGroupStatement": {
                "VendorName": "AWS",
                "Name": "AWSManagedRulesCommonRuleSet",
                "ExcludedRules": [
                  {
                    "Name": "SizeRestrictions_BODY"
                  }
                ]
              }
            },
            "OverrideAction": {
              "None": {}
            },
            "VisibilityConfig": {
              "SampledRequestsEnabled": true,
              "CloudWatchMetricsEnabled": true,
              "MetricName": "AWS-AWSManagedRulesCommonRuleSet"
            }
          },
          {
            "Name": "localPayloadSizeRule",
            "Action": {
              "Block": {
                "CustomResponse": {
                  "ResponseCode": 413,
                  "CustomResponseBodyKey": "PayloadTooLargeResponseBodyKey"
                }
              }
            },
            "Priority": 2,
            "Statement": {
              "SizeConstraintStatement": {
                "ComparisonOperator": "GT",
                "FieldToMatch": {
                  "Body": {}
                },
                "Size": 25000000,
                "TextTransformations": [
                  {
                    "Priority": 0,
                    "Type": "NONE"
                  }
                ]
              }
            },
            "VisibilityConfig": {
              "CloudWatchMetricsEnabled": true,
              "MetricName": "localPayloadSizeLimit",
              "SampledRequestsEnabled": true
            }
          },
          {
            "Name": "AWS-AWSManagedRulesKnownBadInputsRuleSet",
            "Priority": 3,
            "Statement": {
              "ManagedRuleGroupStatement": {
                "VendorName": "AWS",
                "Name": "AWSManagedRulesKnownBadInputsRuleSet"
              }
            },
            "OverrideAction": {
              "None": {}
            },
            "VisibilityConfig": {
              "SampledRequestsEnabled": true,
              "CloudWatchMetricsEnabled": true,
              "MetricName": "AWS-AWSManagedRulesKnownBadInputsRuleSet"
            }
          }
        ],
        "Tags": [
          {
            "Key": "SERVICE",
            "Value": "service-source-accounts"
          },
          {
            "Key": "STAGE",
            "Value": "local"
          }
        ]
      }
    },
    "hostedZone": {
      "Type": "AWS::Route53::HostedZone",
      "Condition": "deployHostedZone",
      "Properties": {
        "Name": "sourceaccounts.trend-us-1.dev-cloudone.trendmicro.com.",
        "HostedZoneConfig": {
          "Comment": "The hosted zone for the source accounts service in the trend-us-1 region of Cloud One. Created by Serverless Framework with stage: local"
        }
      }
    },
    "domainCertificate": {
      "Type": "AWS::CertificateManager::Certificate",
      "Condition": "deployCustomDomain",
      "Properties": {
        "DomainName": "sourceaccounts.trend-us-1.dev-cloudone.trendmicro.com",
        "DomainValidationOptions": [
          {
            "DomainName": "sourceaccounts.trend-us-1.dev-cloudone.trendmicro.com",
            "HostedZoneId": {
              "Ref": "hostedZone"
            }
          }
        ],
        "ValidationMethod": "DNS",
        "Tags": [
          {
            "Key": "SERVICE",
            "Value": "service-source-accounts"
          },
          {
            "Key": "STAGE",
            "Value": "local"
          }
        ]
      },
      "Metadata": {
        "cfn-lint": {
          "config": {
            "ignore_checks": [
              "W1001"
            ]
          }
        }
      }
    },
    "domainName": {
      "Type": "AWS::ApiGateway::DomainName",
      "Condition": "deployCustomDomain",
      "Properties": {
        "RegionalCertificateArn": {
          "Ref": "domainCertificate"
        },
        "DomainName": "sourceaccounts.trend-us-1.dev-cloudone.trendmicro.com",
        "SecurityPolicy": "TLS_1_2",
        "EndpointConfiguration": {
          "Types": [
            "REGIONAL"
          ]
        },
        "Tags": [
          {
            "Key": "SERVICE",
            "Value": "service-source-accounts"
          },
          {
            "Key": "STAGE",
            "Value": "local"
          }
        ]
      }
    },
    "apiPathMapping": {
      "Type": "AWS::ApiGateway::BasePathMapping",
      "DependsOn": [
        "ApiGatewayDeployment1667485915587"
      ],
      "Condition": "deployCustomDomain",
      "Properties": {
        "DomainName": {
          "Ref": "domainName"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "Stage": "local"
      }
    },
    "Route53Records": {
      "Type": "AWS::Route53::RecordSetGroup",
      "Condition": "deployCustomDomain",
      "Metadata": {
        "cfn-lint": {
          "config": {
            "ignore_checks": [
              "W1001"
            ]
          }
        }
      },
      "Properties": {
        "HostedZoneId": {
          "Ref": "hostedZone"
        },
        "RecordSets": [
          {
            "Name": "sourceaccounts.trend-us-1.dev-cloudone.trendmicro.com",
            "Type": "A",
            "AliasTarget": {
              "HostedZoneId": {
                "Fn::GetAtt": [
                  "domainName",
                  "RegionalHostedZoneId"
                ]
              },
              "DNSName": {
                "Fn::GetAtt": [
                  "domainName",
                  "RegionalDomainName"
                ]
              },
              "EvaluateTargetHealth": false
            }
          },
          {
            "Name": "sourceaccounts.trend-us-1.dev-cloudone.trendmicro.com",
            "Type": "AAAA",
            "AliasTarget": {
              "HostedZoneId": {
                "Fn::GetAtt": [
                  "domainName",
                  "RegionalHostedZoneId"
                ]
              },
              "DNSName": {
                "Fn::GetAtt": [
                  "domainName",
                  "RegionalDomainName"
                ]
              },
              "EvaluateTargetHealth": false
            }
          }
        ]
      }
    },
    "healthCheck": {
      "Type": "AWS::Route53::HealthCheck",
      "Condition": "deployCustomDomain",
      "Properties": {
        "HealthCheckConfig": {
          "FullyQualifiedDomainName": "sourceaccounts.trend-us-1.dev-cloudone.trendmicro.com",
          "Type": "HTTPS",
          "ResourcePath": "/ping",
          "RequestInterval": 30,
          "FailureThreshold": 3
        }
      }
    },
    "ListIntegrationsAvailability": {
      "DependsOn": [
        "alarmsSNSTopic"
      ],
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmName": "c1c-local-us-east-2-service-source-accounts-ListIntegrationsAvailability-p1",
        "AlarmActions": [
          {
            "Ref": "alarmsSNSTopic"
          }
        ],
        "OKActions": [
          {
            "Ref": "alarmsSNSTopic"
          }
        ],
        "ActionsEnabled": false,
        "AlarmDescription": {
          "Fn::Sub": [
            "The endpoint (GET /integrations) responsible to fetch source account integrations has Availability < 99% & 3 (or more) 5xx Errors Received\n${alarmDescriptionTemplate}\nlistIntegrationsLogGroupURL: ${logGroupURL}\nPlaybook: ${playbookURL}\n",
            {
              "alarmDescriptionTemplate": {
                "Fn::Sub": [
                  "Service: ${service}\nStage: ${stage}\nRegion: ${AWS::Region}\nCloudWatch Dashboard: ${dashboardURL}\n",
                  {
                    "service": "service-source-accounts",
                    "stage": "local",
                    "dashboardURL": {
                      "Fn::Join": [
                        "",
                        [
                          "https://console.aws.amazon.com/cloudwatch/home?region=",
                          {
                            "Ref": "AWS::Region"
                          },
                          "#dashboards:name=",
                          {
                            "Ref": "mainCloudwatchDashboard"
                          }
                        ]
                      ]
                    }
                  }
                ]
              },
              "logGroupURL": {
                "Fn::Join": [
                  "",
                  [
                    {
                      "Fn::Sub": "https://console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#logsV2:log-groups/log-group/$252Faws$252Flambda$252F"
                    },
                    "service-source-accounts-local-listIntegrations"
                  ]
                ]
              },
              "playbookURL": "https://dsgithub.trendmicro.com/pages/cloud-one-common/cloud-one-common.github.io/Reference/playbooks/templates/5xx-api-gateway-errors/"
            }
          ]
        },
        "Metrics": [
          {
            "Id": "calculation",
            "Label": "Calculation",
            "Expression": "IF((availability <= 99) AND (num5XXErrors >= 3), 1, 0)",
            "ReturnData": true
          },
          {
            "Expression": "100*(invocations-num5XXErrors)/invocations",
            "Id": "availability",
            "Label": "Availability",
            "ReturnData": false
          },
          {
            "Id": "num5XXErrors",
            "Label": "5XX Errors",
            "MetricStat": {
              "Metric": {
                "Dimensions": [
                  {
                    "Name": "ApiName",
                    "Value": "local-service-source-accounts"
                  },
                  {
                    "Name": "Resource",
                    "Value": "/api/integrations"
                  },
                  {
                    "Name": "Stage",
                    "Value": "local"
                  },
                  {
                    "Name": "Method",
                    "Value": "GET"
                  }
                ],
                "MetricName": "5XXError",
                "Namespace": "AWS/ApiGateway"
              },
              "Period": 300,
              "Stat": "Sum",
              "Unit": "Count"
            },
            "ReturnData": false
          },
          {
            "Id": "invocations",
            "Label": "Invocations",
            "MetricStat": {
              "Metric": {
                "Dimensions": [
                  {
                    "Name": "ApiName",
                    "Value": "local-service-source-accounts"
                  },
                  {
                    "Name": "Resource",
                    "Value": "/api/integrations"
                  },
                  {
                    "Name": "Stage",
                    "Value": "local"
                  },
                  {
                    "Name": "Method",
                    "Value": "GET"
                  }
                ],
                "MetricName": "Count",
                "Namespace": "AWS/ApiGateway"
              },
              "Period": 300,
              "Stat": "Sum",
              "Unit": "Count"
            },
            "ReturnData": false
          }
        ],
        "ComparisonOperator": "GreaterThanThreshold",
        "EvaluationPeriods": 2,
        "DatapointsToAlarm": 1,
        "Threshold": 0,
        "TreatMissingData": "notBreaching"
      }
    },
    "ListIntegrationsInternalAvailability": {
      "DependsOn": [
        "alarmsSNSTopic"
      ],
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmName": "c1c-local-us-east-2-service-source-accounts-ListIntegrationsInternalAvailability-p1",
        "AlarmActions": [
          {
            "Ref": "alarmsSNSTopic"
          }
        ],
        "OKActions": [
          {
            "Ref": "alarmsSNSTopic"
          }
        ],
        "ActionsEnabled": false,
        "AlarmDescription": {
          "Fn::Sub": [
            "The endpoint (GET /internal-integrations) responsible to fetch source account integrations for security services has Availability < 99% & 3 (or more) 5xx Errors Received\n${alarmDescriptionTemplate}\nlistIntegrationsIntlLogGroupURL: ${logGroupURL}\nPlaybook: ${playbookURL}\n",
            {
              "alarmDescriptionTemplate": {
                "Fn::Sub": [
                  "Service: ${service}\nStage: ${stage}\nRegion: ${AWS::Region}\nCloudWatch Dashboard: ${dashboardURL}\n",
                  {
                    "service": "service-source-accounts",
                    "stage": "local",
                    "dashboardURL": {
                      "Fn::Join": [
                        "",
                        [
                          "https://console.aws.amazon.com/cloudwatch/home?region=",
                          {
                            "Ref": "AWS::Region"
                          },
                          "#dashboards:name=",
                          {
                            "Ref": "mainCloudwatchDashboard"
                          }
                        ]
                      ]
                    }
                  }
                ]
              },
              "logGroupURL": {
                "Fn::Join": [
                  "",
                  [
                    {
                      "Fn::Sub": "https://console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#logsV2:log-groups/log-group/$252Faws$252Flambda$252F"
                    },
                    "service-source-accounts-local-listIntegrationsIntl"
                  ]
                ]
              },
              "playbookURL": "https://dsgithub.trendmicro.com/pages/cloud-one-common/cloud-one-common.github.io/Reference/playbooks/templates/5xx-api-gateway-errors/"
            }
          ]
        },
        "Metrics": [
          {
            "Id": "calculation",
            "Label": "Calculation",
            "Expression": "IF((availability <= 99) AND (num5XXErrors >= 3), 1, 0)",
            "ReturnData": true
          },
          {
            "Expression": "100*(invocations-num5XXErrors)/invocations",
            "Id": "availability",
            "Label": "Availability",
            "ReturnData": false
          },
          {
            "Id": "num5XXErrors",
            "Label": "5XX Errors",
            "MetricStat": {
              "Metric": {
                "Dimensions": [
                  {
                    "Name": "ApiName",
                    "Value": "local-service-source-accounts"
                  },
                  {
                    "Name": "Resource",
                    "Value": "/api/internal-integrations"
                  },
                  {
                    "Name": "Stage",
                    "Value": "local"
                  },
                  {
                    "Name": "Method",
                    "Value": "GET"
                  }
                ],
                "MetricName": "5XXError",
                "Namespace": "AWS/ApiGateway"
              },
              "Period": 300,
              "Stat": "Sum",
              "Unit": "Count"
            },
            "ReturnData": false
          },
          {
            "Id": "invocations",
            "Label": "Invocations",
            "MetricStat": {
              "Metric": {
                "Dimensions": [
                  {
                    "Name": "ApiName",
                    "Value": "local-service-source-accounts"
                  },
                  {
                    "Name": "Resource",
                    "Value": "/api/internal-integrations"
                  },
                  {
                    "Name": "Stage",
                    "Value": "local"
                  },
                  {
                    "Name": "Method",
                    "Value": "GET"
                  }
                ],
                "MetricName": "Count",
                "Namespace": "AWS/ApiGateway"
              },
              "Period": 300,
              "Stat": "Sum",
              "Unit": "Count"
            },
            "ReturnData": false
          }
        ],
        "ComparisonOperator": "GreaterThanThreshold",
        "EvaluationPeriods": 2,
        "DatapointsToAlarm": 1,
        "Threshold": 0,
        "TreatMissingData": "notBreaching"
      }
    },
    "CreateGithubIntegrationAvailability": {
      "DependsOn": [
        "alarmsSNSTopic"
      ],
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmName": "c1c-local-us-east-2-service-source-accounts-CreateIntegrationAvailability-p1",
        "AlarmActions": [
          {
            "Ref": "alarmsSNSTopic"
          }
        ],
        "OKActions": [
          {
            "Ref": "alarmsSNSTopic"
          }
        ],
        "ActionsEnabled": false,
        "AlarmDescription": {
          "Fn::Sub": [
            "The endpoint (POST /integrations/github) responsible for creating new source account integration has Availability < 99% & 3 (or more) 5xx Errors Received\n${alarmDescriptionTemplate}\ncreateGithubIntLogGroupURL: ${logGroupURL}\nPlaybook: ${playbookURL}\n",
            {
              "alarmDescriptionTemplate": {
                "Fn::Sub": [
                  "Service: ${service}\nStage: ${stage}\nRegion: ${AWS::Region}\nCloudWatch Dashboard: ${dashboardURL}\n",
                  {
                    "service": "service-source-accounts",
                    "stage": "local",
                    "dashboardURL": {
                      "Fn::Join": [
                        "",
                        [
                          "https://console.aws.amazon.com/cloudwatch/home?region=",
                          {
                            "Ref": "AWS::Region"
                          },
                          "#dashboards:name=",
                          {
                            "Ref": "mainCloudwatchDashboard"
                          }
                        ]
                      ]
                    }
                  }
                ]
              },
              "logGroupURL": {
                "Fn::Join": [
                  "",
                  [
                    {
                      "Fn::Sub": "https://console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#logsV2:log-groups/log-group/$252Faws$252Flambda$252F"
                    },
                    "service-source-accounts-local-createGitHubInt"
                  ]
                ]
              },
              "playbookURL": "https://dsgithub.trendmicro.com/pages/cloud-one-common/cloud-one-common.github.io/Reference/playbooks/templates/5xx-api-gateway-errors/"
            }
          ]
        },
        "Metrics": [
          {
            "Id": "calculation",
            "Label": "Calculation",
            "Expression": "IF((availability <= 99) AND (num5XXErrors >= 3), 1, 0)",
            "ReturnData": true
          },
          {
            "Expression": "100*(invocations-num5XXErrors)/invocations",
            "Id": "availability",
            "Label": "Availability",
            "ReturnData": false
          },
          {
            "Id": "num5XXErrors",
            "Label": "5XX Errors",
            "MetricStat": {
              "Metric": {
                "Dimensions": [
                  {
                    "Name": "ApiName",
                    "Value": "local-service-source-accounts"
                  },
                  {
                    "Name": "Resource",
                    "Value": "/api/integrations/github"
                  },
                  {
                    "Name": "Stage",
                    "Value": "local"
                  },
                  {
                    "Name": "Method",
                    "Value": "POST"
                  }
                ],
                "MetricName": "5XXError",
                "Namespace": "AWS/ApiGateway"
              },
              "Period": 300,
              "Stat": "Sum",
              "Unit": "Count"
            },
            "ReturnData": false
          },
          {
            "Id": "invocations",
            "Label": "Invocations",
            "MetricStat": {
              "Metric": {
                "Dimensions": [
                  {
                    "Name": "ApiName",
                    "Value": "local-service-source-accounts"
                  },
                  {
                    "Name": "Resource",
                    "Value": "/api/integrations/github"
                  },
                  {
                    "Name": "Stage",
                    "Value": "local"
                  },
                  {
                    "Name": "Method",
                    "Value": "POST"
                  }
                ],
                "MetricName": "Count",
                "Namespace": "AWS/ApiGateway"
              },
              "Period": 300,
              "Stat": "Sum",
              "Unit": "Count"
            },
            "ReturnData": false
          }
        ],
        "ComparisonOperator": "GreaterThanThreshold",
        "EvaluationPeriods": 2,
        "DatapointsToAlarm": 1,
        "Threshold": 0,
        "TreatMissingData": "notBreaching"
      }
    },
    "ModifyIntegrationAvailability": {
      "DependsOn": [
        "alarmsSNSTopic"
      ],
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmName": "c1c-local-us-east-2-service-source-accounts-ModifyIntegrationAvailability-p1",
        "AlarmActions": [
          {
            "Ref": "alarmsSNSTopic"
          }
        ],
        "OKActions": [
          {
            "Ref": "alarmsSNSTopic"
          }
        ],
        "ActionsEnabled": false,
        "AlarmDescription": {
          "Fn::Sub": [
            "The endpoint (POST /integrations/{id}) responsible for modifying source account integration has Availability < 99% & 3 (or more) 5xx Errors Received\n${alarmDescriptionTemplate}\nmodifyIntegrationLogGroupURL: ${logGroupURL}\nPlaybook: ${playbookURL}\n",
            {
              "alarmDescriptionTemplate": {
                "Fn::Sub": [
                  "Service: ${service}\nStage: ${stage}\nRegion: ${AWS::Region}\nCloudWatch Dashboard: ${dashboardURL}\n",
                  {
                    "service": "service-source-accounts",
                    "stage": "local",
                    "dashboardURL": {
                      "Fn::Join": [
                        "",
                        [
                          "https://console.aws.amazon.com/cloudwatch/home?region=",
                          {
                            "Ref": "AWS::Region"
                          },
                          "#dashboards:name=",
                          {
                            "Ref": "mainCloudwatchDashboard"
                          }
                        ]
                      ]
                    }
                  }
                ]
              },
              "logGroupURL": {
                "Fn::Join": [
                  "",
                  [
                    {
                      "Fn::Sub": "https://console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#logsV2:log-groups/log-group/$252Faws$252Flambda$252F"
                    },
                    "service-source-accounts-local-modifyIntegration"
                  ]
                ]
              },
              "playbookURL": "https://dsgithub.trendmicro.com/pages/cloud-one-common/cloud-one-common.github.io/Reference/playbooks/templates/5xx-api-gateway-errors/"
            }
          ]
        },
        "Metrics": [
          {
            "Id": "calculation",
            "Label": "Calculation",
            "Expression": "IF((availability <= 99) AND (num5XXErrors >= 3), 1, 0)",
            "ReturnData": true
          },
          {
            "Expression": "100*(invocations-num5XXErrors)/invocations",
            "Id": "availability",
            "Label": "Availability",
            "ReturnData": false
          },
          {
            "Id": "num5XXErrors",
            "Label": "5XX Errors",
            "MetricStat": {
              "Metric": {
                "Dimensions": [
                  {
                    "Name": "ApiName",
                    "Value": "local-service-source-accounts"
                  },
                  {
                    "Name": "Resource",
                    "Value": "/api/integrations/{integrationID}"
                  },
                  {
                    "Name": "Stage",
                    "Value": "local"
                  },
                  {
                    "Name": "Method",
                    "Value": "POST"
                  }
                ],
                "MetricName": "5XXError",
                "Namespace": "AWS/ApiGateway"
              },
              "Period": 300,
              "Stat": "Sum",
              "Unit": "Count"
            },
            "ReturnData": false
          },
          {
            "Id": "invocations",
            "Label": "Invocations",
            "MetricStat": {
              "Metric": {
                "Dimensions": [
                  {
                    "Name": "ApiName",
                    "Value": "local-service-source-accounts"
                  },
                  {
                    "Name": "Resource",
                    "Value": "/api/integrations/{integrationID}"
                  },
                  {
                    "Name": "Stage",
                    "Value": "local"
                  },
                  {
                    "Name": "Method",
                    "Value": "POST"
                  }
                ],
                "MetricName": "Count",
                "Namespace": "AWS/ApiGateway"
              },
              "Period": 300,
              "Stat": "Sum",
              "Unit": "Count"
            },
            "ReturnData": false
          }
        ],
        "ComparisonOperator": "GreaterThanThreshold",
        "EvaluationPeriods": 2,
        "DatapointsToAlarm": 1,
        "Threshold": 0,
        "TreatMissingData": "notBreaching"
      }
    },
    "DeleteIntegrationAvailability": {
      "DependsOn": [
        "alarmsSNSTopic"
      ],
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmName": "c1c-local-us-east-2-service-source-accounts-DeleteIntegrationAvailability-p1",
        "AlarmActions": [
          {
            "Ref": "alarmsSNSTopic"
          }
        ],
        "OKActions": [
          {
            "Ref": "alarmsSNSTopic"
          }
        ],
        "ActionsEnabled": false,
        "AlarmDescription": {
          "Fn::Sub": [
            "The endpoint (DELETE /integrations/{id}) responsible for soft deleting source account integration has Availability < 99% & 3 (or more) 5xx Errors Received\n${alarmDescriptionTemplate}\ndeleteIntegrationLogGroupURL: ${logGroupURL}\nPlaybook: ${playbookURL}\n",
            {
              "alarmDescriptionTemplate": {
                "Fn::Sub": [
                  "Service: ${service}\nStage: ${stage}\nRegion: ${AWS::Region}\nCloudWatch Dashboard: ${dashboardURL}\n",
                  {
                    "service": "service-source-accounts",
                    "stage": "local",
                    "dashboardURL": {
                      "Fn::Join": [
                        "",
                        [
                          "https://console.aws.amazon.com/cloudwatch/home?region=",
                          {
                            "Ref": "AWS::Region"
                          },
                          "#dashboards:name=",
                          {
                            "Ref": "mainCloudwatchDashboard"
                          }
                        ]
                      ]
                    }
                  }
                ]
              },
              "logGroupURL": {
                "Fn::Join": [
                  "",
                  [
                    {
                      "Fn::Sub": "https://console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#logsV2:log-groups/log-group/$252Faws$252Flambda$252F"
                    },
                    "service-source-accounts-local-deleteIntegration"
                  ]
                ]
              },
              "playbookURL": "https://dsgithub.trendmicro.com/pages/cloud-one-common/cloud-one-common.github.io/Reference/playbooks/templates/5xx-api-gateway-errors/"
            }
          ]
        },
        "Metrics": [
          {
            "Id": "calculation",
            "Label": "Calculation",
            "Expression": "IF((availability <= 99) AND (num5XXErrors >= 3), 1, 0)",
            "ReturnData": true
          },
          {
            "Expression": "100*(invocations-num5XXErrors)/invocations",
            "Id": "availability",
            "Label": "Availability",
            "ReturnData": false
          },
          {
            "Id": "num5XXErrors",
            "Label": "5XX Errors",
            "MetricStat": {
              "Metric": {
                "Dimensions": [
                  {
                    "Name": "ApiName",
                    "Value": "local-service-source-accounts"
                  },
                  {
                    "Name": "Resource",
                    "Value": "/api/integrations/{integrationID}"
                  },
                  {
                    "Name": "Stage",
                    "Value": "local"
                  },
                  {
                    "Name": "Method",
                    "Value": "DELETE"
                  }
                ],
                "MetricName": "5XXError",
                "Namespace": "AWS/ApiGateway"
              },
              "Period": 300,
              "Stat": "Sum",
              "Unit": "Count"
            },
            "ReturnData": false
          },
          {
            "Id": "invocations",
            "Label": "Invocations",
            "MetricStat": {
              "Metric": {
                "Dimensions": [
                  {
                    "Name": "ApiName",
                    "Value": "local-service-source-accounts"
                  },
                  {
                    "Name": "Resource",
                    "Value": "/api/integrations/{integrationID}"
                  },
                  {
                    "Name": "Stage",
                    "Value": "local"
                  },
                  {
                    "Name": "Method",
                    "Value": "DELETE"
                  }
                ],
                "MetricName": "Count",
                "Namespace": "AWS/ApiGateway"
              },
              "Period": 300,
              "Stat": "Sum",
              "Unit": "Count"
            },
            "ReturnData": false
          }
        ],
        "ComparisonOperator": "GreaterThanThreshold",
        "EvaluationPeriods": 2,
        "DatapointsToAlarm": 1,
        "Threshold": 0,
        "TreatMissingData": "notBreaching"
      }
    },
    "CreateAuthorizationsAvailability": {
      "DependsOn": [
        "alarmsSNSTopic"
      ],
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmName": "c1c-local-us-east-2-service-source-accounts-CreateAuthorizationsAvailability-p1",
        "AlarmActions": [
          {
            "Ref": "alarmsSNSTopic"
          }
        ],
        "OKActions": [
          {
            "Ref": "alarmsSNSTopic"
          }
        ],
        "ActionsEnabled": false,
        "AlarmDescription": {
          "Fn::Sub": [
            "The endpoint (POST /authorizations) responsible for creating provider authToken has Availability < 99% & 3 (or more) 5xx Errors Received\n${alarmDescriptionTemplate}\ncreateProviderAuthLogGroupURL: ${logGroupURL}\nPlaybook: ${playbookURL}\n",
            {
              "alarmDescriptionTemplate": {
                "Fn::Sub": [
                  "Service: ${service}\nStage: ${stage}\nRegion: ${AWS::Region}\nCloudWatch Dashboard: ${dashboardURL}\n",
                  {
                    "service": "service-source-accounts",
                    "stage": "local",
                    "dashboardURL": {
                      "Fn::Join": [
                        "",
                        [
                          "https://console.aws.amazon.com/cloudwatch/home?region=",
                          {
                            "Ref": "AWS::Region"
                          },
                          "#dashboards:name=",
                          {
                            "Ref": "mainCloudwatchDashboard"
                          }
                        ]
                      ]
                    }
                  }
                ]
              },
              "logGroupURL": {
                "Fn::Join": [
                  "",
                  [
                    {
                      "Fn::Sub": "https://console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#logsV2:log-groups/log-group/$252Faws$252Flambda$252F"
                    },
                    "service-source-accounts-local-createProviderAuth"
                  ]
                ]
              },
              "playbookURL": "https://dsgithub.trendmicro.com/pages/cloud-one-common/cloud-one-common.github.io/Reference/playbooks/templates/5xx-api-gateway-errors/"
            }
          ]
        },
        "Metrics": [
          {
            "Id": "calculation",
            "Label": "Calculation",
            "Expression": "IF((availability <= 99) AND (num5XXErrors >= 3), 1, 0)",
            "ReturnData": true
          },
          {
            "Expression": "100*(invocations-num5XXErrors)/invocations",
            "Id": "availability",
            "Label": "Availability",
            "ReturnData": false
          },
          {
            "Id": "num5XXErrors",
            "Label": "5XX Errors",
            "MetricStat": {
              "Metric": {
                "Dimensions": [
                  {
                    "Name": "ApiName",
                    "Value": "local-service-source-accounts"
                  },
                  {
                    "Name": "Resource",
                    "Value": "/api/authorizations"
                  },
                  {
                    "Name": "Stage",
                    "Value": "local"
                  },
                  {
                    "Name": "Method",
                    "Value": "POST"
                  }
                ],
                "MetricName": "5XXError",
                "Namespace": "AWS/ApiGateway"
              },
              "Period": 300,
              "Stat": "Sum",
              "Unit": "Count"
            },
            "ReturnData": false
          },
          {
            "Id": "invocations",
            "Label": "Invocations",
            "MetricStat": {
              "Metric": {
                "Dimensions": [
                  {
                    "Name": "ApiName",
                    "Value": "local-service-source-accounts"
                  },
                  {
                    "Name": "Resource",
                    "Value": "/api/authorizations"
                  },
                  {
                    "Name": "Stage",
                    "Value": "local"
                  },
                  {
                    "Name": "Method",
                    "Value": "POST"
                  }
                ],
                "MetricName": "Count",
                "Namespace": "AWS/ApiGateway"
              },
              "Period": 300,
              "Stat": "Sum",
              "Unit": "Count"
            },
            "ReturnData": false
          }
        ],
        "ComparisonOperator": "GreaterThanThreshold",
        "EvaluationPeriods": 2,
        "DatapointsToAlarm": 1,
        "Threshold": 0,
        "TreatMissingData": "notBreaching"
      }
    },
    "ListIntegrationsLatency": {
      "DependsOn": [
        "alarmsSNSTopic"
      ],
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmName": "c1c-local-us-east-2-service-source-accounts-ListIntegrationsLatency-p3",
        "AlarmActions": [
          {
            "Ref": "alarmsSNSTopic"
          }
        ],
        "OKActions": [
          {
            "Ref": "alarmsSNSTopic"
          }
        ],
        "ActionsEnabled": false,
        "AlarmDescription": {
          "Fn::Sub": [
            "The endpoint (GET /integrations) responsible to fetch all integrations has been experiencing periods of higher latency than normal (2600ms)%\n${alarmDescriptionTemplate}\nlistIntegrationsLogGroupURL: ${logGroupURL}\nPlaybook: ${playbookURL}\n",
            {
              "alarmDescriptionTemplate": {
                "Fn::Sub": [
                  "Service: ${service}\nStage: ${stage}\nRegion: ${AWS::Region}\nCloudWatch Dashboard: ${dashboardURL}\n",
                  {
                    "service": "service-source-accounts",
                    "stage": "local",
                    "dashboardURL": {
                      "Fn::Join": [
                        "",
                        [
                          "https://console.aws.amazon.com/cloudwatch/home?region=",
                          {
                            "Ref": "AWS::Region"
                          },
                          "#dashboards:name=",
                          {
                            "Ref": "mainCloudwatchDashboard"
                          }
                        ]
                      ]
                    }
                  }
                ]
              },
              "logGroupURL": {
                "Fn::Join": [
                  "",
                  [
                    {
                      "Fn::Sub": "https://console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#logsV2:log-groups/log-group/$252Faws$252Flambda$252F"
                    },
                    "service-source-accounts-local-listIntegrations"
                  ]
                ]
              },
              "playbookURL": "https://dsgithub.trendmicro.com/pages/cloud-one-common/cloud-one-common.github.io/Reference/playbooks/templates/missed-latency-slo/"
            }
          ]
        },
        "Dimensions": [
          {
            "Name": "ApiName",
            "Value": "local-service-source-accounts"
          },
          {
            "Name": "Resource",
            "Value": "/api/integrations"
          },
          {
            "Name": "Stage",
            "Value": "local"
          },
          {
            "Name": "Method",
            "Value": "GET"
          }
        ],
        "MetricName": "Latency",
        "Namespace": "AWS/ApiGateway",
        "ComparisonOperator": "GreaterThanThreshold",
        "DatapointsToAlarm": 4,
        "EvaluationPeriods": 5,
        "Period": 60,
        "ExtendedStatistic": "p99",
        "Threshold": 2600,
        "TreatMissingData": "ignore"
      }
    },
    "ListIntegrationsInternalLatency": {
      "DependsOn": [
        "alarmsSNSTopic"
      ],
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmName": "c1c-local-us-east-2-service-source-accounts-ListIntegrationsInternalLatency-p3",
        "AlarmActions": [
          {
            "Ref": "alarmsSNSTopic"
          }
        ],
        "OKActions": [
          {
            "Ref": "alarmsSNSTopic"
          }
        ],
        "ActionsEnabled": false,
        "AlarmDescription": {
          "Fn::Sub": [
            "The endpoint (GET /integrations-internal) responsible to fetch all integrations has been experiencing periods of higher latency than normal (2600ms)%\n${alarmDescriptionTemplate}\nlistIntegrationsIntlLogGroupURL: ${logGroupURL}\nPlaybook: ${playbookURL}\n",
            {
              "alarmDescriptionTemplate": {
                "Fn::Sub": [
                  "Service: ${service}\nStage: ${stage}\nRegion: ${AWS::Region}\nCloudWatch Dashboard: ${dashboardURL}\n",
                  {
                    "service": "service-source-accounts",
                    "stage": "local",
                    "dashboardURL": {
                      "Fn::Join": [
                        "",
                        [
                          "https://console.aws.amazon.com/cloudwatch/home?region=",
                          {
                            "Ref": "AWS::Region"
                          },
                          "#dashboards:name=",
                          {
                            "Ref": "mainCloudwatchDashboard"
                          }
                        ]
                      ]
                    }
                  }
                ]
              },
              "logGroupURL": {
                "Fn::Join": [
                  "",
                  [
                    {
                      "Fn::Sub": "https://console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#logsV2:log-groups/log-group/$252Faws$252Flambda$252F"
                    },
                    "service-source-accounts-local-listIntegrationsIntl"
                  ]
                ]
              },
              "playbookURL": "https://dsgithub.trendmicro.com/pages/cloud-one-common/cloud-one-common.github.io/Reference/playbooks/templates/missed-latency-slo/"
            }
          ]
        },
        "Dimensions": [
          {
            "Name": "ApiName",
            "Value": "local-service-source-accounts"
          },
          {
            "Name": "Resource",
            "Value": "/api/internal-integrations"
          },
          {
            "Name": "Stage",
            "Value": "local"
          },
          {
            "Name": "Method",
            "Value": "GET"
          }
        ],
        "MetricName": "Latency",
        "Namespace": "AWS/ApiGateway",
        "ComparisonOperator": "GreaterThanThreshold",
        "DatapointsToAlarm": 4,
        "EvaluationPeriods": 5,
        "Period": 60,
        "ExtendedStatistic": "p99",
        "Threshold": 2600,
        "TreatMissingData": "ignore"
      }
    },
    "CreateGithubIntegrationLatency": {
      "DependsOn": [
        "alarmsSNSTopic"
      ],
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmName": "c1c-local-us-east-2-service-source-accounts-CreateGithubIntegrationLatency-p3",
        "AlarmActions": [
          {
            "Ref": "alarmsSNSTopic"
          }
        ],
        "OKActions": [
          {
            "Ref": "alarmsSNSTopic"
          }
        ],
        "ActionsEnabled": false,
        "AlarmDescription": {
          "Fn::Sub": [
            "The endpoint (POST /integrations/github) responsible to create source account has been experiencing periods of higher latency than normal (3300ms)%\n${alarmDescriptionTemplate}\ncreateGithubIntLogGroupURL: ${logGroupURL}\nPlaybook: ${playbookURL}\n",
            {
              "alarmDescriptionTemplate": {
                "Fn::Sub": [
                  "Service: ${service}\nStage: ${stage}\nRegion: ${AWS::Region}\nCloudWatch Dashboard: ${dashboardURL}\n",
                  {
                    "service": "service-source-accounts",
                    "stage": "local",
                    "dashboardURL": {
                      "Fn::Join": [
                        "",
                        [
                          "https://console.aws.amazon.com/cloudwatch/home?region=",
                          {
                            "Ref": "AWS::Region"
                          },
                          "#dashboards:name=",
                          {
                            "Ref": "mainCloudwatchDashboard"
                          }
                        ]
                      ]
                    }
                  }
                ]
              },
              "logGroupURL": {
                "Fn::Join": [
                  "",
                  [
                    {
                      "Fn::Sub": "https://console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#logsV2:log-groups/log-group/$252Faws$252Flambda$252F"
                    },
                    "service-source-accounts-local-createGitHubInt"
                  ]
                ]
              },
              "playbookURL": "https://dsgithub.trendmicro.com/pages/cloud-one-common/cloud-one-common.github.io/Reference/playbooks/templates/missed-latency-slo/"
            }
          ]
        },
        "Dimensions": [
          {
            "Name": "ApiName",
            "Value": "local-service-source-accounts"
          },
          {
            "Name": "Resource",
            "Value": "/api/integrations/github"
          },
          {
            "Name": "Stage",
            "Value": "local"
          },
          {
            "Name": "Method",
            "Value": "POST"
          }
        ],
        "MetricName": "Latency",
        "Namespace": "AWS/ApiGateway",
        "ComparisonOperator": "GreaterThanThreshold",
        "DatapointsToAlarm": 4,
        "EvaluationPeriods": 5,
        "Period": 60,
        "ExtendedStatistic": "p99",
        "Threshold": 3300,
        "TreatMissingData": "ignore"
      }
    },
    "ModifyIntegrationLatency": {
      "DependsOn": [
        "alarmsSNSTopic"
      ],
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmName": "c1c-local-us-east-2-service-source-accounts-ModifyIntegrationLatency-p3",
        "AlarmActions": [
          {
            "Ref": "alarmsSNSTopic"
          }
        ],
        "OKActions": [
          {
            "Ref": "alarmsSNSTopic"
          }
        ],
        "ActionsEnabled": false,
        "AlarmDescription": {
          "Fn::Sub": [
            "The endpoint (POST /integrations/{id}) responsible to modify source account integration has been experiencing periods of higher latency than normal (1600ms)%\n${alarmDescriptionTemplate}\nmodifyIntegrationLogGroupURL: ${logGroupURL}\nPlaybook: ${playbookURL}\n",
            {
              "alarmDescriptionTemplate": {
                "Fn::Sub": [
                  "Service: ${service}\nStage: ${stage}\nRegion: ${AWS::Region}\nCloudWatch Dashboard: ${dashboardURL}\n",
                  {
                    "service": "service-source-accounts",
                    "stage": "local",
                    "dashboardURL": {
                      "Fn::Join": [
                        "",
                        [
                          "https://console.aws.amazon.com/cloudwatch/home?region=",
                          {
                            "Ref": "AWS::Region"
                          },
                          "#dashboards:name=",
                          {
                            "Ref": "mainCloudwatchDashboard"
                          }
                        ]
                      ]
                    }
                  }
                ]
              },
              "logGroupURL": {
                "Fn::Join": [
                  "",
                  [
                    {
                      "Fn::Sub": "https://console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#logsV2:log-groups/log-group/$252Faws$252Flambda$252F"
                    },
                    "service-source-accounts-local-modifyIntegration"
                  ]
                ]
              },
              "playbookURL": "https://dsgithub.trendmicro.com/pages/cloud-one-common/cloud-one-common.github.io/Reference/playbooks/templates/missed-latency-slo/"
            }
          ]
        },
        "Dimensions": [
          {
            "Name": "ApiName",
            "Value": "local-service-source-accounts"
          },
          {
            "Name": "Resource",
            "Value": "/api/integrations/{integrationID}"
          },
          {
            "Name": "Stage",
            "Value": "local"
          },
          {
            "Name": "Method",
            "Value": "POST"
          }
        ],
        "MetricName": "Latency",
        "Namespace": "AWS/ApiGateway",
        "ComparisonOperator": "GreaterThanThreshold",
        "DatapointsToAlarm": 4,
        "EvaluationPeriods": 5,
        "Period": 60,
        "ExtendedStatistic": "p99",
        "Threshold": 1600,
        "TreatMissingData": "ignore"
      }
    },
    "DeleteIntegrationLatency": {
      "DependsOn": [
        "alarmsSNSTopic"
      ],
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmName": "c1c-local-us-east-2-service-source-accounts-DeleteIntegrationLatency-p3",
        "AlarmActions": [
          {
            "Ref": "alarmsSNSTopic"
          }
        ],
        "OKActions": [
          {
            "Ref": "alarmsSNSTopic"
          }
        ],
        "ActionsEnabled": false,
        "AlarmDescription": {
          "Fn::Sub": [
            "The endpoint (DELETE /integrations/{id}) responsible to delete source account integration has been experiencing periods of higher latency than normal (1600ms)%\n${alarmDescriptionTemplate}\ndeleteIntegrationLogGroupURL: ${logGroupURL}\nPlaybook: ${playbookURL}\n",
            {
              "alarmDescriptionTemplate": {
                "Fn::Sub": [
                  "Service: ${service}\nStage: ${stage}\nRegion: ${AWS::Region}\nCloudWatch Dashboard: ${dashboardURL}\n",
                  {
                    "service": "service-source-accounts",
                    "stage": "local",
                    "dashboardURL": {
                      "Fn::Join": [
                        "",
                        [
                          "https://console.aws.amazon.com/cloudwatch/home?region=",
                          {
                            "Ref": "AWS::Region"
                          },
                          "#dashboards:name=",
                          {
                            "Ref": "mainCloudwatchDashboard"
                          }
                        ]
                      ]
                    }
                  }
                ]
              },
              "logGroupURL": {
                "Fn::Join": [
                  "",
                  [
                    {
                      "Fn::Sub": "https://console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#logsV2:log-groups/log-group/$252Faws$252Flambda$252F"
                    },
                    "service-source-accounts-local-deleteIntegration"
                  ]
                ]
              },
              "playbookURL": "https://dsgithub.trendmicro.com/pages/cloud-one-common/cloud-one-common.github.io/Reference/playbooks/templates/missed-latency-slo/"
            }
          ]
        },
        "Dimensions": [
          {
            "Name": "ApiName",
            "Value": "local-service-source-accounts"
          },
          {
            "Name": "Resource",
            "Value": "/api/integrations/{integrationID}"
          },
          {
            "Name": "Stage",
            "Value": "local"
          },
          {
            "Name": "Method",
            "Value": "DELETE"
          }
        ],
        "MetricName": "Latency",
        "Namespace": "AWS/ApiGateway",
        "ComparisonOperator": "GreaterThanThreshold",
        "DatapointsToAlarm": 4,
        "EvaluationPeriods": 5,
        "Period": 60,
        "ExtendedStatistic": "p99",
        "Threshold": 1600,
        "TreatMissingData": "ignore"
      }
    },
    "CreateAuthorizationsLatency": {
      "DependsOn": [
        "alarmsSNSTopic"
      ],
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmName": "c1c-local-us-east-2-service-source-accounts-CreateAuthorizationsLatency-p3",
        "AlarmActions": [
          {
            "Ref": "alarmsSNSTopic"
          }
        ],
        "OKActions": [
          {
            "Ref": "alarmsSNSTopic"
          }
        ],
        "ActionsEnabled": false,
        "AlarmDescription": {
          "Fn::Sub": [
            "The endpoint (POST /authorizations) responsible for creating provider authToken has been experiencing periods of higher latency than normal (2100ms)%\n${alarmDescriptionTemplate}\ncreateProviderAuthLogGroupURL: ${logGroupURL}\nPlaybook: ${playbookURL}\n",
            {
              "alarmDescriptionTemplate": {
                "Fn::Sub": [
                  "Service: ${service}\nStage: ${stage}\nRegion: ${AWS::Region}\nCloudWatch Dashboard: ${dashboardURL}\n",
                  {
                    "service": "service-source-accounts",
                    "stage": "local",
                    "dashboardURL": {
                      "Fn::Join": [
                        "",
                        [
                          "https://console.aws.amazon.com/cloudwatch/home?region=",
                          {
                            "Ref": "AWS::Region"
                          },
                          "#dashboards:name=",
                          {
                            "Ref": "mainCloudwatchDashboard"
                          }
                        ]
                      ]
                    }
                  }
                ]
              },
              "logGroupURL": {
                "Fn::Join": [
                  "",
                  [
                    {
                      "Fn::Sub": "https://console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#logsV2:log-groups/log-group/$252Faws$252Flambda$252F"
                    },
                    "service-source-accounts-local-createProviderAuth"
                  ]
                ]
              },
              "playbookURL": "https://dsgithub.trendmicro.com/pages/cloud-one-common/cloud-one-common.github.io/Reference/playbooks/templates/missed-latency-slo/"
            }
          ]
        },
        "Dimensions": [
          {
            "Name": "ApiName",
            "Value": "local-service-source-accounts"
          },
          {
            "Name": "Resource",
            "Value": "/api/authorizations"
          },
          {
            "Name": "Stage",
            "Value": "local"
          },
          {
            "Name": "Method",
            "Value": "POST"
          }
        ],
        "MetricName": "Latency",
        "Namespace": "AWS/ApiGateway",
        "ComparisonOperator": "GreaterThanThreshold",
        "DatapointsToAlarm": 4,
        "EvaluationPeriods": 5,
        "Period": 60,
        "ExtendedStatistic": "p99",
        "Threshold": 2100,
        "TreatMissingData": "ignore"
      }
    },
    "AuditEventDropped": {
      "DependsOn": [
        "alarmsSNSTopic"
      ],
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmName": "c1c-local-us-east-2-service-source-accounts-AuditEventDropped-p3",
        "AlarmActions": [
          {
            "Ref": "alarmsSNSTopic"
          }
        ],
        "OKActions": [
          {
            "Ref": "alarmsSNSTopic"
          }
        ],
        "ActionsEnabled": false,
        "AlarmDescription": {
          "Fn::Sub": [
            "This alarm is low urgency. The audit event publisher has dropped single audit event\n\nLook in the githubWebhook Log Group for the dropped event,\nthen follow the linked runbook to put the dropped event on event bus / sqs.\n${alarmDescriptionTemplate}\ngithubWebhookLogGroupURL: ${logGroupURL}\nRunbook: ${runbookURL}\n",
            {
              "alarmDescriptionTemplate": {
                "Fn::Sub": [
                  "Service: ${service}\nStage: ${stage}\nRegion: ${AWS::Region}\nCloudWatch Dashboard: ${dashboardURL}\n",
                  {
                    "service": "service-source-accounts",
                    "stage": "local",
                    "dashboardURL": {
                      "Fn::Join": [
                        "",
                        [
                          "https://console.aws.amazon.com/cloudwatch/home?region=",
                          {
                            "Ref": "AWS::Region"
                          },
                          "#dashboards:name=",
                          {
                            "Ref": "mainCloudwatchDashboard"
                          }
                        ]
                      ]
                    }
                  }
                ]
              },
              "logGroupURL": {
                "Fn::Join": [
                  "",
                  [
                    {
                      "Fn::Sub": "https://console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#logsV2:log-groups/log-group/$252Faws$252Flambda$252F"
                    },
                    "service-source-accounts-local-githubWebhook"
                  ]
                ]
              },
              "runbookURL": "https://dsgithub.trendmicro.com/pages/cloud-one-common/cloud-one-common.github.io/Reference/runbooks/resend-dropped-events/"
            }
          ]
        },
        "Metrics": [
          {
            "Id": "singleAuditEventDropped",
            "Label": "Single Audit Event Dropped",
            "ReturnData": true,
            "Expression": "createIntAuditFailure + modifyIntAuditFailure + deleteIntAuditFailure"
          },
          {
            "Id": "createIntAuditFailure",
            "ReturnData": false,
            "MetricStat": {
              "Metric": {
                "Namespace": "SourceAccounts",
                "MetricName": "FailedPublishingAuditEvent",
                "Dimensions": [
                  {
                    "Name": "ServiceName",
                    "Value": "service-source-accounts-local-createGitHubInt"
                  },
                  {
                    "Name": "ServiceType",
                    "Value": "AWS::Lambda::Function"
                  },
                  {
                    "Name": "Service",
                    "Value": "source-accounts"
                  },
                  {
                    "Name": "EventType",
                    "Value": "added"
                  },
                  {
                    "Name": "LogGroup",
                    "Value": "service-source-accounts-local-createGitHubInt"
                  }
                ]
              },
              "Period": 60,
              "Stat": "Sum"
            }
          },
          {
            "Id": "modifyIntAuditFailure",
            "ReturnData": false,
            "MetricStat": {
              "Metric": {
                "Namespace": "SourceAccounts",
                "MetricName": "FailedPublishingAuditEvent",
                "Dimensions": [
                  {
                    "Name": "ServiceName",
                    "Value": "service-source-accounts-local-modifyIntegration"
                  },
                  {
                    "Name": "ServiceType",
                    "Value": "AWS::Lambda::Function"
                  },
                  {
                    "Name": "Service",
                    "Value": "source-accounts"
                  },
                  {
                    "Name": "EventType",
                    "Value": "modified"
                  },
                  {
                    "Name": "LogGroup",
                    "Value": "service-source-accounts-local-modifyIntegration"
                  }
                ]
              },
              "Period": 60,
              "Stat": "Sum"
            }
          },
          {
            "Id": "deleteIntAuditFailure",
            "ReturnData": false,
            "MetricStat": {
              "Metric": {
                "Namespace": "SourceAccounts",
                "MetricName": "FailedPublishingAuditEvent",
                "Dimensions": [
                  {
                    "Name": "ServiceName",
                    "Value": "service-source-accounts-local-deleteIntegration"
                  },
                  {
                    "Name": "ServiceType",
                    "Value": "AWS::Lambda::Function"
                  },
                  {
                    "Name": "Service",
                    "Value": "source-accounts"
                  },
                  {
                    "Name": "EventType",
                    "Value": "removed"
                  },
                  {
                    "Name": "LogGroup",
                    "Value": "service-source-accounts-local-deleteIntegration"
                  }
                ]
              },
              "Period": 60,
              "Stat": "Sum"
            }
          }
        ],
        "ComparisonOperator": "GreaterThanThreshold",
        "EvaluationPeriods": 1,
        "DatapointsToAlarm": 1,
        "Threshold": 0,
        "TreatMissingData": "ignore"
      }
    },
    "InternalEventsDLQSingleVisibleMessage": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmName": "c1c-local-us-east-2-service-source-accounts-InternalEventsDLQSingleVisibleMessage-p3",
        "AlarmActions": [
          {
            "Ref": "alarmsSNSTopic"
          }
        ],
        "OKActions": [
          {
            "Ref": "alarmsSNSTopic"
          }
        ],
        "ActionsEnabled": false,
        "AlarmDescription": {
          "Fn::Sub": [
            "This alarm is low urgency. Single internal event such as suspend, unsuspend or deletion are noticed in DLQ as lambda\nfailed to process it.\n${alarmDescriptionTemplate}\nQueue Name: ${queueName}\ninternalEventsListener LogGroupURL: ${logGroupURL}\nRunbook: ${runbookURL}\n",
            {
              "alarmDescriptionTemplate": {
                "Fn::Sub": [
                  "Service: ${service}\nStage: ${stage}\nRegion: ${AWS::Region}\nCloudWatch Dashboard: ${dashboardURL}\n",
                  {
                    "service": "service-source-accounts",
                    "stage": "local",
                    "dashboardURL": {
                      "Fn::Join": [
                        "",
                        [
                          "https://console.aws.amazon.com/cloudwatch/home?region=",
                          {
                            "Ref": "AWS::Region"
                          },
                          "#dashboards:name=",
                          {
                            "Ref": "mainCloudwatchDashboard"
                          }
                        ]
                      ]
                    }
                  }
                ]
              },
              "logGroupURL": {
                "Fn::Join": [
                  "",
                  [
                    {
                      "Fn::Sub": "https://console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#logsV2:log-groups/log-group/$252Faws$252Flambda$252F"
                    },
                    "service-source-accounts-local-internalEventsListener"
                  ]
                ]
              },
              "queueName": {
                "Fn::GetAtt": [
                  "internalEventsDLQ",
                  "QueueName"
                ]
              },
              "runbookURL": "https://dsgithub.trendmicro.com/pages/cloud-one-common/cloud-one-common.github.io/Reference/external-integrations/service-source-accounts/docs/playbooks/InternalEventsDLQNumberOfMessagesVisible/"
            }
          ]
        },
        "Dimensions": [
          {
            "Name": "QueueName",
            "Value": {
              "Fn::GetAtt": [
                "internalEventsDLQ",
                "QueueName"
              ]
            }
          }
        ],
        "Namespace": "AWS/SQS",
        "MetricName": "ApproximateNumberOfMessagesVisible",
        "ComparisonOperator": "GreaterThanThreshold",
        "Threshold": 0,
        "EvaluationPeriods": 1,
        "Period": 60,
        "Statistic": "Maximum",
        "TreatMissingData": "notBreaching"
      }
    },
    "C1AccLifecycleEventsDLQSingleMessage": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmName": "c1c-local-us-east-2-service-source-accounts-C1AccLifecycleEventsDLQSingleMessage-p3",
        "AlarmActions": [
          {
            "Ref": "alarmsSNSTopic"
          }
        ],
        "OKActions": [
          {
            "Ref": "alarmsSNSTopic"
          }
        ],
        "ActionsEnabled": false,
        "AlarmDescription": {
          "Fn::Sub": [
            "This alarm is low urgency. Lambda failed to process a single or batch of Cloud One account lifecycle events and they have been forwarded to the DLQ.\n${alarmDescriptionTemplate}\nQueue Name: ${queueName}\nc1AccEventsListener LogGroupURL: ${logGroupURL}\nRunbook: ${runbookURL}\n",
            {
              "alarmDescriptionTemplate": {
                "Fn::Sub": [
                  "Service: ${service}\nStage: ${stage}\nRegion: ${AWS::Region}\nCloudWatch Dashboard: ${dashboardURL}\n",
                  {
                    "service": "service-source-accounts",
                    "stage": "local",
                    "dashboardURL": {
                      "Fn::Join": [
                        "",
                        [
                          "https://console.aws.amazon.com/cloudwatch/home?region=",
                          {
                            "Ref": "AWS::Region"
                          },
                          "#dashboards:name=",
                          {
                            "Ref": "mainCloudwatchDashboard"
                          }
                        ]
                      ]
                    }
                  }
                ]
              },
              "logGroupURL": {
                "Fn::Join": [
                  "",
                  [
                    {
                      "Fn::Sub": "https://console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#logsV2:log-groups/log-group/$252Faws$252Flambda$252F"
                    },
                    "service-source-accounts-local-c1AccEventsListener"
                  ]
                ]
              },
              "queueName": {
                "Fn::GetAtt": [
                  "c1AccLifecycleEventsDLQ",
                  "QueueName"
                ]
              },
              "runbookURL": "https://dsgithub.trendmicro.com/pages/cloud-one-common/cloud-one-common.github.io/Reference/external-integrations/service-source-accounts/docs/playbooks/dlq_single_message/"
            }
          ]
        },
        "Dimensions": [
          {
            "Name": "QueueName",
            "Value": {
              "Fn::GetAtt": [
                "c1AccLifecycleEventsDLQ",
                "QueueName"
              ]
            }
          }
        ],
        "Namespace": "AWS/SQS",
        "MetricName": "ApproximateNumberOfMessagesVisible",
        "ComparisonOperator": "GreaterThanThreshold",
        "Threshold": 0,
        "EvaluationPeriods": 1,
        "Period": 60,
        "Statistic": "Maximum",
        "TreatMissingData": "notBreaching"
      }
    },
    "GithubWebhookLambdaSingleError": {
      "DependsOn": [
        "alarmsSNSTopic"
      ],
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmName": "c1c-local-us-east-2-service-source-accounts-GithubWebhookLambdaSingleError-p3",
        "AlarmActions": [
          {
            "Ref": "alarmsSNSTopic"
          }
        ],
        "OKActions": [
          {
            "Ref": "alarmsSNSTopic"
          }
        ],
        "ActionsEnabled": false,
        "AlarmDescription": {
          "Fn::Sub": [
            "This alarm is low urgency. The githubWebhook lambda has failed to process and publish event\n\nLook in the githubWebhook Log Group for the dropped event,\nthen follow the linked playbook to successfully process failed event.\n${alarmDescriptionTemplate}\ngithubWebhookLogGroupURL: ${logGroupURL}\nPlaybook: ${playbookURL}\n",
            {
              "alarmDescriptionTemplate": {
                "Fn::Sub": [
                  "Service: ${service}\nStage: ${stage}\nRegion: ${AWS::Region}\nCloudWatch Dashboard: ${dashboardURL}\n",
                  {
                    "service": "service-source-accounts",
                    "stage": "local",
                    "dashboardURL": {
                      "Fn::Join": [
                        "",
                        [
                          "https://console.aws.amazon.com/cloudwatch/home?region=",
                          {
                            "Ref": "AWS::Region"
                          },
                          "#dashboards:name=",
                          {
                            "Ref": "mainCloudwatchDashboard"
                          }
                        ]
                      ]
                    }
                  }
                ]
              },
              "logGroupURL": {
                "Fn::Join": [
                  "",
                  [
                    {
                      "Fn::Sub": "https://console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#logsV2:log-groups/log-group/$252Faws$252Flambda$252F"
                    },
                    "service-source-accounts-local-githubWebhook"
                  ]
                ]
              },
              "playbookURL": "https://dsgithub.trendmicro.com/pages/cloud-one-common/cloud-one-common.github.io/Reference/external-integrations/service-source-accounts/docs/playbooks/GithubWebhookLambdaSingleError/"
            }
          ]
        },
        "Namespace": "AWS/ApiGateway",
        "MetricName": "5XXError",
        "Dimensions": [
          {
            "Name": "ApiName",
            "Value": "local-service-source-accounts"
          },
          {
            "Name": "Resource",
            "Value": "/webhooks/github"
          },
          {
            "Name": "Stage",
            "Value": "local"
          },
          {
            "Name": "Method",
            "Value": "POST"
          }
        ],
        "Statistic": "Sum",
        "ComparisonOperator": "GreaterThanThreshold",
        "EvaluationPeriods": 1,
        "DatapointsToAlarm": 1,
        "Threshold": 0,
        "Period": 60,
        "TreatMissingData": "ignore"
      }
    },
    "PublishLifecycleEventLambdaSingleError": {
      "DependsOn": [
        "alarmsSNSTopic"
      ],
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmName": "c1c-local-us-east-2-service-source-accounts-PublishLifecycleEventLambdaSingleError-p3",
        "AlarmActions": [
          {
            "Ref": "alarmsSNSTopic"
          }
        ],
        "OKActions": [
          {
            "Ref": "alarmsSNSTopic"
          }
        ],
        "ActionsEnabled": false,
        "AlarmDescription": {
          "Fn::Sub": [
            "This alarm is low urgency. The publishLifecycleEvents lambda has failed to process and publish event\n\nLook in the publishLifecycleEvents Log Group for the error stack,\nthen follow the linked runbook to successfully process failed event.\n${alarmDescriptionTemplate}\npublishLifecycleEventsLogGroupURL: ${logGroupURL}\nRunbook: ${runbookURL}\n",
            {
              "alarmDescriptionTemplate": {
                "Fn::Sub": [
                  "Service: ${service}\nStage: ${stage}\nRegion: ${AWS::Region}\nCloudWatch Dashboard: ${dashboardURL}\n",
                  {
                    "service": "service-source-accounts",
                    "stage": "local",
                    "dashboardURL": {
                      "Fn::Join": [
                        "",
                        [
                          "https://console.aws.amazon.com/cloudwatch/home?region=",
                          {
                            "Ref": "AWS::Region"
                          },
                          "#dashboards:name=",
                          {
                            "Ref": "mainCloudwatchDashboard"
                          }
                        ]
                      ]
                    }
                  }
                ]
              },
              "logGroupURL": {
                "Fn::Join": [
                  "",
                  [
                    {
                      "Fn::Sub": "https://console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#logsV2:log-groups/log-group/$252Faws$252Flambda$252F"
                    },
                    "service-source-accounts-local-publishLifecycleEvents"
                  ]
                ]
              },
              "runbookURL": "https://dsgithub.trendmicro.com/pages/cloud-one-common/cloud-one-common.github.io/Reference/runbooks/resend-dropped-events/"
            }
          ]
        },
        "Namespace": "AWS/Lambda",
        "MetricName": "Errors",
        "Dimensions": [
          {
            "Name": "FunctionName",
            "Value": "service-source-accounts-local-publishLifecycleEvents"
          }
        ],
        "Statistic": "Sum",
        "ComparisonOperator": "GreaterThanThreshold",
        "EvaluationPeriods": 1,
        "DatapointsToAlarm": 1,
        "Threshold": 0,
        "Period": 60,
        "TreatMissingData": "ignore"
      }
    },
    "alarmsSNSTopic": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "TopicName": "service-source-accounts-local-alarmsSNSTopic",
        "KmsMasterKeyId": {
          "Fn::GetAtt": [
            "alarmsSnsKey",
            "Arn"
          ]
        },
        "Tags": [
          {
            "Key": "SERVICE",
            "Value": "service-source-accounts"
          },
          {
            "Key": "STAGE",
            "Value": "local"
          }
        ]
      }
    },
    "pagerdutyAlarmSNSSubscription": {
      "Type": "AWS::SNS::Subscription",
      "Properties": {
        "Endpoint": "https://events.pagerduty.com/integration/b2d52d3620424d07c05a8e0c0b6e3add/enqueue",
        "Protocol": "https",
        "RawMessageDelivery": false,
        "TopicArn": {
          "Ref": "alarmsSNSTopic"
        }
      }
    },
    "mainCloudwatchDashboard": {
      "Type": "AWS::CloudWatch::Dashboard",
      "Properties": {
        "DashboardName": "service-source-accounts-us-east-2-local-main",
        "DashboardBody": {
          "Fn::Sub": [
            "{\n\t\"widgets\": [\n\t\t{\n\t\t\t\"height\": 10,\n\t\t\t\"width\": 12,\n\t\t\t\"y\": 0,\n\t\t\t\"x\": 0,\n\t\t\t\"type\": \"text\",\n\t\t\t\"properties\": {\n\t\t\t\t\"markdown\": \"# Source Accounts Main Dashboard\\n\\nThis dashboard provides an overview of the health and performance of the Source Accounts service. For details on source account integrations specific endpoints refer to the chart below:\\n\\n| Type | Dashboard |\\n|-----------|--------------|\\n| Source Account Integration | [Link](https://us-east-2.console.aws.amazon.com/cloudwatch/home?region=us-east-2#dashboards:name=service-source-accounts-us-east-2-local-source-account-integration) |\\n\\n\\n&nbsp;\\n\\n## Dashboard Reference\\n__Alarm Status:__ This widget provides a summary of all the alarm states for this service, click alarms for more details.\\n\\n__SourceAccount Responses:__ Gives a breakdown of all the responses the the source accounts service API per CRUD endpoint.\\n\\n__Availability (SLI):__ Tracks the availability of a given endpoint with a SLO of 99% available, see integration dashboard for more on those endpoints.\\n\\n__Source Accounts Table:__ These metrics observe the health of the source accounts DynamoDB table, ensuring successfully reads and writes and that we are not approaching or exceeding read/write unit limits. The second table is somewhat flawed as we can't dynamically set the horizontal rules, [see here for more on read/write capacity](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.ReadWriteCapacityMode.html)\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"height\": 10,\n\t\t\t\"width\": 12,\n\t\t\t\"y\": 0,\n\t\t\t\"x\": 12,\n\t\t\t\"type\": \"alarm\",\n\t\t\t\"properties\": {\n\t\t\t\t\"title\": \"Alarm Status\",\n\t\t\t\t\"alarms\": [\n\t\t\t\t\t\"arn:aws:cloudwatch:us-east-2:431319421842:alarm:c1c-local-us-east-2-service-source-accounts-InternalEventsDLQNumberOfMessagesVisible-p3\",\n\t\t\t\t\t\"arn:aws:cloudwatch:us-east-2:431319421842:alarm:c1c-local-us-east-2-service-source-accounts-GithubWebhookLambdaErrors-p3\",\n\t\t\t\t\t\"arn:aws:cloudwatch:us-east-2:431319421842:alarm:c1c-local-us-east-2-service-source-accounts-PublishLifecycleEventsLambdaErrors-p3\",\n\t\t\t\t\t\"arn:aws:cloudwatch:us-east-2:431319421842:alarm:c1c-local-us-east-2-service-source-accounts-CreateAuthorizationsAvailability-p1\",\n\t\t\t\t\t\"arn:aws:cloudwatch:us-east-2:431319421842:alarm:c1c-local-us-east-2-service-source-accounts-ListIntegrationsInternalAvailability-p1\",\n\t\t\t\t\t\"arn:aws:cloudwatch:us-east-2:431319421842:alarm:c1c-local-us-east-2-service-source-accounts-CreateIntegrationAvailability-p1\",\n\t\t\t\t\t\"arn:aws:cloudwatch:us-east-2:431319421842:alarm:c1c-local-us-east-2-service-source-accounts-ModifyIntegrationAvailability-p1\",\n\t\t\t\t\t\"arn:aws:cloudwatch:us-east-2:431319421842:alarm:c1c-local-us-east-2-service-source-accounts-ListIntegrationsAvailability-p1\",\n\t\t\t\t\t\"arn:aws:cloudwatch:us-east-2:431319421842:alarm:c1c-local-us-east-2-service-source-accounts-DeleteIntegrationAvailability-p1\",\n\t\t\t\t\t\"arn:aws:cloudwatch:us-east-2:431319421842:alarm:c1c-local-us-east-2-service-source-accounts-CreateGithubIntegrationLatency-p3\",\n\t\t\t\t\t\"arn:aws:cloudwatch:us-east-2:431319421842:alarm:c1c-local-us-east-2-service-source-accounts-DeleteIntegrationLatency-p3\",\n\t\t\t\t\t\"arn:aws:cloudwatch:us-east-2:431319421842:alarm:c1c-local-us-east-2-service-source-accounts-ListIntegrationsInternalLatency-p3\",\n\t\t\t\t\t\"arn:aws:cloudwatch:us-east-2:431319421842:alarm:c1c-local-us-east-2-service-source-accounts-ListIntegrationsLatency-p3\",\n\t\t\t\t\t\"arn:aws:cloudwatch:us-east-2:431319421842:alarm:c1c-local-us-east-2-service-source-accounts-ModifyIntegrationLatency-p3\",\n\t\t\t\t\t\"arn:aws:cloudwatch:us-east-2:431319421842:alarm:c1c-local-us-east-2-service-source-accounts-CreateAuthorizationsLatency-p3\"\n\t\t\t\t]\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"height\": 6,\n\t\t\t\"width\": 6,\n\t\t\t\"y\": 10,\n\t\t\t\"x\": 0,\n\t\t\t\"type\": \"metric\",\n\t\t\t\"properties\": {\n\t\t\t\t\"metrics\": [\n\t\t\t\t\t[\"AWS/Lambda\", \"Invocations\", \"FunctionName\", \"service-source-accounts-local-createGitHubInt\"],\n\t\t\t\t\t[\"...\", \"service-source-accounts-local-createProviderAuth\"],\n\t\t\t\t\t[\"...\", \"service-source-accounts-local-deleteIntegration\"],\n\t\t\t\t\t[\"...\", \"service-source-accounts-local-getIntegration\"],\n\t\t\t\t\t[\"...\", \"service-source-accounts-local-listIntegrationsIntl\"],\n\t\t\t\t\t[\"...\", \"service-source-accounts-local-modifyIntegration\"],\n\t\t\t\t\t[\"...\", \"service-source-accounts-local-publishLifecycleEvents\"],\n\t\t\t\t\t[\"...\", \"service-source-accounts-local-githubWebhook\"],\n\t\t\t\t\t[\"...\", \"service-source-accounts-local-internalEventsListener\"],\n\t\t\t\t\t[\".\", \"Errors\", \".\", \"service-source-accounts-local-createGitHubInt\"],\n\t\t\t\t\t[\"...\", \"service-source-accounts-local-createProviderAuth\"],\n\t\t\t\t\t[\"...\", \"service-source-accounts-local-deleteIntegration\"],\n\t\t\t\t\t[\"...\", \"service-source-accounts-local-getIntegration\"],\n\t\t\t\t\t[\"...\", \"service-source-accounts-local-listIntegrationsIntl\"],\n\t\t\t\t\t[\"...\", \"service-source-accounts-local-modifyIntegration\"],\n\t\t\t\t\t[\"...\", \"service-source-accounts-local-publishLifecycleEvents\"],\n\t\t\t\t\t[\"...\", \"service-source-accounts-local-githubWebhook\"],\n\t\t\t\t\t[\"...\", \"service-source-accounts-local-internalEventsListener\"]\n\t\t\t\t],\n\t\t\t\t\"view\": \"timeSeries\",\n\t\t\t\t\"stacked\": false,\n\t\t\t\t\"region\": \"us-east-2\",\n\t\t\t\t\"stat\": \"Sum\",\n\t\t\t\t\"period\": 300,\n\t\t\t\t\"title\": \"Lambda Invocations and Errors\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"height\": 6,\n\t\t\t\"width\": 6,\n\t\t\t\"y\": 10,\n\t\t\t\"x\": 6,\n\t\t\t\"type\": \"metric\",\n\t\t\t\"properties\": {\n\t\t\t\t\"metrics\": [\n\t\t\t\t\t[\"AWS/Lambda\", \"Duration\", \"FunctionName\", \"service-source-accounts-local-createGitHubInt\"],\n\t\t\t\t\t[\"...\", \"service-source-accounts-local-createProviderAuth\"],\n\t\t\t\t\t[\"...\", \"service-source-accounts-local-deleteIntegration\"],\n\t\t\t\t\t[\"...\", \"service-source-accounts-local-getIntegration\"],\n\t\t\t\t\t[\"...\", \"service-source-accounts-local-githubWebhook\"],\n\t\t\t\t\t[\"...\", \"service-source-accounts-local-internalEventsListener\"],\n\t\t\t\t\t[\"...\", \"service-source-accounts-local-listIntegrations\"],\n\t\t\t\t\t[\"...\", \"service-source-accounts-local-listIntegrationsIntl\"],\n\t\t\t\t\t[\".\", \"Invocations\", \".\", \"service-source-accounts-local-modifyIntegration\"],\n\t\t\t\t\t[\".\", \"Duration\", \".\", \"service-source-accounts-local-publishLifecycleEvents\"],\n\t\t\t\t\t[\"...\", \"service-source-accounts-local-publishLifecycleTest\"]\n\t\t\t\t],\n\t\t\t\t\"view\": \"timeSeries\",\n\t\t\t\t\"stacked\": false,\n\t\t\t\t\"region\": \"us-east-2\",\n\t\t\t\t\"stat\": \"p99.9\",\n\t\t\t\t\"period\": 300,\n\t\t\t\t\"title\": \"P99.9 Lambda Durations\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"height\": 6,\n\t\t\t\"width\": 12,\n\t\t\t\"y\": 10,\n\t\t\t\"x\": 12,\n\t\t\t\"type\": \"metric\",\n\t\t\t\"properties\": {\n\t\t\t\t\"metrics\": [\n\t\t\t\t\t[\n\t\t\t\t\t\t\"AWS/ApiGateway\",\n\t\t\t\t\t\t\"5XXError\",\n\t\t\t\t\t\t\"ApiName\",\n\t\t\t\t\t\t\"local-service-source-accounts\",\n\t\t\t\t\t\t\"Resource\",\n\t\t\t\t\t\t\"/api/integrations/github\",\n\t\t\t\t\t\t\"Stage\",\n\t\t\t\t\t\t\"local\",\n\t\t\t\t\t\t\"Method\",\n\t\t\t\t\t\t\"POST\",\n\t\t\t\t\t\t{ \"label\": \"Create Github Integration 5XX Error\", \"id\": \"createIntegration500\" }\n\t\t\t\t\t],\n\t\t\t\t\t[\n\t\t\t\t\t\t\".\",\n\t\t\t\t\t\t\"4XXError\",\n\t\t\t\t\t\t\".\",\n\t\t\t\t\t\t\".\",\n\t\t\t\t\t\t\".\",\n\t\t\t\t\t\t\".\",\n\t\t\t\t\t\t\".\",\n\t\t\t\t\t\t\".\",\n\t\t\t\t\t\t\".\",\n\t\t\t\t\t\t\".\",\n\t\t\t\t\t\t{ \"label\": \"Create Github Integration 4XX Error\", \"id\": \"createIntegration400\" }\n\t\t\t\t\t],\n\t\t\t\t\t[\n\t\t\t\t\t\t\".\",\n\t\t\t\t\t\t\"Count\",\n\t\t\t\t\t\t\".\",\n\t\t\t\t\t\t\".\",\n\t\t\t\t\t\t\".\",\n\t\t\t\t\t\t\".\",\n\t\t\t\t\t\t\".\",\n\t\t\t\t\t\t\".\",\n\t\t\t\t\t\t\".\",\n\t\t\t\t\t\t\".\",\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"label\": \"POST /api/integrations/github\",\n\t\t\t\t\t\t\t\"visible\": false,\n\t\t\t\t\t\t\t\"id\": \"createIntegrationTotal\"\n\t\t\t\t\t\t}\n\t\t\t\t\t],\n\t\t\t\t\t[\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"expression\": \"createIntegrationTotal-(createIntegration500+createIntegration400)\",\n\t\t\t\t\t\t\t\"label\": \"Create Github Integration 2XX Response\",\n\t\t\t\t\t\t\t\"id\": \"createIntegration200\",\n\t\t\t\t\t\t\t\"region\": \"us-east-2\"\n\t\t\t\t\t\t}\n\t\t\t\t\t],\n\t\t\t\t\t[\n\t\t\t\t\t\t\"AWS/ApiGateway\",\n\t\t\t\t\t\t\"5XXError\",\n\t\t\t\t\t\t\"ApiName\",\n\t\t\t\t\t\t\"alpha-service-source-accounts\",\n\t\t\t\t\t\t\"Resource\",\n\t\t\t\t\t\t\"/api/integrations/{integrationID}\",\n\t\t\t\t\t\t\"Stage\",\n\t\t\t\t\t\t\"alpha\",\n\t\t\t\t\t\t\"Method\",\n\t\t\t\t\t\t\"DELETE\",\n\t\t\t\t\t\t{ \"id\": \"deleteIntegration500\", \"label\": \"Delete Integration 5XX Error\" }\n\t\t\t\t\t],\n\t\t\t\t\t[\n\t\t\t\t\t\t\".\",\n\t\t\t\t\t\t\"4XXError\",\n\t\t\t\t\t\t\".\",\n\t\t\t\t\t\t\".\",\n\t\t\t\t\t\t\".\",\n\t\t\t\t\t\t\".\",\n\t\t\t\t\t\t\".\",\n\t\t\t\t\t\t\".\",\n\t\t\t\t\t\t\".\",\n\t\t\t\t\t\t\".\",\n\t\t\t\t\t\t{ \"id\": \"deleteIntegration400\", \"label\": \"Delete Integration 4XX Error\" }\n\t\t\t\t\t],\n\t\t\t\t\t[\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"expression\": \"deleteIntegrationTotal-(deleteIntegration500+deleteIntegration400)\",\n\t\t\t\t\t\t\t\"label\": \"Delete Integration 2XX Response\",\n\t\t\t\t\t\t\t\"id\": \"deleteIntegration200\",\n\t\t\t\t\t\t\t\"region\": \"us-east-2\"\n\t\t\t\t\t\t}\n\t\t\t\t\t],\n\t\t\t\t\t[\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"expression\": \"modifyIntegrationTotal-(modifyIntegration500+modifyIntegration400)\",\n\t\t\t\t\t\t\t\"label\": \"Modify Integration 2XX Response\",\n\t\t\t\t\t\t\t\"id\": \"modifyIntegration200\",\n\t\t\t\t\t\t\t\"region\": \"us-east-2\"\n\t\t\t\t\t\t}\n\t\t\t\t\t],\n\t\t\t\t\t[\n\t\t\t\t\t\t\"AWS/ApiGateway\",\n\t\t\t\t\t\t\"Count\",\n\t\t\t\t\t\t\"ApiName\",\n\t\t\t\t\t\t\"alpha-service-source-accounts\",\n\t\t\t\t\t\t\"Resource\",\n\t\t\t\t\t\t\"/api/integrations/{integrationID}\",\n\t\t\t\t\t\t\"Stage\",\n\t\t\t\t\t\t\"alpha\",\n\t\t\t\t\t\t\"Method\",\n\t\t\t\t\t\t\"DELETE\",\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"deleteIntegrationTotal\",\n\t\t\t\t\t\t\t\"label\": \"DELETE /api/integrations/{integrationID}\",\n\t\t\t\t\t\t\t\"visible\": false\n\t\t\t\t\t\t}\n\t\t\t\t\t],\n\t\t\t\t\t[\n\t\t\t\t\t\t\".\",\n\t\t\t\t\t\t\"5XXError\",\n\t\t\t\t\t\t\".\",\n\t\t\t\t\t\t\"local-service-source-accounts\",\n\t\t\t\t\t\t\".\",\n\t\t\t\t\t\t\".\",\n\t\t\t\t\t\t\".\",\n\t\t\t\t\t\t\"local\",\n\t\t\t\t\t\t\".\",\n\t\t\t\t\t\t\"POST\",\n\t\t\t\t\t\t{ \"id\": \"modifyIntegration500\", \"label\": \"Modify Integration 5XX Error\" }\n\t\t\t\t\t],\n\t\t\t\t\t[\n\t\t\t\t\t\t\".\",\n\t\t\t\t\t\t\"4XXError\",\n\t\t\t\t\t\t\".\",\n\t\t\t\t\t\t\".\",\n\t\t\t\t\t\t\".\",\n\t\t\t\t\t\t\".\",\n\t\t\t\t\t\t\".\",\n\t\t\t\t\t\t\".\",\n\t\t\t\t\t\t\".\",\n\t\t\t\t\t\t\".\",\n\t\t\t\t\t\t{ \"id\": \"modifyIntegration400\", \"label\": \"Modify Integration 4XX Error\" }\n\t\t\t\t\t],\n\t\t\t\t\t[\n\t\t\t\t\t\t\".\",\n\t\t\t\t\t\t\"Count\",\n\t\t\t\t\t\t\".\",\n\t\t\t\t\t\t\".\",\n\t\t\t\t\t\t\".\",\n\t\t\t\t\t\t\".\",\n\t\t\t\t\t\t\".\",\n\t\t\t\t\t\t\".\",\n\t\t\t\t\t\t\".\",\n\t\t\t\t\t\t\".\",\n\t\t\t\t\t\t{ \"id\": \"modifyIntegrationTotal\", \"label\": \"POST /api/integrations/{integrationID}\" }\n\t\t\t\t\t]\n\t\t\t\t],\n\t\t\t\t\"view\": \"timeSeries\",\n\t\t\t\t\"stacked\": false,\n\t\t\t\t\"title\": \"SourceAccount Responses - Create, Modify and Delete\",\n\t\t\t\t\"region\": \"us-east-2\",\n\t\t\t\t\"stat\": \"Sum\",\n\t\t\t\t\"period\": 300,\n\t\t\t\t\"liveData\": true,\n\t\t\t\t\"yAxis\": {\n\t\t\t\t\t\"left\": {\n\t\t\t\t\t\t\"showUnits\": true\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"height\": 6,\n\t\t\t\"width\": 12,\n\t\t\t\"y\": 16,\n\t\t\t\"x\": 0,\n\t\t\t\"type\": \"metric\",\n\t\t\t\"properties\": {\n\t\t\t\t\"metrics\": [\n\t\t\t\t\t[\n\t\t\t\t\t\t\"AWS/ApiGateway\",\n\t\t\t\t\t\t\"5XXError\",\n\t\t\t\t\t\t\"ApiName\",\n\t\t\t\t\t\t\"local-service-source-accounts\",\n\t\t\t\t\t\t\"Resource\",\n\t\t\t\t\t\t\"/api/integrations\",\n\t\t\t\t\t\t\"Stage\",\n\t\t\t\t\t\t\"local\",\n\t\t\t\t\t\t\"Method\",\n\t\t\t\t\t\t\"GET\",\n\t\t\t\t\t\t{ \"id\": \"listIntegrations500\", \"label\": \"List Integrations 5XX Error\" }\n\t\t\t\t\t],\n\t\t\t\t\t[\n\t\t\t\t\t\t\".\",\n\t\t\t\t\t\t\"4XXError\",\n\t\t\t\t\t\t\".\",\n\t\t\t\t\t\t\".\",\n\t\t\t\t\t\t\".\",\n\t\t\t\t\t\t\".\",\n\t\t\t\t\t\t\".\",\n\t\t\t\t\t\t\".\",\n\t\t\t\t\t\t\".\",\n\t\t\t\t\t\t\".\",\n\t\t\t\t\t\t{ \"id\": \"listIntegrations400\", \"label\": \"List Integrations 4XX Error\" }\n\t\t\t\t\t],\n\t\t\t\t\t[\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"expression\": \"listIntegrationsTotal-(listIntegrations500+listIntegrations400)\",\n\t\t\t\t\t\t\t\"label\": \"List Integrations 2XX Response\",\n\t\t\t\t\t\t\t\"id\": \"listIntegrations200\",\n\t\t\t\t\t\t\t\"region\": \"us-east-2\"\n\t\t\t\t\t\t}\n\t\t\t\t\t],\n\t\t\t\t\t[\n\t\t\t\t\t\t\"AWS/ApiGateway\",\n\t\t\t\t\t\t\"Count\",\n\t\t\t\t\t\t\"ApiName\",\n\t\t\t\t\t\t\"local-service-source-accounts\",\n\t\t\t\t\t\t\"Resource\",\n\t\t\t\t\t\t\"/api/integrations\",\n\t\t\t\t\t\t\"Stage\",\n\t\t\t\t\t\t\"local\",\n\t\t\t\t\t\t\"Method\",\n\t\t\t\t\t\t\"GET\",\n\t\t\t\t\t\t{ \"id\": \"listIntegrationsTotal\", \"label\": \"GET /api/integrations\", \"visible\": false }\n\t\t\t\t\t]\n\t\t\t\t],\n\t\t\t\t\"view\": \"timeSeries\",\n\t\t\t\t\"stacked\": false,\n\t\t\t\t\"title\": \"SourceAccount Responses - List\",\n\t\t\t\t\"region\": \"us-east-2\",\n\t\t\t\t\"stat\": \"Sum\",\n\t\t\t\t\"period\": 300,\n\t\t\t\t\"liveData\": true,\n\t\t\t\t\"yAxis\": {\n\t\t\t\t\t\"left\": {\n\t\t\t\t\t\t\"showUnits\": true\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"height\": 6,\n\t\t\t\"width\": 12,\n\t\t\t\"y\": 16,\n\t\t\t\"x\": 12,\n\t\t\t\"type\": \"metric\",\n\t\t\t\"properties\": {\n\t\t\t\t\"metrics\": [\n\t\t\t\t\t[\n\t\t\t\t\t\t\"AWS/ApiGateway\",\n\t\t\t\t\t\t\"5XXError\",\n\t\t\t\t\t\t\"ApiName\",\n\t\t\t\t\t\t\"local-service-source-accounts\",\n\t\t\t\t\t\t\"Resource\",\n\t\t\t\t\t\t\"/api/authorizations\",\n\t\t\t\t\t\t\"Stage\",\n\t\t\t\t\t\t\"local\",\n\t\t\t\t\t\t\"Method\",\n\t\t\t\t\t\t\"POST\",\n\t\t\t\t\t\t{ \"id\": \"createAuthorizations500\", \"label\": \"Create Authorization Token 5XX Error\" }\n\t\t\t\t\t],\n\t\t\t\t\t[\n\t\t\t\t\t\t\".\",\n\t\t\t\t\t\t\"4XXError\",\n\t\t\t\t\t\t\".\",\n\t\t\t\t\t\t\".\",\n\t\t\t\t\t\t\".\",\n\t\t\t\t\t\t\".\",\n\t\t\t\t\t\t\".\",\n\t\t\t\t\t\t\".\",\n\t\t\t\t\t\t\".\",\n\t\t\t\t\t\t\".\",\n\t\t\t\t\t\t{ \"id\": \"createAuthorizations400\", \"label\": \"Create Authorization Token 4XX Error\" }\n\t\t\t\t\t],\n\t\t\t\t\t[\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"expression\": \"createAuthorizationsTotal-(createAuthorizations500+createAuthorizations400)\",\n\t\t\t\t\t\t\t\"label\": \"Create Authorizations 2XX Response\",\n\t\t\t\t\t\t\t\"id\": \"createAuthorizations200\",\n\t\t\t\t\t\t\t\"region\": \"us-east-2\"\n\t\t\t\t\t\t}\n\t\t\t\t\t],\n\t\t\t\t\t[\n\t\t\t\t\t\t\"AWS/ApiGateway\",\n\t\t\t\t\t\t\"Count\",\n\t\t\t\t\t\t\"ApiName\",\n\t\t\t\t\t\t\"local-service-source-accounts\",\n\t\t\t\t\t\t\"Resource\",\n\t\t\t\t\t\t\"/api/authorizations\",\n\t\t\t\t\t\t\"Stage\",\n\t\t\t\t\t\t\"local\",\n\t\t\t\t\t\t\"Method\",\n\t\t\t\t\t\t\"POST\",\n\t\t\t\t\t\t{ \"id\": \"createAuthorizationsTotal\", \"label\": \"POST /authorizations\", \"visible\": false }\n\t\t\t\t\t]\n\t\t\t\t],\n\t\t\t\t\"view\": \"timeSeries\",\n\t\t\t\t\"stacked\": false,\n\t\t\t\t\"title\": \"Create Authorizations Response\",\n\t\t\t\t\"region\": \"us-east-2\",\n\t\t\t\t\"stat\": \"Sum\",\n\t\t\t\t\"period\": 300,\n\t\t\t\t\"liveData\": true,\n\t\t\t\t\"yAxis\": {\n\t\t\t\t\t\"left\": {\n\t\t\t\t\t\t\"showUnits\": true\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"height\": 6,\n\t\t\t\"width\": 6,\n\t\t\t\"y\": 22,\n\t\t\t\"x\": 0,\n\t\t\t\"type\": \"metric\",\n\t\t\t\"properties\": {\n\t\t\t\t\"metrics\": [\n\t\t\t\t\t[\n\t\t\t\t\t\t\"AWS/WAFV2\",\n\t\t\t\t\t\t\"AllowedRequests\",\n\t\t\t\t\t\t\"WebACL\",\n\t\t\t\t\t\t\"service-source-accounts-local-WebACL\",\n\t\t\t\t\t\t\"Region\",\n\t\t\t\t\t\t\"us-east-2\",\n\t\t\t\t\t\t\"Rule\",\n\t\t\t\t\t\t\"ALL\",\n\t\t\t\t\t\t{ \"label\": \"All AllowedRequests\" }\n\t\t\t\t\t],\n\t\t\t\t\t[\n\t\t\t\t\t\t\".\",\n\t\t\t\t\t\t\"BlockedRequests\",\n\t\t\t\t\t\t\".\",\n\t\t\t\t\t\t\"service-source-accounts-alpha-WebACL\",\n\t\t\t\t\t\t\".\",\n\t\t\t\t\t\t\".\",\n\t\t\t\t\t\t\".\",\n\t\t\t\t\t\t\".\",\n\t\t\t\t\t\t{ \"label\": \"All BlockedRequests\" }\n\t\t\t\t\t]\n\t\t\t\t],\n\t\t\t\t\"view\": \"timeSeries\",\n\t\t\t\t\"stacked\": false,\n\t\t\t\t\"region\": \"us-east-2\",\n\t\t\t\t\"stat\": \"Sum\",\n\t\t\t\t\"period\": 300,\n\t\t\t\t\"title\": \"WAF Requests\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"height\": 6,\n\t\t\t\"width\": 6,\n\t\t\t\"y\": 22,\n\t\t\t\"x\": 12,\n\t\t\t\"type\": \"metric\",\n\t\t\t\"properties\": {\n\t\t\t\t\"metrics\": [\n\t\t\t\t\t[\n\t\t\t\t\t\t\"AWS/DynamoDB\",\n\t\t\t\t\t\t\"SystemErrors\",\n\t\t\t\t\t\t\"TableName\",\n\t\t\t\t\t\t\"${tableName}\",\n\t\t\t\t\t\t\"Operation\",\n\t\t\t\t\t\t\"GetItem\",\n\t\t\t\t\t\t{ \"color\": \"#0073BB\", \"label\": \"Get Item Errors\" }\n\t\t\t\t\t],\n\t\t\t\t\t[\"...\", \"PutItem\", { \"color\": \"#9468BD\", \"label\": \"Put Item Errors\" }]\n\t\t\t\t],\n\t\t\t\t\"title\": \"Source Accounts Table - System Errors\",\n\t\t\t\t\"view\": \"timeSeries\",\n\t\t\t\t\"stacked\": false,\n\t\t\t\t\"region\": \"us-east-2\",\n\t\t\t\t\"stat\": \"Sum\",\n\t\t\t\t\"period\": 60,\n\t\t\t\t\"yAxis\": {\n\t\t\t\t\t\"left\": {\n\t\t\t\t\t\t\"showUnits\": false\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"start\": \"-PT3H\",\n\t\t\t\t\"end\": \"P0D\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"height\": 6,\n\t\t\t\"width\": 6,\n\t\t\t\"y\": 28,\n\t\t\t\"x\": 6,\n\t\t\t\"type\": \"metric\",\n\t\t\t\"properties\": {\n\t\t\t\t\"view\": \"timeSeries\",\n\t\t\t\t\"stacked\": false,\n\t\t\t\t\"metrics\": [\n\t\t\t\t\t[\"AWS/DynamoDB\", \"ConsumedReadCapacityUnits\", \"TableName\", \"${tableName}\"],\n\t\t\t\t\t[\".\", \"ConsumedWriteCapacityUnits\", \".\", \".\"]\n\t\t\t\t],\n\t\t\t\t\"region\": \"us-east-2\",\n\t\t\t\t\"title\": \"Source Accounts Table - Consumed Read & Write Units\",\n\t\t\t\t\"period\": 300\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"height\": 6,\n\t\t\t\"width\": 6,\n\t\t\t\"y\": 22,\n\t\t\t\"x\": 18,\n\t\t\t\"type\": \"metric\",\n\t\t\t\"properties\": {\n\t\t\t\t\"metrics\": [\n\t\t\t\t\t[\n\t\t\t\t\t\t\"AWS/DynamoDB\",\n\t\t\t\t\t\t\"SystemErrors\",\n\t\t\t\t\t\t\"TableName\",\n\t\t\t\t\t\t\"service-source-accounts-local-sourceAccountsGlobalTable\",\n\t\t\t\t\t\t\"Operation\",\n\t\t\t\t\t\t\"GetItem\",\n\t\t\t\t\t\t{ \"color\": \"#0073BB\" }\n\t\t\t\t\t],\n\t\t\t\t\t[\"...\", \"PutItem\", { \"color\": \"#9468BD\" }]\n\t\t\t\t],\n\t\t\t\t\"title\": \"Source Accounts Global Table - System Errors\",\n\t\t\t\t\"view\": \"timeSeries\",\n\t\t\t\t\"stacked\": false,\n\t\t\t\t\"region\": \"us-east-2\",\n\t\t\t\t\"stat\": \"Sum\",\n\t\t\t\t\"period\": 60,\n\t\t\t\t\"yAxis\": {\n\t\t\t\t\t\"left\": {\n\t\t\t\t\t\t\"showUnits\": false\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"start\": \"-PT3H\",\n\t\t\t\t\"end\": \"P0D\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"height\": 6,\n\t\t\t\"width\": 6,\n\t\t\t\"y\": 28,\n\t\t\t\"x\": 0,\n\t\t\t\"type\": \"metric\",\n\t\t\t\"properties\": {\n\t\t\t\t\"metrics\": [\n\t\t\t\t\t[\n\t\t\t\t\t\t\"AWS/DynamoDB\",\n\t\t\t\t\t\t\"ConsumedReadCapacityUnits\",\n\t\t\t\t\t\t\"TableName\",\n\t\t\t\t\t\t\"service-source-accounts-local-sourceAccountsGlobalTable\",\n\t\t\t\t\t\t{ \"label\": \"sourceAccountsGlobalTable Consumed Read Capacity Units\" }\n\t\t\t\t\t],\n\t\t\t\t\t[\n\t\t\t\t\t\t\".\",\n\t\t\t\t\t\t\"ConsumedWriteCapacityUnits\",\n\t\t\t\t\t\t\".\",\n\t\t\t\t\t\t\".\",\n\t\t\t\t\t\t{ \"label\": \"sourceAccountsGlobalTable Consumed Write Capacity Units\" }\n\t\t\t\t\t]\n\t\t\t\t],\n\t\t\t\t\"view\": \"timeSeries\",\n\t\t\t\t\"stacked\": false,\n\t\t\t\t\"region\": \"us-east-2\",\n\t\t\t\t\"stat\": \"Average\",\n\t\t\t\t\"period\": 300,\n\t\t\t\t\"title\": \"Source Accounts Global Table - Consumed Read & Write Units\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"height\": 6,\n\t\t\t\"width\": 6,\n\t\t\t\"y\": 28,\n\t\t\t\"x\": 12,\n\t\t\t\"type\": \"metric\",\n\t\t\t\"properties\": {\n\t\t\t\t\"title\": \"Audit Events Dropped\",\n\t\t\t\t\"annotations\": {\n\t\t\t\t\t\"alarms\": [\n\t\t\t\t\t\t\"arn:aws:cloudwatch:us-east-2:431319421842:alarm:c1c-local-us-east-2-service-source-accounts-AuditEventDropped-p3\"\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t\"view\": \"timeSeries\",\n\t\t\t\t\"stacked\": false\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"metric\",\n\t\t\t\"x\": 6,\n\t\t\t\"y\": 28,\n\t\t\t\"width\": 6,\n\t\t\t\"height\": 6,\n\t\t\t\"properties\": {\n\t\t\t\t\"title\": \"Dropped Internal Events in DLQ\",\n\t\t\t\t\"annotations\": {\n\t\t\t\t\t\"alarms\": [\n\t\t\t\t\t\t\"arn:aws:cloudwatch:us-east-2:431319421842:alarm:c1c-local-us-east-2-service-source-accounts-InternalEventsDLQSingleVisibleMessage-p3\"\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t\"view\": \"timeSeries\",\n\t\t\t\t\"stacked\": false\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"height\": 6,\n\t\t\t\"width\": 6,\n\t\t\t\"y\": 28,\n\t\t\t\"x\": 18,\n\t\t\t\"type\": \"metric\",\n\t\t\t\"properties\": {\n\t\t\t\t\"title\": \"Lifecycle Event Dropped\",\n\t\t\t\t\"annotations\": {\n\t\t\t\t\t\"alarms\": [\n\t\t\t\t\t\t\"arn:aws:cloudwatch:us-east-2:431319421842:alarm:c1c-local-us-east-2-service-source-accounts-PublishLifecycleEventLambdaSingleError-p3\"\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t\"view\": \"timeSeries\",\n\t\t\t\t\"stacked\": false\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"metric\",\n\t\t\t\"x\": 0,\n\t\t\t\"y\": 34,\n\t\t\t\"width\": 6,\n\t\t\t\"height\": 6,\n\t\t\t\"properties\": {\n\t\t\t\t\"title\": \"Github Webhook Event Dropped\",\n\t\t\t\t\"annotations\": {\n\t\t\t\t\t\"alarms\": [\n\t\t\t\t\t\t\"arn:aws:cloudwatch:us-east-2:431319421842:alarm:c1c-local-us-east-2-service-source-accounts-GithubWebhookLambdaSingleError-p3\"\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t\"view\": \"timeSeries\",\n\t\t\t\t\"stacked\": false\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"metric\",\n\t\t\t\"x\": 6,\n\t\t\t\"y\": 34,\n\t\t\t\"width\": 6,\n\t\t\t\"height\": 6,\n\t\t\t\"properties\": {\n\t\t\t\t\"title\": \"C1 Account LifeCycle Event Dropped\",\n\t\t\t\t\"annotations\": {\n\t\t\t\t\t\"alarms\": [\n\t\t\t\t\t\t\"arn:aws:cloudwatch:us-east-2:431319421842:alarm:c1c-local-us-east-2-service-source-accounts-C1AccLifecycleEventsDLQSingleMessage-p3\"\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t\"view\": \"timeSeries\",\n\t\t\t\t\"stacked\": false\n\t\t\t}\n\t\t}\n\t]\n}\n",
            {
              "tableName": {
                "Ref": "sourceAccountsTable"
              }
            }
          ]
        }
      }
    },
    "sourceAccountIntCloudwatchDashboard": {
      "Type": "AWS::CloudWatch::Dashboard",
      "Properties": {
        "DashboardName": "service-source-accounts-us-east-2-local-source-account-integration",
        "DashboardBody": "{\n\t\"widgets\": [\n\t\t{\n\t\t\t\"height\": 7,\n\t\t\t\"width\": 12,\n\t\t\t\"y\": 0,\n\t\t\t\"x\": 0,\n\t\t\t\"type\": \"text\",\n\t\t\t\"properties\": {\n\t\t\t\t\"markdown\": \"# Source Account Integrations Dashboard \\n\\nThis dashboard provides an overview of the source account endpoints. Metrics relating to Source Account API actions for managing user's integrations will be represented here.\\n\\nTo see a macro-level view of the Source Accounts Service, click below.\\n\\n[button:Go To Main Dashboard](https://us-east-2.console.aws.amazon.com/cloudwatch/home?region=us-east-2#dashboards:name=service-source-accounts-us-east-2-local-main) \\n \\n## Source Account Dashboard Reference\\n__Invocations & Errors:__  These widgets are tracking counts of invocations and errors for lambda functions relating to CRUD integrations actions.\\n\\n__Availability:__ Tracks the availability of the source account endpoints.\\n\\n__Latency:__ Tracks the latency of the source account endpoints.\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"height\": 7,\n\t\t\t\"width\": 12,\n\t\t\t\"y\": 0,\n\t\t\t\"x\": 12,\n\t\t\t\"type\": \"metric\",\n\t\t\t\"properties\": {\n\t\t\t\t\"metrics\": [\n\t\t\t\t\t[\n\t\t\t\t\t\t\"AWS/Lambda\",\n\t\t\t\t\t\t\"Invocations\",\n\t\t\t\t\t\t\"FunctionName\",\n\t\t\t\t\t\t\"service-source-accounts-local-createGitHubInt\",\n\t\t\t\t\t\t{ \"label\": \"Invocations - Create Github Integration\" }\n\t\t\t\t\t],\n\t\t\t\t\t[\n\t\t\t\t\t\t\"...\",\n\t\t\t\t\t\t\"service-source-accounts-local-modifyIntegration\",\n\t\t\t\t\t\t{ \"label\": \"Invocations - Modify Integration\" }\n\t\t\t\t\t],\n\t\t\t\t\t[\n\t\t\t\t\t\t\"...\",\n\t\t\t\t\t\t\"service-source-accounts-local-deleteIntegration\",\n\t\t\t\t\t\t{ \"label\": \"Invocations - Delete Integration\" }\n\t\t\t\t\t],\n\t\t\t\t\t[\n\t\t\t\t\t\t\".\",\n\t\t\t\t\t\t\"Errors\",\n\t\t\t\t\t\t\".\",\n\t\t\t\t\t\t\"service-source-accounts-local-createGitHubInt\",\n\t\t\t\t\t\t{ \"label\": \"Errors - Create Github Integration\" }\n\t\t\t\t\t],\n\t\t\t\t\t[\n\t\t\t\t\t\t\"...\",\n\t\t\t\t\t\t\"service-source-accounts-local-modifyIntegration\",\n\t\t\t\t\t\t{ \"label\": \"Errors - Modify Integration\" }\n\t\t\t\t\t],\n\t\t\t\t\t[\n\t\t\t\t\t\t\"...\",\n\t\t\t\t\t\t\"service-source-accounts-local-deleteIntegration\",\n\t\t\t\t\t\t{ \"label\": \"Errors - Delete Integration\" }\n\t\t\t\t\t]\n\t\t\t\t],\n\t\t\t\t\"view\": \"timeSeries\",\n\t\t\t\t\"stacked\": false,\n\t\t\t\t\"region\": \"us-east-2\",\n\t\t\t\t\"stat\": \"Sum\",\n\t\t\t\t\"period\": 300,\n\t\t\t\t\"title\": \"Invocations & Errors - Add, Modify & Delete\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"height\": 7,\n\t\t\t\"width\": 12,\n\t\t\t\"y\": 7,\n\t\t\t\"x\": 0,\n\t\t\t\"type\": \"metric\",\n\t\t\t\"properties\": {\n\t\t\t\t\"metrics\": [\n\t\t\t\t\t[\n\t\t\t\t\t\t\"AWS/Lambda\",\n\t\t\t\t\t\t\"Invocations\",\n\t\t\t\t\t\t\"FunctionName\",\n\t\t\t\t\t\t\"service-source-accounts-local-listIntegrations\",\n\t\t\t\t\t\t{ \"label\": \"Invocations - List Integrations\" }\n\t\t\t\t\t],\n\t\t\t\t\t[\n\t\t\t\t\t\t\"...\",\n\t\t\t\t\t\t\"service-source-accounts-local-listIntegrationsIntl\",\n\t\t\t\t\t\t{ \"label\": \"Invocations - List Integration Internal\" }\n\t\t\t\t\t],\n\t\t\t\t\t[\n\t\t\t\t\t\t\"...\",\n\t\t\t\t\t\t\"service-source-accounts-local-getIntegration\",\n\t\t\t\t\t\t{ \"label\": \"Invocations - Get Integration\" }\n\t\t\t\t\t],\n\t\t\t\t\t[\n\t\t\t\t\t\t\".\",\n\t\t\t\t\t\t\"Errors\",\n\t\t\t\t\t\t\".\",\n\t\t\t\t\t\t\"service-source-accounts-local-listIntegrations\",\n\t\t\t\t\t\t{ \"label\": \"Errors - List Integrations\" }\n\t\t\t\t\t],\n\t\t\t\t\t[\n\t\t\t\t\t\t\"...\",\n\t\t\t\t\t\t\"service-source-accounts-local-listIntegrationsIntl\",\n\t\t\t\t\t\t{ \"label\": \"Errors - List Integrations Internal\" }\n\t\t\t\t\t],\n\t\t\t\t\t[\"...\", \"service-source-accounts-local-getIntegration\", { \"label\": \"Errors - Get Integration\" }]\n\t\t\t\t],\n\t\t\t\t\"view\": \"timeSeries\",\n\t\t\t\t\"stacked\": false,\n\t\t\t\t\"region\": \"us-east-2\",\n\t\t\t\t\"stat\": \"Sum\",\n\t\t\t\t\"period\": 300,\n\t\t\t\t\"title\": \"Invocations & Errors - List\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"height\": 7,\n\t\t\t\"width\": 12,\n\t\t\t\"y\": 7,\n\t\t\t\"x\": 12,\n\t\t\t\"type\": \"metric\",\n\t\t\t\"properties\": {\n\t\t\t\t\"metrics\": [\n\t\t\t\t\t[\n\t\t\t\t\t\t\"AWS/Lambda\",\n\t\t\t\t\t\t\"Invocations\",\n\t\t\t\t\t\t\"FunctionName\",\n\t\t\t\t\t\t\"service-source-accounts-local-createProviderAuth\"\n\t\t\t\t\t],\n\t\t\t\t\t[\".\", \"Errors\", \".\", \".\"]\n\t\t\t\t],\n\t\t\t\t\"view\": \"timeSeries\",\n\t\t\t\t\"stacked\": false,\n\t\t\t\t\"region\": \"us-east-2\",\n\t\t\t\t\"stat\": \"Sum\",\n\t\t\t\t\"period\": 300,\n\t\t\t\t\"title\": \"Invocations &amp; Errors - Create Provider Authentication Token\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"height\": 3,\n\t\t\t\"width\": 12,\n\t\t\t\"y\": 14,\n\t\t\t\"x\": 0,\n\t\t\t\"type\": \"metric\",\n\t\t\t\"properties\": {\n\t\t\t\t\"metrics\": [\n\t\t\t\t\t[{ \"expression\": \"SUM([m1])\", \"label\": \"Total Invocations\", \"id\": \"e1\" }],\n\t\t\t\t\t[{ \"expression\": \"SUM([m2])\", \"label\": \"Total Errors\", \"id\": \"e2\" }],\n\t\t\t\t\t[\n\t\t\t\t\t\t\"AWS/Lambda\",\n\t\t\t\t\t\t\"Invocations\",\n\t\t\t\t\t\t\"FunctionName\",\n\t\t\t\t\t\t\"service-source-accounts-local-createProviderAuth\",\n\t\t\t\t\t\t{ \"id\": \"m1\", \"visible\": false }\n\t\t\t\t\t],\n\t\t\t\t\t[\".\", \"Errors\", \".\", \".\", { \"id\": \"m2\", \"visible\": false }]\n\t\t\t\t],\n\t\t\t\t\"view\": \"singleValue\",\n\t\t\t\t\"stacked\": true,\n\t\t\t\t\"region\": \"us-east-2\",\n\t\t\t\t\"stat\": \"Sum\",\n\t\t\t\t\"period\": 300,\n\t\t\t\t\"title\": \"Invocations & Errors Count - Create Provider Authentication Token\",\n\t\t\t\t\"liveData\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"height\": 3,\n\t\t\t\"width\": 12,\n\t\t\t\"y\": 14,\n\t\t\t\"x\": 12,\n\t\t\t\"type\": \"metric\",\n\t\t\t\"properties\": {\n\t\t\t\t\"metrics\": [\n\t\t\t\t\t[\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"expression\": \"SUM([m7,m8,m9,m10,m11,m12])\",\n\t\t\t\t\t\t\t\"label\": \"Invocations - Total\",\n\t\t\t\t\t\t\t\"id\": \"e1\"\n\t\t\t\t\t\t}\n\t\t\t\t\t],\n\t\t\t\t\t[{ \"expression\": \"SUM([m1,m2,m3,m4,m5,m6])\", \"label\": \"Errors - Total\", \"id\": \"e2\" }],\n\t\t\t\t\t[\n\t\t\t\t\t\t\"AWS/Lambda\",\n\t\t\t\t\t\t\"Errors\",\n\t\t\t\t\t\t\"FunctionName\",\n\t\t\t\t\t\t\"service-source-accounts-local-createGitHubInt\",\n\t\t\t\t\t\t{ \"id\": \"m1\", \"visible\": false }\n\t\t\t\t\t],\n\t\t\t\t\t[\"...\", \"service-source-accounts-local-deleteIntegration\", { \"id\": \"m2\", \"visible\": false }],\n\t\t\t\t\t[\"...\", \"service-source-accounts-local-getIntegration\", { \"id\": \"m3\", \"visible\": false }],\n\t\t\t\t\t[\"...\", \"service-source-accounts-local-listIntegrations\", { \"id\": \"m4\", \"visible\": false }],\n\t\t\t\t\t[\"...\", \"service-source-accounts-local-listIntegrationsIntl\", { \"id\": \"m5\", \"visible\": false }],\n\t\t\t\t\t[\"...\", \"service-source-accounts-local-modifyIntegration\", { \"id\": \"m6\", \"visible\": false }],\n\t\t\t\t\t[\n\t\t\t\t\t\t\".\",\n\t\t\t\t\t\t\"Invocations\",\n\t\t\t\t\t\t\".\",\n\t\t\t\t\t\t\"service-source-accounts-local-createGitHubInt\",\n\t\t\t\t\t\t{ \"id\": \"m7\", \"visible\": false }\n\t\t\t\t\t],\n\t\t\t\t\t[\"...\", \"service-source-accounts-local-deleteIntegration\", { \"id\": \"m8\", \"visible\": false }],\n\t\t\t\t\t[\"...\", \"service-source-accounts-local-getIntegration\", { \"id\": \"m9\", \"visible\": false }],\n\t\t\t\t\t[\"...\", \"service-source-accounts-local-listIntegrations\", { \"id\": \"m10\", \"visible\": false }],\n\t\t\t\t\t[\"...\", \"service-source-accounts-local-listIntegrationsIntl\", { \"id\": \"m11\", \"visible\": false }],\n\t\t\t\t\t[\"...\", \"service-source-accounts-local-modifyIntegration\", { \"id\": \"m12\", \"visible\": false }]\n\t\t\t\t],\n\t\t\t\t\"view\": \"singleValue\",\n\t\t\t\t\"stacked\": true,\n\t\t\t\t\"region\": \"us-east-2\",\n\t\t\t\t\"stat\": \"Sum\",\n\t\t\t\t\"period\": 300,\n\t\t\t\t\"title\": \"Invocations &amp; Errors Count - Across All CRUD Lambdas\",\n\t\t\t\t\"liveData\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"height\": 1,\n\t\t\t\"width\": 24,\n\t\t\t\"y\": 17,\n\t\t\t\"x\": 0,\n\t\t\t\"type\": \"text\",\n\t\t\t\"properties\": {\n\t\t\t\t\"markdown\": \"# Availability - External Endpoints\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"height\": 6,\n\t\t\t\"width\": 12,\n\t\t\t\"y\": 18,\n\t\t\t\"x\": 0,\n\t\t\t\"type\": \"metric\",\n\t\t\t\"properties\": {\n\t\t\t\t\"title\": \"Availability - Create Github Integration\",\n\t\t\t\t\"annotations\": {\n\t\t\t\t\t\"alarms\": [\n\t\t\t\t\t\t\"arn:aws:cloudwatch:us-east-2:431319421842:alarm:c1c-local-us-east-2-service-source-accounts-CreateIntegrationAvailability-p1\"\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t\"view\": \"timeSeries\",\n\t\t\t\t\"stacked\": false\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"height\": 6,\n\t\t\t\"width\": 12,\n\t\t\t\"y\": 24,\n\t\t\t\"x\": 12,\n\t\t\t\"type\": \"metric\",\n\t\t\t\"properties\": {\n\t\t\t\t\"title\": \"Availability - External List Integrations\",\n\t\t\t\t\"annotations\": {\n\t\t\t\t\t\"alarms\": [\n\t\t\t\t\t\t\"arn:aws:cloudwatch:us-east-2:431319421842:alarm:c1c-local-us-east-2-service-source-accounts-ListIntegrationsAvailability-p1\"\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t\"view\": \"timeSeries\",\n\t\t\t\t\"stacked\": false\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"height\": 6,\n\t\t\t\"width\": 12,\n\t\t\t\"y\": 18,\n\t\t\t\"x\": 12,\n\t\t\t\"type\": \"metric\",\n\t\t\t\"properties\": {\n\t\t\t\t\"title\": \"Availability - Modify Integration\",\n\t\t\t\t\"annotations\": {\n\t\t\t\t\t\"alarms\": [\n\t\t\t\t\t\t\"arn:aws:cloudwatch:us-east-2:431319421842:alarm:c1c-local-us-east-2-service-source-accounts-ModifyIntegrationAvailability-p1\"\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t\"view\": \"timeSeries\",\n\t\t\t\t\"stacked\": false\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"height\": 6,\n\t\t\t\"width\": 12,\n\t\t\t\"y\": 24,\n\t\t\t\"x\": 0,\n\t\t\t\"type\": \"metric\",\n\t\t\t\"properties\": {\n\t\t\t\t\"title\": \"Availability - Delete Integration\",\n\t\t\t\t\"annotations\": {\n\t\t\t\t\t\"alarms\": [\n\t\t\t\t\t\t\"arn:aws:cloudwatch:us-east-2:431319421842:alarm:c1c-local-us-east-2-service-source-accounts-DeleteIntegrationAvailability-p1\"\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t\"view\": \"timeSeries\",\n\t\t\t\t\"stacked\": false\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"height\": 1,\n\t\t\t\"width\": 24,\n\t\t\t\"y\": 43,\n\t\t\t\"x\": 0,\n\t\t\t\"type\": \"text\",\n\t\t\t\"properties\": {\n\t\t\t\t\"markdown\": \"# Availability - Internal Endpoints\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"height\": 6,\n\t\t\t\"width\": 12,\n\t\t\t\"y\": 44,\n\t\t\t\"x\": 0,\n\t\t\t\"type\": \"metric\",\n\t\t\t\"properties\": {\n\t\t\t\t\"title\": \"Availability - Create Provider Access Token\",\n\t\t\t\t\"annotations\": {\n\t\t\t\t\t\"alarms\": [\n\t\t\t\t\t\t\"arn:aws:cloudwatch:us-east-2:431319421842:alarm:c1c-local-us-east-2-service-source-accounts-CreateAuthorizationsAvailability-p1\"\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t\"view\": \"timeSeries\",\n\t\t\t\t\"stacked\": false\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"height\": 6,\n\t\t\t\"width\": 12,\n\t\t\t\"y\": 44,\n\t\t\t\"x\": 12,\n\t\t\t\"type\": \"metric\",\n\t\t\t\"properties\": {\n\t\t\t\t\"title\": \"Availability - Internal List Integrations\",\n\t\t\t\t\"annotations\": {\n\t\t\t\t\t\"alarms\": [\n\t\t\t\t\t\t\"arn:aws:cloudwatch:us-east-2:431319421842:alarm:c1c-local-us-east-2-service-source-accounts-ListIntegrationsInternalAvailability-p1\"\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t\"view\": \"timeSeries\",\n\t\t\t\t\"stacked\": false\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"height\": 1,\n\t\t\t\"width\": 24,\n\t\t\t\"y\": 30,\n\t\t\t\"x\": 0,\n\t\t\t\"type\": \"text\",\n\t\t\t\"properties\": {\n\t\t\t\t\"markdown\": \"# Latency - External Endpoints\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"height\": 6,\n\t\t\t\"width\": 12,\n\t\t\t\"y\": 31,\n\t\t\t\"x\": 0,\n\t\t\t\"type\": \"metric\",\n\t\t\t\"properties\": {\n\t\t\t\t\"title\": \"Latency - Create Github Integration\",\n\t\t\t\t\"annotations\": {\n\t\t\t\t\t\"alarms\": [\n\t\t\t\t\t\t\"arn:aws:cloudwatch:us-east-2:431319421842:alarm:c1c-local-us-east-2-service-source-accounts-CreateGithubIntegrationLatency-p3\"\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t\"view\": \"timeSeries\",\n\t\t\t\t\"stacked\": false\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"height\": 6,\n\t\t\t\"width\": 12,\n\t\t\t\"y\": 37,\n\t\t\t\"x\": 12,\n\t\t\t\"type\": \"metric\",\n\t\t\t\"properties\": {\n\t\t\t\t\"title\": \"Latency - External List Integrations\",\n\t\t\t\t\"annotations\": {\n\t\t\t\t\t\"alarms\": [\n\t\t\t\t\t\t\"arn:aws:cloudwatch:us-east-2:431319421842:alarm:c1c-local-us-east-2-service-source-accounts-ListIntegrationsLatency-p3\"\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t\"view\": \"timeSeries\",\n\t\t\t\t\"stacked\": false\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"height\": 6,\n\t\t\t\"width\": 12,\n\t\t\t\"y\": 31,\n\t\t\t\"x\": 12,\n\t\t\t\"type\": \"metric\",\n\t\t\t\"properties\": {\n\t\t\t\t\"title\": \"Latency - Modify Integration\",\n\t\t\t\t\"annotations\": {\n\t\t\t\t\t\"alarms\": [\n\t\t\t\t\t\t\"arn:aws:cloudwatch:us-east-2:431319421842:alarm:c1c-local-us-east-2-service-source-accounts-ModifyIntegrationLatency-p3\"\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t\"view\": \"timeSeries\",\n\t\t\t\t\"stacked\": false\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"height\": 6,\n\t\t\t\"width\": 12,\n\t\t\t\"y\": 37,\n\t\t\t\"x\": 0,\n\t\t\t\"type\": \"metric\",\n\t\t\t\"properties\": {\n\t\t\t\t\"title\": \"Latency - Delete Integration\",\n\t\t\t\t\"annotations\": {\n\t\t\t\t\t\"alarms\": [\n\t\t\t\t\t\t\"arn:aws:cloudwatch:us-east-2:431319421842:alarm:c1c-local-us-east-2-service-source-accounts-DeleteIntegrationLatency-p3\"\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t\"view\": \"timeSeries\",\n\t\t\t\t\"stacked\": false\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"height\": 1,\n\t\t\t\"width\": 24,\n\t\t\t\"y\": 50,\n\t\t\t\"x\": 0,\n\t\t\t\"type\": \"text\",\n\t\t\t\"properties\": {\n\t\t\t\t\"markdown\": \"# Latency - Internal Endpoints\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"height\": 6,\n\t\t\t\"width\": 12,\n\t\t\t\"y\": 51,\n\t\t\t\"x\": 12,\n\t\t\t\"type\": \"metric\",\n\t\t\t\"properties\": {\n\t\t\t\t\"title\": \"Latency - Internal List Integrations\",\n\t\t\t\t\"annotations\": {\n\t\t\t\t\t\"alarms\": [\n\t\t\t\t\t\t\"arn:aws:cloudwatch:us-east-2:431319421842:alarm:c1c-local-us-east-2-service-source-accounts-ListIntegrationsInternalLatency-p3\"\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t\"view\": \"timeSeries\",\n\t\t\t\t\"stacked\": false\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"height\": 6,\n\t\t\t\"width\": 12,\n\t\t\t\"y\": 51,\n\t\t\t\"x\": 0,\n\t\t\t\"type\": \"metric\",\n\t\t\t\"properties\": {\n\t\t\t\t\"title\": \"Latency - Create Provider Auth Token\",\n\t\t\t\t\"annotations\": {\n\t\t\t\t\t\"alarms\": [\n\t\t\t\t\t\t\"arn:aws:cloudwatch:us-east-2:431319421842:alarm:c1c-local-us-east-2-service-source-accounts-CreateAuthorizationsLatency-p3\"\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t\"view\": \"timeSeries\",\n\t\t\t\t\"stacked\": false\n\t\t\t}\n\t\t}\n\t]\n}\n"
      }
    },
    "sourceAccountsTable": {
      "Type": "AWS::DynamoDB::Table",
      "DeletionPolicy": "Delete",
      "UpdateReplacePolicy": "Delete",
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "PK",
            "AttributeType": "S"
          },
          {
            "AttributeName": "SK",
            "AttributeType": "S"
          },
          {
            "AttributeName": "GSI1PK",
            "AttributeType": "S"
          },
          {
            "AttributeName": "GSI1SK",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "PK",
            "KeyType": "HASH"
          },
          {
            "AttributeName": "SK",
            "KeyType": "RANGE"
          }
        ],
        "GlobalSecondaryIndexes": [
          {
            "IndexName": "CloudOneAccountIndex",
            "KeySchema": [
              {
                "AttributeName": "GSI1PK",
                "KeyType": "HASH"
              },
              {
                "AttributeName": "GSI1SK",
                "KeyType": "RANGE"
              }
            ],
            "Projection": {
              "ProjectionType": "ALL"
            }
          }
        ],
        "BillingMode": "PAY_PER_REQUEST",
        "SSESpecification": {
          "KMSMasterKeyId": {
            "Fn::GetAtt": [
              "sourceAccountsTableEncryptionKey",
              "Arn"
            ]
          },
          "SSEEnabled": true,
          "SSEType": "KMS"
        },
        "PointInTimeRecoverySpecification": {
          "PointInTimeRecoveryEnabled": true
        },
        "TimeToLiveSpecification": {
          "Enabled": true,
          "AttributeName": "ttl"
        },
        "StreamSpecification": {
          "StreamViewType": "NEW_AND_OLD_IMAGES"
        },
        "Tags": [
          {
            "Key": "SERVICE",
            "Value": "service-source-accounts"
          },
          {
            "Key": "STAGE",
            "Value": "local"
          }
        ]
      }
    },
    "sourceAccountsGlobalTable": {
      "Type": "AWS::DynamoDB::GlobalTable",
      "DeletionPolicy": "Delete",
      "UpdateReplacePolicy": "Delete",
      "Properties": {
        "TableName": "service-source-accounts-local-sourceAccountsGlobalTable",
        "AttributeDefinitions": [
          {
            "AttributeName": "PK",
            "AttributeType": "S"
          },
          {
            "AttributeName": "SK",
            "AttributeType": "S"
          },
          {
            "AttributeName": "GSI1PK",
            "AttributeType": "S"
          },
          {
            "AttributeName": "GSI1SK",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "PK",
            "KeyType": "HASH"
          },
          {
            "AttributeName": "SK",
            "KeyType": "RANGE"
          }
        ],
        "GlobalSecondaryIndexes": [
          {
            "IndexName": "CloudOneAccountIndex",
            "KeySchema": [
              {
                "AttributeName": "GSI1PK",
                "KeyType": "HASH"
              },
              {
                "AttributeName": "GSI1SK",
                "KeyType": "RANGE"
              }
            ],
            "Projection": {
              "ProjectionType": "ALL"
            }
          }
        ],
        "BillingMode": "PAY_PER_REQUEST",
        "SSESpecification": {
          "SSEEnabled": true,
          "SSEType": "KMS"
        },
        "TimeToLiveSpecification": {
          "Enabled": true,
          "AttributeName": "ttl"
        },
        "StreamSpecification": {
          "StreamViewType": "NEW_AND_OLD_IMAGES"
        },
        "Replicas": [
          {
            "Region": "us-east-2",
            "PointInTimeRecoverySpecification": {
              "PointInTimeRecoveryEnabled": true
            }
          }
        ]
      }
    },
    "sourceAccountsTableEncryptionKey": {
      "Type": "AWS::KMS::Key",
      "DeletionPolicy": "Delete",
      "UpdateReplacePolicy": "Delete",
      "Properties": {
        "Description": "CMK for server side encryption of sourceAccountsTable",
        "Enabled": true,
        "EnableKeyRotation": false,
        "KeyUsage": "ENCRYPT_DECRYPT",
        "PendingWindowInDays": 7,
        "KeyPolicy": {
          "Version": "2012-10-17",
          "Id": "sourceaccounts-table-encryption-key",
          "Statement": [
            {
              "Sid": "Allow deployment role to access the key",
              "Effect": "Allow",
              "Principal": {
                "AWS": "arn:aws:iam::431319421842:role/cf-deployer-role"
              },
              "Action": [
                "kms:CreateKey",
                "kms:Decrypt",
                "kms:DescribeKey",
                "kms:Encrypt",
                "kms:GenerateDataKey",
                "kms:PutKeyPolicy",
                "kms:ScheduleKeyDeletion",
                "kms:TagResource",
                "kms:UntagResource",
                "kms:UpdateKeyDescription",
                "kms:CreateGrant",
                "kms:ReEncrypt*"
              ],
              "Resource": "*"
            },
            {
              "Sid": "Allow all account IAM principals to read the key and decrypt content",
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::Sub": "arn:${AWS::Partition}:iam::${AWS::AccountId}:root"
                }
              },
              "Action": [
                "kms:DescribeKey",
                "kms:Decrypt",
                "kms:ListResourceTags"
              ],
              "Resource": "*"
            }
          ]
        },
        "Tags": [
          {
            "Key": "SERVICE",
            "Value": "service-source-accounts"
          },
          {
            "Key": "STAGE",
            "Value": "local"
          }
        ]
      }
    },
    "githubKmsKey": {
      "Type": "AWS::KMS::Key",
      "Properties": {
        "Description": "Customer Master Key (CMK) used for encrypting github credentials in secrets manager",
        "Enabled": true,
        "EnableKeyRotation": false,
        "KeyUsage": "ENCRYPT_DECRYPT",
        "PendingWindowInDays": 7,
        "KeyPolicy": {
          "Version": "2012-10-17",
          "Id": "github-kms-key",
          "Statement": [
            {
              "Sid": "Enable IAM User Permissions",
              "Effect": "Allow",
              "Principal": {
                "AWS": "arn:aws:iam::431319421842:role/cf-deployer-role"
              },
              "Action": [
                "kms:CreateKey",
                "kms:Decrypt",
                "kms:DescribeKey",
                "kms:Encrypt",
                "kms:GenerateDataKey",
                "kms:PutKeyPolicy",
                "kms:ScheduleKeyDeletion",
                "kms:TagResource",
                "kms:UntagResource",
                "kms:UpdateKeyDescription"
              ],
              "Resource": "*"
            },
            {
              "Sid": "Allow all account IAM principals to read the key and decrypt content",
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::Sub": "arn:${AWS::Partition}:iam::${AWS::AccountId}:root"
                }
              },
              "Action": [
                "kms:DescribeKey",
                "kms:Decrypt",
                "kms:ListResourceTags"
              ],
              "Resource": "*"
            },
            {
              "Sid": "Allow serverless plugin secret value to use the secret",
              "Effect": "Allow",
              "Principal": "*",
              "Action": [
                "kms:Decrypt",
                "kms:Encrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*",
                "kms:DescribeKey"
              ],
              "Resource": "*",
              "Condition": {
                "StringLike": {
                  "AWS:PrincipalArn": {
                    "Fn::Sub": "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/*DecryptSecret*"
                  }
                }
              }
            }
          ]
        },
        "Tags": [
          {
            "Key": "SERVICE",
            "Value": "service-source-accounts"
          },
          {
            "Key": "STAGE",
            "Value": "local"
          }
        ]
      }
    },
    "githubWebhookKmsKey": {
      "Type": "AWS::KMS::Key",
      "Properties": {
        "Description": "Customer Master Key (CMK) used for encrypting the github webhook key in secrets manager",
        "Enabled": true,
        "EnableKeyRotation": false,
        "KeyUsage": "ENCRYPT_DECRYPT",
        "PendingWindowInDays": 7,
        "KeyPolicy": {
          "Version": "2012-10-17",
          "Id": "github-webhook-kms-key",
          "Statement": [
            {
              "Sid": "Enable IAM User Permissions",
              "Effect": "Allow",
              "Principal": {
                "AWS": "arn:aws:iam::431319421842:role/cf-deployer-role"
              },
              "Action": [
                "kms:CreateKey",
                "kms:Decrypt",
                "kms:DescribeKey",
                "kms:Encrypt",
                "kms:GenerateDataKey",
                "kms:PutKeyPolicy",
                "kms:ScheduleKeyDeletion",
                "kms:TagResource",
                "kms:UntagResource",
                "kms:UpdateKeyDescription"
              ],
              "Resource": "*"
            },
            {
              "Sid": "Allow all account IAM principals to read the key and decrypt content",
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::Sub": "arn:${AWS::Partition}:iam::${AWS::AccountId}:root"
                }
              },
              "Action": [
                "kms:DescribeKey",
                "kms:Decrypt",
                "kms:ListResourceTags"
              ],
              "Resource": "*"
            },
            {
              "Sid": "Allow serverless plugin secret value to use the secret",
              "Effect": "Allow",
              "Principal": "*",
              "Action": [
                "kms:Decrypt",
                "kms:Encrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*",
                "kms:DescribeKey"
              ],
              "Resource": "*",
              "Condition": {
                "StringLike": {
                  "AWS:PrincipalArn": {
                    "Fn::Sub": "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/*DecryptSecret*"
                  }
                }
              }
            }
          ]
        },
        "Tags": [
          {
            "Key": "SERVICE",
            "Value": "service-source-accounts"
          },
          {
            "Key": "STAGE",
            "Value": "local"
          }
        ]
      }
    },
    "sqsKmsKey": {
      "Type": "AWS::KMS::Key",
      "Properties": {
        "Description": "Customer Master Key used to encrypt the SQS Queue for internal events",
        "Enabled": true,
        "EnableKeyRotation": false,
        "KeyPolicy": {
          "Version": "2012-10-17",
          "Id": "sqs-kms-key",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::Sub": "arn:${AWS::Partition}:iam::${AWS::AccountId}:root"
                }
              },
              "Action": [
                "kms:CreateKey",
                "kms:Decrypt",
                "kms:DescribeKey",
                "kms:Encrypt",
                "kms:GenerateDataKey",
                "kms:PutKeyPolicy",
                "kms:ScheduleKeyDeletion",
                "kms:TagResource",
                "kms:UntagResource",
                "kms:UpdateKeyDescription"
              ],
              "Resource": "*"
            }
          ]
        },
        "Tags": [
          {
            "Key": "SERVICE",
            "Value": "service-source-accounts"
          },
          {
            "Key": "STAGE",
            "Value": "local"
          }
        ]
      }
    },
    "c1AccLifecycleEventsQueueKmsKey": {
      "Type": "AWS::KMS::Key",
      "Properties": {
        "Description": "Customer Master Key used to encrypt the SQS Queue for c1 account lifecycle events",
        "Enabled": true,
        "EnableKeyRotation": false,
        "KeyPolicy": {
          "Version": "2012-10-17",
          "Id": "c1-acc-del-sqs-kms-key",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::Sub": "arn:${AWS::Partition}:iam::${AWS::AccountId}:root"
                }
              },
              "Action": [
                "kms:CreateKey",
                "kms:Decrypt",
                "kms:DescribeKey",
                "kms:Encrypt",
                "kms:GenerateDataKey",
                "kms:PutKeyPolicy",
                "kms:ScheduleKeyDeletion",
                "kms:TagResource",
                "kms:UntagResource",
                "kms:UpdateKeyDescription"
              ],
              "Resource": "*"
            },
            {
              "Sid": "Allow EventBridge to use the sqs key",
              "Effect": "Allow",
              "Principal": {
                "Service": "events.amazonaws.com"
              },
              "Action": [
                "kms:Decrypt",
                "kms:GenerateDataKey"
              ],
              "Resource": "*"
            }
          ]
        },
        "Tags": [
          {
            "Key": "SERVICE",
            "Value": "service-source-accounts"
          },
          {
            "Key": "STAGE",
            "Value": "local"
          }
        ]
      }
    },
    "alarmsSnsKey": {
      "Type": "AWS::KMS::Key",
      "Properties": {
        "Description": "CMK for encrypting the alarms SNS topic",
        "Enabled": true,
        "EnableKeyRotation": false,
        "KeyUsage": "ENCRYPT_DECRYPT",
        "PendingWindowInDays": 7,
        "KeyPolicy": {
          "Version": "2012-10-17",
          "Id": "alarms-sns-encryption-key",
          "Statement": [
            {
              "Sid": "Enable IAM User Permissions",
              "Effect": "Allow",
              "Principal": {
                "AWS": "arn:aws:iam::431319421842:role/cf-deployer-role"
              },
              "Action": [
                "kms:CreateKey",
                "kms:Decrypt",
                "kms:DescribeKey",
                "kms:Encrypt",
                "kms:GenerateDataKey",
                "kms:PutKeyPolicy",
                "kms:ScheduleKeyDeletion",
                "kms:TagResource",
                "kms:UntagResource",
                "kms:UpdateKeyDescription",
                "kms:CreateGrant",
                "kms:ReEncrypt*"
              ],
              "Resource": "*"
            },
            {
              "Sid": "Allow account root to read the key",
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::Sub": "arn:${AWS::Partition}:iam::${AWS::AccountId}:root"
                }
              },
              "Action": [
                "kms:DescribeKey",
                "kms:Decrypt",
                "kms:ListResourceTags"
              ],
              "Resource": "*"
            },
            {
              "Sid": "Allow access for SNS",
              "Effect": "Allow",
              "Principal": {
                "Service": "sns.amazonaws.com"
              },
              "Action": [
                "kms:Decrypt",
                "kms:GenerateDataKey",
                "kms:DescribeKey"
              ],
              "Resource": "*"
            },
            {
              "Sid": "Allow access for Cloudwatch alarms",
              "Effect": "Allow",
              "Principal": {
                "Service": "cloudwatch.amazonaws.com"
              },
              "Action": [
                "kms:Decrypt",
                "kms:GenerateDataKey",
                "kms:DescribeKey"
              ],
              "Resource": "*"
            }
          ]
        },
        "Tags": [
          {
            "Key": "SERVICE",
            "Value": "service-source-accounts"
          },
          {
            "Key": "STAGE",
            "Value": "local"
          }
        ]
      }
    },
    "pendoTrackEventSharedSecretKmsKey": {
      "Type": "AWS::KMS::Key",
      "Properties": {
        "Description": "Customer Master Key (CMK) used for encrypting the Pendo shared secret in secrets manager",
        "Enabled": true,
        "EnableKeyRotation": false,
        "KeyUsage": "ENCRYPT_DECRYPT",
        "PendingWindowInDays": 7,
        "KeyPolicy": {
          "Version": "2012-10-17",
          "Id": "pendo-track-event-shared-secret-kms-key",
          "Statement": [
            {
              "Sid": "Enable IAM User Permissions",
              "Effect": "Allow",
              "Principal": {
                "AWS": "arn:aws:iam::431319421842:role/cf-deployer-role"
              },
              "Action": [
                "kms:CreateKey",
                "kms:Decrypt",
                "kms:DescribeKey",
                "kms:Encrypt",
                "kms:GenerateDataKey",
                "kms:PutKeyPolicy",
                "kms:ScheduleKeyDeletion",
                "kms:TagResource",
                "kms:UntagResource",
                "kms:UpdateKeyDescription"
              ],
              "Resource": "*"
            },
            {
              "Sid": "Allow all account IAM principals to read the key and decrypt content",
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::Sub": "arn:${AWS::Partition}:iam::${AWS::AccountId}:root"
                }
              },
              "Action": [
                "kms:DescribeKey",
                "kms:Decrypt",
                "kms:ListResourceTags"
              ],
              "Resource": "*"
            },
            {
              "Sid": "Allow serverless plugin secret value to use the secret",
              "Effect": "Allow",
              "Principal": "*",
              "Action": [
                "kms:Decrypt",
                "kms:Encrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*",
                "kms:DescribeKey"
              ],
              "Resource": "*",
              "Condition": {
                "StringLike": {
                  "AWS:PrincipalArn": {
                    "Fn::Sub": "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/*DecryptSecret*"
                  }
                }
              }
            }
          ]
        },
        "Tags": [
          {
            "Key": "SERVICE",
            "Value": "service-source-accounts"
          },
          {
            "Key": "STAGE",
            "Value": "local"
          }
        ]
      }
    },
    "canaryAPIKmsKey": {
      "Type": "AWS::KMS::Key",
      "Properties": {
        "Description": "Customer Master Key (CMK) used for encrypting the canary C1 API key in secrets manager",
        "Enabled": true,
        "EnableKeyRotation": false,
        "KeyUsage": "ENCRYPT_DECRYPT",
        "PendingWindowInDays": 7,
        "KeyPolicy": {
          "Version": "2012-10-17",
          "Id": "pendo-track-event-shared-secret-kms-key",
          "Statement": [
            {
              "Sid": "Enable IAM User Permissions",
              "Effect": "Allow",
              "Principal": {
                "AWS": "arn:aws:iam::431319421842:role/cf-deployer-role"
              },
              "Action": [
                "kms:CreateKey",
                "kms:Decrypt",
                "kms:DescribeKey",
                "kms:Encrypt",
                "kms:GenerateDataKey",
                "kms:PutKeyPolicy",
                "kms:ScheduleKeyDeletion",
                "kms:TagResource",
                "kms:UntagResource",
                "kms:UpdateKeyDescription"
              ],
              "Resource": "*"
            },
            {
              "Sid": "Allow all account IAM principals to read the key and decrypt content",
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::Sub": "arn:${AWS::Partition}:iam::${AWS::AccountId}:root"
                }
              },
              "Action": [
                "kms:DescribeKey",
                "kms:Decrypt",
                "kms:ListResourceTags"
              ],
              "Resource": "*"
            },
            {
              "Sid": "Allow serverless plugin secret value to use the secret",
              "Effect": "Allow",
              "Principal": "*",
              "Action": [
                "kms:Decrypt",
                "kms:Encrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*",
                "kms:DescribeKey"
              ],
              "Resource": "*",
              "Condition": {
                "StringLike": {
                  "AWS:PrincipalArn": {
                    "Fn::Sub": "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/*DecryptSecret*"
                  }
                }
              }
            }
          ]
        },
        "Tags": [
          {
            "Key": "SERVICE",
            "Value": "service-source-accounts"
          },
          {
            "Key": "STAGE",
            "Value": "local"
          }
        ]
      }
    },
    "githubAppKey": {
      "Type": "AWS::SecretsManager::Secret",
      "Properties": {
        "Name": "githubAppKey-local",
        "Description": "Private key for signing requests to the Github App",
        "KmsKeyId": {
          "Fn::GetAtt": [
            "githubKmsKey",
            "Arn"
          ]
        },
        "Tags": [
          {
            "Key": "SERVICE",
            "Value": "service-source-accounts"
          },
          {
            "Key": "STAGE",
            "Value": "local"
          }
        ]
      },
      "Metadata": {
        "KmsKeyLogicalId": "githubKmsKey",
        "Base64SecretValue": "AgV4hMNzjUuLKKV5yR+TTXj0Krl4FW+chHZHzYdLvr3tS6sAewACABVhd3MtY3J5cHRvLXB1YmxpYy1rZXkAREF0VUM5VFVoQndONGU0MGZ6U05HdWJlQkpsanl2TDdDY2JzdVFPa2FhQU12OHRsMzJ0bi9HMEFTdHg4ZkJRa0xrZz09AAdwdXJwb3NlABFzZXJ2ZXJsZXNzLXBsdWdpbgABAAdhd3Mta21zAEthcm46YXdzOmttczp1cy1lYXN0LTI6MjQ1ODczNTEwNDA4OmtleS82NmY1ZTFhZi03YWIzLTQ0MWQtYWMwMC00N2MyZjdlNDBlY2EAuAECAQB41uAkEPaf1/YJXs3WtyzNj0vEIGsyw0GAoTyv+OnlUFwBAlaevsbBGfEErv/B4GCTJQAAAH4wfAYJKoZIhvcNAQcGoG8wbQIBADBoBgkqhkiG9w0BBwEwHgYJYIZIAWUDBAEuMBEEDAPQ+DFZXzQgHH+otQIBEIA7s+Jukrd0mefly4huELeEl4TBMO5tiYIV7h8wzDtG/iC9lDJBk76mugqvYTvLqWZhpsjAWCctjNTngxMCAAAQANoQ+uXecYMnQCdaIOTk5sf8NW5aSJcnujY+epo5PUbguFxQ7T51aNd+WEMXv/C/xf////8AAAABAAAAAAAAAAAAAAABAAAGir7M5VIMXpnxOWeU+9zwfqdL04TbVv8Fx087EaLTr7fZN4g9zjFzt0CiQm3hsEa1hsgUT5PLBhmWJvCG89f/FXGxFySjhRUEVQCPcZECTUE8fw6yZcP7fvEFSZfJNKGl8PEreTANfTkUBKC2Kcfs9GLkH0ExQmznxMzy1Wr2sxQUAOZp9Zu6M6oyq5jNN2sWM+O17n8wSFQkutylL1gBEmpvt3gTLBkGzPq9BZX5ZvjqcnT832qChz/YXmzidLWFcdIL4t7ZnJxhzj0yw0jJah+XMNolxv0U40t5cFOSIU+3pw+WsWWQkM9xA2T0z+Grs+rYjC8hsG10gjM6+lslJNHU+3R74zzXz+SZhuqq5hqNddYwirmSRPVPWtIAloRd6yAA7pXAuf46YqNf286U1laIqgbv4C0taiWV64ZLG+CPvT8vCiLcTYtu4A+hcf0U+ObehHcthPO/34KQorvToN9X4rI2s0pR9uI0sWS6mbKBnJoU70LVrD1PmKHgrJSPMX1guMwbQyE6Ra1qSUa8V7oPCELQKpn4KMZnF6Yvt7RxMw6TrE/JeZiHl+P3vE0h7RzePaj9jUFd8koVlpLYzOd9z3kikmmzoW0T4lBD/Q7IEo4bA6UOzq0ndGzj1pQUv1+kr0FkZJDw3JDASo3KpdmRcOC3QqLxWIt7YpyUdU2OmjNCyvcxDSZLYZJtvxK9WVIP0u9Sx5Q09bYYn1ztcomC0cMCbaLCekukpxNawC1e52wGi59+Qb1qq9Gudd5M9kbSloJ3N7Y0u9XHw6ifJ6M6WA5RpisSEjhtJkuE71QJqOJmqMdFeXrV1sgAW3KQwcQ4ufsyMOSB/CzNDLG1q6HaNRsnTvm4S0EejgYkv0VYFMQeigS1g7RV94JMtI0zZGzLuTsoA0fNbuAuZJEVkn7O7aBC6lkiaDBTXqPkZWKFNNPGGnTpCGM49BfQfEcL0lunIvlMbM2icFwyDsn2wahO7FO44sd9i33LpwB3rng8u5oZGhL4Gb7G7ZNzXkzuIBYHrYpSCcG8rQhoEl4XInXG/Z/rr9mhwrjoIYSbWDSpgOoireu5wA0nELFXx79Snfga40efg6+enE7Fz3TjadsXvuKYAF9LsxVbH8bd06WFOEber6pNJ5j3SV5eDr+yxBUcyxJ2SeT6qBuf2vpq9fZdKY5M5FPDG4/g9OMcOGZ5hMMEDIxTBzPzqYjDyW4owr7X1NNI5D1fUWdDRvRwbpepNEew6v5GIvYgU2yc3E9lXZBAWOTkCLTXuSp/C18uHIjKSM63q+0KMxnrJPTNmM71qa5d9DbtoBxJ005IGyW6RFAUtHwxE6Ke/0FMRjcF4ENoR0HAzz55gtSwjkIroUr/5iBoNZKxzC7yy87GfbDxRmDvEM0n0ZgYOy3i7hZsrlF20fIYEyz6Xtj4N4P7AORCs+USWHpdyaOGuZYO5h77W0rTmjBETzdWKT4f26GSndQkjc8k1tWUTX0lhqPZ7HSwSJ6bFwtK0IPpCnUvHG1JFJH0vEYfIjCK6FbxNgMQ+hfugzluKKCVcLITlAyYXa7s0201izrCMrDKjmUFoE5PVdNF3lfkqLCmlo06nh7yrIk0xmaZPCEB0QdZcRVt8aHTOFTO8VzwH3cdo0utDhmSJ1DvThFh2P1lPJm9T8cO6O9JByzLj5B6Eeyk8Lm+43xSunBtbjgP1MoGBCA79ClQj7kMdyTRNvgV66BSakbCxetymv9BDlJO5Jhs+aBRLGJxdP4leyX70au/bM4mMHJ2PCMRqkphbpgvAERQfl5EPhkqR/hm7NkcvD4X+82ye86o4Z3d7+rtQVZYVy4b8DyCMewGsb+yULLsk54V+KeyhjTByDNok96aLFh4eQs7XjoIqY8efwfSvx33ypSpM9alq7s7ntScD4YSqN1ndT5rkIebL/o7q6IyDufAUxhv3lNcD0L4mMQQ5ekm/MmtFXttfWszz6j04p7bzmIJMvT3cl+6dxeOLqHaPTmiZezl/NSS10314qUVON6vM6iOzQACImhk6eShfKiclYSqztQrj63z+QVPPDovRZ1yXMNR4KGWbU/JCbQyawQDXlJCgXs+JYdTX0h/SRicbF2Q8t4nhWWqsT6ACc0Wjd79CTl9+4Kv2mTC1zxPEb4YgnN5HiXD55WUN8MJ5CEPfTE6SP/s4AwruUPvtvvyWfCH7nMyh2dNL1yp/T1Ixhjc/OfKHteAl9igb82gl+aRnn/5njr2aj1uv7rfX62RYsQAZzBlAjEAriDI5V0JcDNSk2EZUtOHUNUuIEb+rj2+JLBoFYhy2LkM+3nsgbnjG959Chd5ZBxAAjBcoFeWPLfAlrBcvgFKWcEusID4LiqFZ1lE/ewv9TQjz2tfTV+609x9uPmI5hWVUx8="
      }
    },
    "githubWebhookKey": {
      "Type": "AWS::SecretsManager::Secret",
      "Properties": {
        "Name": "githubWebhookKey-local",
        "Description": "Key for validating Github webhook requests",
        "KmsKeyId": {
          "Fn::GetAtt": [
            "githubWebhookKmsKey",
            "Arn"
          ]
        },
        "Tags": [
          {
            "Key": "SERVICE",
            "Value": "service-source-accounts"
          },
          {
            "Key": "STAGE",
            "Value": "local"
          }
        ]
      },
      "Metadata": {
        "KmsKeyLogicalId": "githubWebhookKmsKey",
        "Base64SecretValue": "AgV4KtD66Y+M38B7dThFA3XaY5PoYAhey7rOzNM6CgjUuqwAewACABVhd3MtY3J5cHRvLXB1YmxpYy1rZXkAREFnWWk5RVRBVVlNV1QrY05KUmlpMU8xbEtNb1lmZUhSWWFLNFNrQmI0ZE56OHk0M2hiNkhBYjZFSlZrUzd0eThKQT09AAdwdXJwb3NlABFzZXJ2ZXJsZXNzLXBsdWdpbgABAAdhd3Mta21zAEthcm46YXdzOmttczp1cy1lYXN0LTI6MjQ1ODczNTEwNDA4OmtleS82NmY1ZTFhZi03YWIzLTQ0MWQtYWMwMC00N2MyZjdlNDBlY2EAuAECAQB41uAkEPaf1/YJXs3WtyzNj0vEIGsyw0GAoTyv+OnlUFwBqXCxkNKbo5/DMkB5Vw1d+QAAAH4wfAYJKoZIhvcNAQcGoG8wbQIBADBoBgkqhkiG9w0BBwEwHgYJYIZIAWUDBAEuMBEEDCibKMCj49Mi1urZrAIBEIA748v1/tMsnqpjXkQ8HTeYJLMvvUjnbwn6M6b1nkR38+5GW5luMEBuuydtHSu8wvuIBJpszEwtXjfA528CAAAQAKeRfcCGJEqFSPNdt9qgrjh/LHW6+lflePOMfTV8UbcU4kJ+UPRs+aG7id3RI3VFwv////8AAAABAAAAAAAAAAAAAAABAAAAQLyhn0IEaaf0D0HIsXaWFiZDIyM1oltMX8ahLRBJwFQU8zQ0PhFIUsxK5gcJC5fFvM5u+MjSfeQhsZoPlLLKI+3Rc9NPeJxMvYTtl7CltqmYAGcwZQIwIp4w4E3N3b1xbqVVg+T8wz9b+9WQqrcn+laltFgY7g7QTgoyoZTNBuAq018nAXN8AjEAoNd93ygQ/Lapex7b+gjnStAsh49BaIl+SLfspeuok4q36iWzfgLkPDrSbUUOMLBc"
      }
    },
    "pendoTrackEventSharedSecretKey": {
      "Type": "AWS::SecretsManager::Secret",
      "Properties": {
        "Name": "pendoTrackEventSharedSecretKey-local",
        "Description": "Key to submit TrackEvent to Pendo",
        "KmsKeyId": {
          "Fn::GetAtt": [
            "pendoTrackEventSharedSecretKmsKey",
            "Arn"
          ]
        },
        "Tags": [
          {
            "Key": "SERVICE",
            "Value": "service-source-accounts"
          },
          {
            "Key": "STAGE",
            "Value": "local"
          }
        ]
      },
      "Metadata": {
        "KmsKeyLogicalId": "pendoTrackEventSharedSecretKmsKey",
        "Base64SecretValue": ""
      }
    },
    "canaryAPIKey": {
      "Type": "AWS::SecretsManager::Secret",
      "Properties": {
        "Name": "canaryAPIKey-local",
        "Description": "C1 API Key for canary tests",
        "KmsKeyId": {
          "Fn::GetAtt": [
            "canaryAPIKmsKey",
            "Arn"
          ]
        },
        "Tags": [
          {
            "Key": "SERVICE",
            "Value": "service-source-accounts"
          },
          {
            "Key": "STAGE",
            "Value": "local"
          }
        ]
      },
      "Metadata": {
        "KmsKeyLogicalId": "canaryAPIKmsKey",
        "Base64SecretValue": "AgV4xH6NX4gwfdDPJfPU8cIlK8T6FPGdDXmk1Wohvl/7GzgAewACABVhd3MtY3J5cHRvLXB1YmxpYy1rZXkAREF6NGhjVDRWM0diN1hkSXJFY0RHbmtSbFJoU3AvTHRsTmRZTE1kTmFiYUtSMDBUd21EaUlvMFBOMTNGSHRzK3RnQT09AAdwdXJwb3NlABFzZXJ2ZXJsZXNzLXBsdWdpbgABAAdhd3Mta21zAEthcm46YXdzOmttczp1cy1lYXN0LTI6MjQ1ODczNTEwNDA4OmtleS82NmY1ZTFhZi03YWIzLTQ0MWQtYWMwMC00N2MyZjdlNDBlY2EAuAECAQB41uAkEPaf1/YJXs3WtyzNj0vEIGsyw0GAoTyv+OnlUFwBP3CYqGKh7+fAdyiL7uqbmAAAAH4wfAYJKoZIhvcNAQcGoG8wbQIBADBoBgkqhkiG9w0BBwEwHgYJYIZIAWUDBAEuMBEEDFBe9W4yg8QHmuCmkwIBEIA7UQfQjPl3EtOol0ZAOPz8XjKzcJznP9Y1L3JXabM7m9ONgC2Z2B3kGm/jgoieYNkH2hv9LEyVOuOQR/YCAAAQACJtfC4SFJ9WEkhWPwRtzTT8mux1QzPYXFZWdUCS8aM0APKEVCUdCrtlS1aYcRdjdv////8AAAABAAAAAAAAAAAAAAABAAAAYi6J/EhCPeu7N7eNjRG9QSicvHozQkqt3fjPT14kSYZuLTknhgER7nwJ8UoFKRhBPxjjOOsQiAliIyk0CJVSRQ2Y92HBWkopxM/m5y1govKRsz/1TxbaLulB5rQQ5vFGQRz2nAAfW1PVB4ek78QUG36kIQBnMGUCMQDtVzzV5o25hjYkT1OeSIrxMxFN2lmSuEByYmKZVv8nzKJLRSwvlzjSTqLqjNcYNCwCMHs53eHDSKTj/YUwUggA/SyIvKz/3FVzz7WNh4itrMu/bP811/jDMEwa6pD2EpyTLw=="
      }
    },
    "internalEventsQueue": {
      "Type": "AWS::SQS::Queue",
      "Properties": {
        "MaximumMessageSize": 262144,
        "MessageRetentionPeriod": 345600,
        "QueueName": "service-source-accounts-local-internalEventsQueue.fifo",
        "FifoQueue": true,
        "ContentBasedDeduplication": true,
        "KmsMasterKeyId": "alias/aws/sqs",
        "VisibilityTimeout": 60,
        "RedrivePolicy": {
          "deadLetterTargetArn": {
            "Fn::GetAtt": [
              "internalEventsDLQ",
              "Arn"
            ]
          },
          "maxReceiveCount": 5
        },
        "Tags": [
          {
            "Key": "SERVICE",
            "Value": "service-source-accounts"
          },
          {
            "Key": "STAGE",
            "Value": "local"
          }
        ]
      }
    },
    "internalEventsDLQ": {
      "Type": "AWS::SQS::Queue",
      "Properties": {
        "KmsMasterKeyId": "alias/aws/sqs",
        "QueueName": "service-source-accounts-local-internalEventsDLQ.fifo",
        "FifoQueue": true,
        "ContentBasedDeduplication": true,
        "MessageRetentionPeriod": 1209600,
        "Tags": [
          {
            "Key": "SERVICE",
            "Value": "service-source-accounts"
          },
          {
            "Key": "STAGE",
            "Value": "local"
          }
        ]
      }
    },
    "c1AccLifecycleEventsQueue": {
      "Type": "AWS::SQS::Queue",
      "Properties": {
        "MaximumMessageSize": 262144,
        "MessageRetentionPeriod": 345600,
        "QueueName": "service-source-accounts-local-c1AccLifecycleEventsQueue",
        "VisibilityTimeout": 60,
        "RedrivePolicy": {
          "deadLetterTargetArn": {
            "Fn::GetAtt": [
              "c1AccLifecycleEventsDLQ",
              "Arn"
            ]
          },
          "maxReceiveCount": 5
        },
        "Tags": [
          {
            "Key": "SERVICE",
            "Value": "service-source-accounts"
          },
          {
            "Key": "STAGE",
            "Value": "local"
          }
        ]
      }
    },
    "c1AccLifecycleEventsDLQ": {
      "Type": "AWS::SQS::Queue",
      "Properties": {
        "KmsMasterKeyId": {
          "Fn::GetAtt": [
            "c1AccLifecycleEventsQueueKmsKey",
            "Arn"
          ]
        },
        "QueueName": "service-source-accounts-local-c1AccLifecycleEventsQueueDLQ",
        "MessageRetentionPeriod": 1209600,
        "Tags": [
          {
            "Key": "SERVICE",
            "Value": "service-source-accounts"
          },
          {
            "Key": "STAGE",
            "Value": "local"
          }
        ]
      }
    },
    "c1AccLifecycleEventsQueuePolicy": {
      "Type": "AWS::SQS::QueuePolicy",
      "Properties": {
        "Queues": [
          {
            "Ref": "c1AccLifecycleEventsQueue"
          }
        ],
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Id": "allowAccessToC1AccLifecycleEvent",
          "Statement": [
            {
              "Sid": "c1AccLifecycleEventRulePolicy",
              "Effect": "Allow",
              "Action": [
                "sqs:SendMessage"
              ],
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "c1AccLifecycleEventsQueue",
                    "Arn"
                  ]
                }
              ],
              "Principal": {
                "Service": "events.amazonaws.com"
              },
              "Condition": {
                "ArnEquals": {
                  "aws:SourceArn": [
                    {
                      "Fn::GetAtt": [
                        "deleteAccountLifecycleRule",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "accountPendingDeletionRule",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "accountRestorationRule",
                        "Arn"
                      ]
                    }
                  ]
                }
              }
            }
          ]
        }
      }
    },
    "deleteAccountLifecycleRule": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "Name": "service-source-accounts-local-deleteAccLifecycleRule",
        "Description": "Forward delete account lifecycle events to the Source Accounts SQS queue",
        "EventPattern": {
          "source": [
            "com.trendmicro.cloudone.accounts"
          ],
          "detail-type": [
            "account-lifecycle.v1"
          ],
          "detail": {
            "eventType": [
              "deleted"
            ]
          }
        },
        "State": "ENABLED",
        "Targets": [
          {
            "Id": "deleteAccountLifecycleRule",
            "Arn": {
              "Fn::GetAtt": [
                "c1AccLifecycleEventsQueue",
                "Arn"
              ]
            }
          }
        ]
      }
    },
    "accountPendingDeletionRule": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "Name": "service-source-accounts-local-accPendingDeletionRule",
        "Description": "Forward pending-deletion account lifecycle events to the Source Accounts SQS queue",
        "EventPattern": {
          "source": [
            "com.trendmicro.cloudone.accounts"
          ],
          "detail-type": [
            "account-lifecycle.v1"
          ],
          "detail": {
            "eventType": [
              "updated"
            ],
            "account": {
              "state": [
                "pending-deletion"
              ]
            }
          }
        },
        "State": "ENABLED",
        "Targets": [
          {
            "Id": "accountPendingDeletionRule",
            "Arn": {
              "Fn::GetAtt": [
                "c1AccLifecycleEventsQueue",
                "Arn"
              ]
            }
          }
        ]
      }
    },
    "accountRestorationRule": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "Name": "service-source-accounts-local-accRestorationRule",
        "Description": "Forward account restore lifecycle events to the Source Accounts SQS queue",
        "EventPattern": {
          "source": [
            "com.trendmicro.cloudone.accounts"
          ],
          "detail-type": [
            "account-lifecycle.v1"
          ],
          "detail": {
            "eventType": [
              "reinstated"
            ]
          }
        },
        "State": "ENABLED",
        "Targets": [
          {
            "Id": "accountRestorationRule",
            "Arn": {
              "Fn::GetAtt": [
                "c1AccLifecycleEventsQueue",
                "Arn"
              ]
            }
          }
        ]
      }
    },
    "createGitHubIntRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Tags": [
          {
            "Key": "SERVICE",
            "Value": "service-source-accounts"
          },
          {
            "Key": "STAGE",
            "Value": "local"
          }
        ]
      }
    },
    "createGitHubIntTestRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Tags": [
          {
            "Key": "SERVICE",
            "Value": "service-source-accounts"
          },
          {
            "Key": "STAGE",
            "Value": "local"
          }
        ]
      }
    },
    "getIntegrationTestRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Tags": [
          {
            "Key": "SERVICE",
            "Value": "service-source-accounts"
          },
          {
            "Key": "STAGE",
            "Value": "local"
          }
        ]
      }
    },
    "deleteIntegrationTestRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Tags": [
          {
            "Key": "SERVICE",
            "Value": "service-source-accounts"
          },
          {
            "Key": "STAGE",
            "Value": "local"
          }
        ]
      }
    },
    "listIntegrationsTestRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Tags": [
          {
            "Key": "SERVICE",
            "Value": "service-source-accounts"
          },
          {
            "Key": "STAGE",
            "Value": "local"
          }
        ]
      }
    },
    "setStagePropertiesRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Tags": [
          {
            "Key": "SERVICE",
            "Value": "service-source-accounts"
          },
          {
            "Key": "STAGE",
            "Value": "local"
          }
        ]
      }
    },
    "createProviderAuthRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Tags": [
          {
            "Key": "SERVICE",
            "Value": "service-source-accounts"
          },
          {
            "Key": "STAGE",
            "Value": "local"
          }
        ]
      }
    },
    "createProviderAuthTestRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Tags": [
          {
            "Key": "SERVICE",
            "Value": "service-source-accounts"
          },
          {
            "Key": "STAGE",
            "Value": "local"
          }
        ]
      }
    },
    "githubWebhookRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Tags": [
          {
            "Key": "SERVICE",
            "Value": "service-source-accounts"
          },
          {
            "Key": "STAGE",
            "Value": "local"
          }
        ]
      }
    },
    "githubWebhookTestRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Tags": [
          {
            "Key": "SERVICE",
            "Value": "service-source-accounts"
          },
          {
            "Key": "STAGE",
            "Value": "local"
          }
        ]
      }
    },
    "internalEventsListenerRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Tags": [
          {
            "Key": "SERVICE",
            "Value": "service-source-accounts"
          },
          {
            "Key": "STAGE",
            "Value": "local"
          }
        ]
      }
    },
    "internalEventsListenerTestRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Tags": [
          {
            "Key": "SERVICE",
            "Value": "service-source-accounts"
          },
          {
            "Key": "STAGE",
            "Value": "local"
          }
        ]
      }
    },
    "getIntegrationRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Tags": [
          {
            "Key": "SERVICE",
            "Value": "service-source-accounts"
          },
          {
            "Key": "STAGE",
            "Value": "local"
          }
        ]
      }
    },
    "deleteIntegrationRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Tags": [
          {
            "Key": "SERVICE",
            "Value": "service-source-accounts"
          },
          {
            "Key": "STAGE",
            "Value": "local"
          }
        ]
      }
    },
    "listIntegrationsRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Tags": [
          {
            "Key": "SERVICE",
            "Value": "service-source-accounts"
          },
          {
            "Key": "STAGE",
            "Value": "local"
          }
        ]
      }
    },
    "listIntegrationsInternalRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Tags": [
          {
            "Key": "SERVICE",
            "Value": "service-source-accounts"
          },
          {
            "Key": "STAGE",
            "Value": "local"
          }
        ]
      }
    },
    "listIntegrationsInternalTestRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Tags": [
          {
            "Key": "SERVICE",
            "Value": "service-source-accounts"
          },
          {
            "Key": "STAGE",
            "Value": "local"
          }
        ]
      }
    },
    "modifyIntegrationRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Tags": [
          {
            "Key": "SERVICE",
            "Value": "service-source-accounts"
          },
          {
            "Key": "STAGE",
            "Value": "local"
          }
        ]
      }
    },
    "modifyIntegrationTestRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Tags": [
          {
            "Key": "SERVICE",
            "Value": "service-source-accounts"
          },
          {
            "Key": "STAGE",
            "Value": "local"
          }
        ]
      }
    },
    "publishLifecycleEventsRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "inline",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:DescribeStream",
                    "dynamodb:ListStreams",
                    "dynamodb:GetShardIterator",
                    "dynamodb:GetRecords"
                  ],
                  "Resource": {
                    "Fn::GetAtt": [
                      "sourceAccountsTable",
                      "StreamArn"
                    ]
                  }
                }
              ]
            }
          }
        ],
        "Tags": [
          {
            "Key": "SERVICE",
            "Value": "service-source-accounts"
          },
          {
            "Key": "STAGE",
            "Value": "local"
          }
        ]
      }
    },
    "publishLifecycleTestRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Tags": [
          {
            "Key": "SERVICE",
            "Value": "service-source-accounts"
          },
          {
            "Key": "STAGE",
            "Value": "local"
          }
        ]
      }
    },
    "c1AccEventsListenerRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Tags": [
          {
            "Key": "SERVICE",
            "Value": "service-source-accounts"
          },
          {
            "Key": "STAGE",
            "Value": "local"
          }
        ]
      }
    },
    "c1AccEventsListenerTestRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Tags": [
          {
            "Key": "SERVICE",
            "Value": "service-source-accounts"
          },
          {
            "Key": "STAGE",
            "Value": "local"
          }
        ]
      }
    },
    "canaryInternalAPIExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "Description": "CloudWatch Synthetics lambda execution role for running canaries",
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "MaxSessionDuration": 3600,
        "Path": "/service-role/",
        "Tags": [
          {
            "Key": "SERVICE",
            "Value": "service-source-accounts"
          },
          {
            "Key": "STAGE",
            "Value": "local"
          }
        ]
      }
    },
    "canaryExternalAPIExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "Description": "CloudWatch Synthetics lambda execution role for running canaries",
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "MaxSessionDuration": 3600,
        "Path": "/service-role/",
        "Tags": [
          {
            "Key": "SERVICE",
            "Value": "service-source-accounts"
          },
          {
            "Key": "STAGE",
            "Value": "local"
          }
        ]
      }
    },
    "createGitHubIntPolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "Roles": [
          {
            "Ref": "createGitHubIntRole"
          }
        ],
        "PolicyName": "createGitHubIntPolicy",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "kms:DescribeKey",
                "kms:Decrypt"
              ],
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "sourceAccountsTableEncryptionKey",
                    "Arn"
                  ]
                }
              ],
              "Condition": {
                "StringEquals": {
                  "kms:ViaService": {
                    "Fn::Sub": "dynamodb.${AWS::Region}.amazonaws.com"
                  }
                }
              }
            },
            {
              "Effect": "Allow",
              "Action": [
                "cloudwatch:PutMetricData"
              ],
              "Resource": "*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "xray:PutTraceSegments"
              ],
              "Resource": "*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents"
              ],
              "Resource": {
                "Fn::Sub": [
                  "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${lambda}:log-stream:*",
                  {
                    "lambda": {
                      "Ref": "CreateGitHubIntLambdaFunction"
                    }
                  }
                ]
              }
            },
            {
              "Effect": "Allow",
              "Action": [
                "dynamodb:PutItem",
                "dynamodb:GetItem",
                "dynamodb:UpdateItem"
              ],
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "sourceAccountsTable",
                    "Arn"
                  ]
                },
                {
                  "Fn::Sub": [
                    "arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}",
                    {
                      "tableName": "service-source-accounts-local-sourceAccountsGlobalTable"
                    }
                  ]
                }
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "secretsmanager:GetSecretValue"
              ],
              "Resource": [
                {
                  "Ref": "githubAppKey"
                },
                {
                  "Ref": "pendoTrackEventSharedSecretKey"
                }
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "kms:Decrypt"
              ],
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "githubKmsKey",
                    "Arn"
                  ]
                },
                {
                  "Fn::GetAtt": [
                    "pendoTrackEventSharedSecretKmsKey",
                    "Arn"
                  ]
                }
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "events:PutEvents"
              ],
              "Resource": {
                "Fn::Sub": [
                  "arn:${AWS::Partition}:events:${AWS::Region}:${awsAccountNumber}:event-bus/service-eventbridge-${AWS::Region}-alpha",
                  {
                    "awsAccountNumber": "000568857918"
                  }
                ]
              }
            }
          ]
        }
      }
    },
    "createProviderAuthPolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "Roles": [
          {
            "Ref": "createProviderAuthRole"
          }
        ],
        "PolicyName": "sourceAccountsTableReadOnlyPolicy",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents"
              ],
              "Resource": {
                "Fn::Sub": [
                  "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${lambda}:log-stream:*",
                  {
                    "lambda": {
                      "Ref": "CreateProviderAuthLambdaFunction"
                    }
                  }
                ]
              }
            },
            {
              "Effect": "Allow",
              "Action": [
                "dynamodb:GetItem",
                "dynamodb:Query"
              ],
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "sourceAccountsTable",
                    "Arn"
                  ]
                },
                {
                  "Fn::Join": [
                    "/",
                    [
                      {
                        "Fn::GetAtt": [
                          "sourceAccountsTable",
                          "Arn"
                        ]
                      },
                      "index",
                      "CloudOneAccountIndex"
                    ]
                  ]
                }
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "kms:DescribeKey",
                "kms:Decrypt"
              ],
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "sourceAccountsTableEncryptionKey",
                    "Arn"
                  ]
                }
              ],
              "Condition": {
                "StringEquals": {
                  "kms:ViaService": {
                    "Fn::Sub": "dynamodb.${AWS::Region}.amazonaws.com"
                  }
                }
              }
            },
            {
              "Effect": "Allow",
              "Action": [
                "secretsmanager:GetSecretValue"
              ],
              "Resource": {
                "Ref": "githubAppKey"
              }
            },
            {
              "Effect": "Allow",
              "Action": [
                "kms:Decrypt"
              ],
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "githubKmsKey",
                    "Arn"
                  ]
                }
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "xray:PutTraceSegments"
              ],
              "Resource": "*"
            }
          ]
        }
      }
    },
    "githubWebhookPolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "Roles": [
          {
            "Ref": "githubWebhookRole"
          }
        ],
        "PolicyName": "githubWebhookPolicy",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "dynamodb:GetItem"
              ],
              "Resource": [
                {
                  "Fn::Sub": [
                    "arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}",
                    {
                      "tableName": "service-source-accounts-local-sourceAccountsGlobalTable"
                    }
                  ]
                }
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents"
              ],
              "Resource": {
                "Fn::Sub": [
                  "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${lambda}:log-stream:*",
                  {
                    "lambda": {
                      "Ref": "GithubWebhookLambdaFunction"
                    }
                  }
                ]
              }
            },
            {
              "Effect": "Allow",
              "Action": [
                "sqs:SendMessage"
              ],
              "Resource": {
                "Fn::Sub": [
                  "arn:${AWS::Partition}:sqs:*:${AWS::AccountId}:${queueName}",
                  {
                    "queueName": "service-source-accounts-local-internalEventsQueue.fifo"
                  }
                ]
              }
            },
            {
              "Effect": "Allow",
              "Action": [
                "events:PutEvents"
              ],
              "Resource": {
                "Fn::Sub": [
                  "arn:${AWS::Partition}:events:*:${awsAccountNumber}:event-bus/service-eventbridge-*-alpha",
                  {
                    "awsAccountNumber": "000568857918"
                  }
                ]
              }
            },
            {
              "Effect": "Allow",
              "Action": [
                "secretsmanager:GetSecretValue"
              ],
              "Resource": {
                "Ref": "githubWebhookKey"
              }
            },
            {
              "Effect": "Allow",
              "Action": [
                "kms:Decrypt"
              ],
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "githubWebhookKmsKey",
                    "Arn"
                  ]
                }
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "xray:PutTraceSegments"
              ],
              "Resource": "*"
            }
          ]
        }
      }
    },
    "internalEventsListenerPolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "Roles": [
          {
            "Ref": "internalEventsListenerRole"
          }
        ],
        "PolicyName": "internalEventsListenerPolicy",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents"
              ],
              "Resource": {
                "Fn::Sub": [
                  "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${lambda}:log-stream:*",
                  {
                    "lambda": {
                      "Ref": "InternalEventsListenerLambdaFunction"
                    }
                  }
                ]
              }
            },
            {
              "Effect": "Allow",
              "Action": [
                "sqs:ReceiveMessage",
                "sqs:DeleteMessage",
                "sqs:GetQueueAttributes"
              ],
              "Resource": {
                "Fn::GetAtt": [
                  "internalEventsQueue",
                  "Arn"
                ]
              }
            },
            {
              "Effect": "Allow",
              "Action": [
                "kms:Decrypt",
                "kms:GenerateDataKey"
              ],
              "Resource": {
                "Fn::GetAtt": [
                  "sqsKmsKey",
                  "Arn"
                ]
              }
            },
            {
              "Effect": "Allow",
              "Action": [
                "dynamodb:Query",
                "dynamodb:UpdateItem"
              ],
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "sourceAccountsTable",
                    "Arn"
                  ]
                },
                {
                  "Fn::Join": [
                    "/",
                    [
                      {
                        "Fn::GetAtt": [
                          "sourceAccountsTable",
                          "Arn"
                        ]
                      },
                      "index",
                      "CloudOneAccountIndex"
                    ]
                  ]
                },
                {
                  "Fn::Sub": [
                    "arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}",
                    {
                      "tableName": "service-source-accounts-local-sourceAccountsGlobalTable"
                    }
                  ]
                }
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "kms:DescribeKey",
                "kms:Decrypt"
              ],
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "sourceAccountsTableEncryptionKey",
                    "Arn"
                  ]
                }
              ],
              "Condition": {
                "StringEquals": {
                  "kms:ViaService": {
                    "Fn::Sub": "dynamodb.${AWS::Region}.amazonaws.com"
                  }
                }
              }
            },
            {
              "Effect": "Allow",
              "Action": [
                "xray:PutTraceSegments"
              ],
              "Resource": "*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "secretsmanager:GetSecretValue"
              ],
              "Resource": {
                "Ref": "pendoTrackEventSharedSecretKey"
              }
            },
            {
              "Effect": "Allow",
              "Action": [
                "kms:Decrypt"
              ],
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "pendoTrackEventSharedSecretKmsKey",
                    "Arn"
                  ]
                }
              ]
            }
          ]
        }
      }
    },
    "internalEventsListenerTestPolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "Roles": [
          {
            "Ref": "internalEventsListenerTestRole"
          }
        ],
        "PolicyName": "internalEventsListenerTestPolicy",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents"
              ],
              "Resource": {
                "Fn::Sub": [
                  "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${lambda}:log-stream:*",
                  {
                    "lambda": {
                      "Ref": "InternalEventsListTestLambdaFunction"
                    }
                  }
                ]
              }
            },
            {
              "Effect": "Allow",
              "Action": [
                "lambda:InvokeFunction"
              ],
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "InternalEventsListenerLambdaFunction",
                    "Arn"
                  ]
                }
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "cloudformation:DescribeStacks"
              ],
              "Resource": "*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "sts:AssumeRole"
              ],
              "Resource": [
                "arn:aws:iam::787388474266:role/orchestrator-put-job-result-role"
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "dynamodb:DeleteItem",
                "dynamodb:GetItem",
                "dynamodb:PutItem",
                "dynamodb:Query"
              ],
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "sourceAccountsTable",
                    "Arn"
                  ]
                },
                {
                  "Fn::Join": [
                    "/",
                    [
                      {
                        "Fn::GetAtt": [
                          "sourceAccountsTable",
                          "Arn"
                        ]
                      },
                      "index",
                      "CloudOneAccountIndex"
                    ]
                  ]
                },
                {
                  "Fn::Sub": [
                    "arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}",
                    {
                      "tableName": "service-source-accounts-local-sourceAccountsGlobalTable"
                    }
                  ]
                }
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "kms:DescribeKey",
                "kms:Decrypt"
              ],
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "sourceAccountsTableEncryptionKey",
                    "Arn"
                  ]
                }
              ],
              "Condition": {
                "StringEquals": {
                  "kms:ViaService": {
                    "Fn::Sub": "dynamodb.${AWS::Region}.amazonaws.com"
                  }
                }
              }
            }
          ]
        }
      }
    },
    "c1AccEventsListenerPolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "Roles": [
          {
            "Ref": "c1AccEventsListenerRole"
          }
        ],
        "PolicyName": "c1AccEventsListenerPolicy",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "xray:PutTraceSegments"
              ],
              "Resource": "*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents"
              ],
              "Resource": {
                "Fn::Sub": [
                  "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${lambda}:log-stream:*",
                  {
                    "lambda": {
                      "Ref": "C1AccEventsListenerLambdaFunction"
                    }
                  }
                ]
              }
            },
            {
              "Effect": "Allow",
              "Action": [
                "sqs:ReceiveMessage",
                "sqs:DeleteMessage",
                "sqs:GetQueueAttributes"
              ],
              "Resource": {
                "Fn::GetAtt": [
                  "c1AccLifecycleEventsQueue",
                  "Arn"
                ]
              }
            },
            {
              "Effect": "Allow",
              "Action": [
                "kms:Decrypt",
                "kms:GenerateDataKey"
              ],
              "Resource": {
                "Fn::GetAtt": [
                  "c1AccLifecycleEventsQueueKmsKey",
                  "Arn"
                ]
              }
            },
            {
              "Effect": "Allow",
              "Action": [
                "dynamodb:Query",
                "dynamodb:DeleteItem",
                "dynamodb:UpdateItem"
              ],
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "sourceAccountsTable",
                    "Arn"
                  ]
                },
                {
                  "Fn::Join": [
                    "/",
                    [
                      {
                        "Fn::GetAtt": [
                          "sourceAccountsTable",
                          "Arn"
                        ]
                      },
                      "index",
                      "CloudOneAccountIndex"
                    ]
                  ]
                },
                {
                  "Fn::Sub": [
                    "arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}",
                    {
                      "tableName": "service-source-accounts-local-sourceAccountsGlobalTable"
                    }
                  ]
                }
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "kms:DescribeKey",
                "kms:Decrypt"
              ],
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "sourceAccountsTableEncryptionKey",
                    "Arn"
                  ]
                }
              ]
            }
          ]
        }
      }
    },
    "c1AccEventsListenerTestPolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "Roles": [
          {
            "Ref": "c1AccEventsListenerTestRole"
          }
        ],
        "PolicyName": "c1AccEventsListenerTestPolicy",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents"
              ],
              "Resource": {
                "Fn::Sub": [
                  "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${lambda}:log-stream:*",
                  {
                    "lambda": {
                      "Ref": "C1AccEventsListenerTestLambdaFunction"
                    }
                  }
                ]
              }
            },
            {
              "Effect": "Allow",
              "Action": [
                "lambda:InvokeFunction"
              ],
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "C1AccEventsListenerLambdaFunction",
                    "Arn"
                  ]
                }
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "cloudformation:DescribeStacks"
              ],
              "Resource": "*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "sts:AssumeRole"
              ],
              "Resource": [
                "arn:aws:iam::787388474266:role/orchestrator-put-job-result-role"
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "dynamodb:DeleteItem",
                "dynamodb:GetItem",
                "dynamodb:PutItem",
                "dynamodb:Query"
              ],
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "sourceAccountsTable",
                    "Arn"
                  ]
                },
                {
                  "Fn::Sub": [
                    "arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}",
                    {
                      "tableName": "service-source-accounts-local-sourceAccountsGlobalTable"
                    }
                  ]
                },
                {
                  "Fn::Join": [
                    "/",
                    [
                      {
                        "Fn::GetAtt": [
                          "sourceAccountsTable",
                          "Arn"
                        ]
                      },
                      "index",
                      "CloudOneAccountIndex"
                    ]
                  ]
                }
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "kms:DescribeKey",
                "kms:Decrypt"
              ],
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "sourceAccountsTableEncryptionKey",
                    "Arn"
                  ]
                }
              ],
              "Condition": {
                "StringEquals": {
                  "kms:ViaService": {
                    "Fn::Sub": "dynamodb.${AWS::Region}.amazonaws.com"
                  }
                }
              }
            }
          ]
        }
      }
    },
    "createGitHubIntTestPolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "Roles": [
          {
            "Ref": "createGitHubIntTestRole"
          }
        ],
        "PolicyName": "createIntPipelineTest",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents"
              ],
              "Resource": {
                "Fn::Sub": [
                  "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${lambda}:log-stream:*",
                  {
                    "lambda": {
                      "Ref": "CreateGitHubIntTestLambdaFunction"
                    }
                  }
                ]
              }
            },
            {
              "Effect": "Allow",
              "Action": [
                "lambda:InvokeFunction"
              ],
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "CreateGitHubIntLambdaFunction",
                    "Arn"
                  ]
                }
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "cloudformation:DescribeStacks"
              ],
              "Resource": "*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "sts:AssumeRole"
              ],
              "Resource": [
                "arn:aws:iam::787388474266:role/orchestrator-put-job-result-role"
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "dynamodb:DeleteItem"
              ],
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "sourceAccountsTable",
                    "Arn"
                  ]
                },
                {
                  "Fn::Sub": [
                    "arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}",
                    {
                      "tableName": "service-source-accounts-local-sourceAccountsGlobalTable"
                    }
                  ]
                }
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "kms:DescribeKey",
                "kms:Decrypt"
              ],
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "sourceAccountsTableEncryptionKey",
                    "Arn"
                  ]
                }
              ],
              "Condition": {
                "StringEquals": {
                  "kms:ViaService": {
                    "Fn::Sub": "dynamodb.${AWS::Region}.amazonaws.com"
                  }
                }
              }
            }
          ]
        }
      }
    },
    "createProviderAuthTestPolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "Roles": [
          {
            "Ref": "createProviderAuthTestRole"
          }
        ],
        "PolicyName": "createProviderAuthPipelineTest",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents"
              ],
              "Resource": {
                "Fn::Sub": [
                  "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${lambda}:log-stream:*",
                  {
                    "lambda": {
                      "Ref": "CreateProviderAuthTestLambdaFunction"
                    }
                  }
                ]
              }
            },
            {
              "Effect": "Allow",
              "Action": [
                "lambda:InvokeFunction"
              ],
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "CreateProviderAuthLambdaFunction",
                    "Arn"
                  ]
                }
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "cloudformation:DescribeStacks"
              ],
              "Resource": "*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "sts:AssumeRole"
              ],
              "Resource": [
                "arn:aws:iam::787388474266:role/orchestrator-put-job-result-role"
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "dynamodb:GetItem",
                "dynamodb:DeleteItem",
                "dynamodb:PutItem",
                "dynamodb:Query"
              ],
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "sourceAccountsTable",
                    "Arn"
                  ]
                },
                {
                  "Fn::Join": [
                    "/",
                    [
                      {
                        "Fn::GetAtt": [
                          "sourceAccountsTable",
                          "Arn"
                        ]
                      },
                      "index",
                      "CloudOneAccountIndex"
                    ]
                  ]
                },
                {
                  "Fn::Sub": [
                    "arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}",
                    {
                      "tableName": "service-source-accounts-local-sourceAccountsGlobalTable"
                    }
                  ]
                }
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "kms:DescribeKey",
                "kms:Decrypt"
              ],
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "sourceAccountsTableEncryptionKey",
                    "Arn"
                  ]
                }
              ],
              "Condition": {
                "StringEquals": {
                  "kms:ViaService": {
                    "Fn::Sub": "dynamodb.${AWS::Region}.amazonaws.com"
                  }
                }
              }
            }
          ]
        }
      }
    },
    "githubWebhookTestPolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "Roles": [
          {
            "Ref": "githubWebhookTestRole"
          }
        ],
        "PolicyName": "githubWebhookPipelineTest",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents"
              ],
              "Resource": {
                "Fn::Sub": [
                  "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${lambda}:log-stream:*",
                  {
                    "lambda": {
                      "Ref": "GithubWebhookTestLambdaFunction"
                    }
                  }
                ]
              }
            },
            {
              "Effect": "Allow",
              "Action": [
                "lambda:InvokeFunction"
              ],
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "GithubWebhookLambdaFunction",
                    "Arn"
                  ]
                }
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "cloudformation:DescribeStacks"
              ],
              "Resource": "*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "sts:AssumeRole"
              ],
              "Resource": [
                "arn:aws:iam::787388474266:role/orchestrator-put-job-result-role"
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "dynamodb:DeleteItem",
                "dynamodb:PutItem",
                "dynamodb:GetItem",
                "dynamodb:Query",
                "dynamodb:UpdateItem"
              ],
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "sourceAccountsTable",
                    "Arn"
                  ]
                },
                {
                  "Fn::Join": [
                    "/",
                    [
                      {
                        "Fn::GetAtt": [
                          "sourceAccountsTable",
                          "Arn"
                        ]
                      },
                      "index",
                      "CloudOneAccountIndex"
                    ]
                  ]
                },
                {
                  "Fn::Sub": [
                    "arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}",
                    {
                      "tableName": "service-source-accounts-local-sourceAccountsGlobalTable"
                    }
                  ]
                }
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "kms:DescribeKey",
                "kms:Decrypt"
              ],
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "sourceAccountsTableEncryptionKey",
                    "Arn"
                  ]
                }
              ],
              "Condition": {
                "StringEquals": {
                  "kms:ViaService": {
                    "Fn::Sub": "dynamodb.${AWS::Region}.amazonaws.com"
                  }
                }
              }
            },
            {
              "Effect": "Allow",
              "Action": [
                "secretsmanager:GetSecretValue"
              ],
              "Resource": {
                "Ref": "githubWebhookKey"
              }
            },
            {
              "Effect": "Allow",
              "Action": [
                "kms:Decrypt"
              ],
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "githubWebhookKmsKey",
                    "Arn"
                  ]
                }
              ]
            }
          ]
        }
      }
    },
    "deleteIntegrationTestPolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "Roles": [
          {
            "Ref": "deleteIntegrationTestRole"
          }
        ],
        "PolicyName": "deleteIntegrationTest",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents"
              ],
              "Resource": {
                "Fn::Sub": [
                  "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${lambda}:log-stream:*",
                  {
                    "lambda": {
                      "Ref": "DeleteIntegrationTestLambdaFunction"
                    }
                  }
                ]
              }
            },
            {
              "Effect": "Allow",
              "Action": [
                "lambda:InvokeFunction"
              ],
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "DeleteIntegrationLambdaFunction",
                    "Arn"
                  ]
                }
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "cloudformation:DescribeStacks"
              ],
              "Resource": "*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "sts:AssumeRole"
              ],
              "Resource": [
                "arn:aws:iam::787388474266:role/orchestrator-put-job-result-role"
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "dynamodb:GetItem",
                "dynamodb:DeleteItem",
                "dynamodb:PutItem",
                "dynamodb:Query"
              ],
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "sourceAccountsTable",
                    "Arn"
                  ]
                },
                {
                  "Fn::Join": [
                    "/",
                    [
                      {
                        "Fn::GetAtt": [
                          "sourceAccountsTable",
                          "Arn"
                        ]
                      },
                      "index",
                      "CloudOneAccountIndex"
                    ]
                  ]
                },
                {
                  "Fn::Sub": [
                    "arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}",
                    {
                      "tableName": "service-source-accounts-local-sourceAccountsGlobalTable"
                    }
                  ]
                }
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "kms:DescribeKey",
                "kms:Decrypt"
              ],
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "sourceAccountsTableEncryptionKey",
                    "Arn"
                  ]
                }
              ],
              "Condition": {
                "StringEquals": {
                  "kms:ViaService": {
                    "Fn::Sub": "dynamodb.${AWS::Region}.amazonaws.com"
                  }
                }
              }
            }
          ]
        }
      }
    },
    "listIntegrationsTestPolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "Roles": [
          {
            "Ref": "listIntegrationsTestRole"
          }
        ],
        "PolicyName": "listIntegrationsTest",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents"
              ],
              "Resource": {
                "Fn::Sub": [
                  "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${lambda}:log-stream:*",
                  {
                    "lambda": {
                      "Ref": "ListIntegrationsTestLambdaFunction"
                    }
                  }
                ]
              }
            },
            {
              "Effect": "Allow",
              "Action": [
                "lambda:InvokeFunction"
              ],
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "ListIntegrationsLambdaFunction",
                    "Arn"
                  ]
                }
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "cloudformation:DescribeStacks"
              ],
              "Resource": "*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "sts:AssumeRole"
              ],
              "Resource": [
                "arn:aws:iam::787388474266:role/orchestrator-put-job-result-role"
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "dynamodb:DeleteItem",
                "dynamodb:GetItem",
                "dynamodb:PutItem",
                "dynamodb:Query"
              ],
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "sourceAccountsTable",
                    "Arn"
                  ]
                },
                {
                  "Fn::Join": [
                    "/",
                    [
                      {
                        "Fn::GetAtt": [
                          "sourceAccountsTable",
                          "Arn"
                        ]
                      },
                      "index",
                      "CloudOneAccountIndex"
                    ]
                  ]
                },
                {
                  "Fn::Sub": [
                    "arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}",
                    {
                      "tableName": "service-source-accounts-local-sourceAccountsGlobalTable"
                    }
                  ]
                }
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "kms:DescribeKey",
                "kms:Decrypt"
              ],
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "sourceAccountsTableEncryptionKey",
                    "Arn"
                  ]
                }
              ],
              "Condition": {
                "StringEquals": {
                  "kms:ViaService": {
                    "Fn::Sub": "dynamodb.${AWS::Region}.amazonaws.com"
                  }
                }
              }
            }
          ]
        }
      }
    },
    "listIntegrationsInternalTestPolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "Roles": [
          {
            "Ref": "listIntegrationsInternalTestRole"
          }
        ],
        "PolicyName": "listIntegrationsInternalTestPolicy",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents"
              ],
              "Resource": {
                "Fn::Sub": [
                  "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${lambda}:log-stream:*",
                  {
                    "lambda": {
                      "Ref": "ListIntegIntlTestLambdaFunction"
                    }
                  }
                ]
              }
            },
            {
              "Effect": "Allow",
              "Action": [
                "lambda:InvokeFunction"
              ],
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "ListIntegrationsIntlLambdaFunction",
                    "Arn"
                  ]
                }
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "cloudformation:DescribeStacks"
              ],
              "Resource": "*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "sts:AssumeRole"
              ],
              "Resource": [
                "arn:aws:iam::787388474266:role/orchestrator-put-job-result-role"
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "dynamodb:DeleteItem",
                "dynamodb:PutItem",
                "dynamodb:GetItem",
                "dynamodb:Query"
              ],
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "sourceAccountsTable",
                    "Arn"
                  ]
                },
                {
                  "Fn::Join": [
                    "/",
                    [
                      {
                        "Fn::GetAtt": [
                          "sourceAccountsTable",
                          "Arn"
                        ]
                      },
                      "index",
                      "CloudOneAccountIndex"
                    ]
                  ]
                },
                {
                  "Fn::Sub": [
                    "arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}",
                    {
                      "tableName": "service-source-accounts-local-sourceAccountsGlobalTable"
                    }
                  ]
                }
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "kms:DescribeKey",
                "kms:Decrypt"
              ],
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "sourceAccountsTableEncryptionKey",
                    "Arn"
                  ]
                }
              ],
              "Condition": {
                "StringEquals": {
                  "kms:ViaService": {
                    "Fn::Sub": "dynamodb.${AWS::Region}.amazonaws.com"
                  }
                }
              }
            }
          ]
        }
      }
    },
    "setStagePropertiesPolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "Roles": [
          {
            "Ref": "setStagePropertiesRole"
          }
        ],
        "PolicyName": "setStagePropertiesPolicy",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents"
              ],
              "Resource": {
                "Fn::Sub": [
                  "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${lambda}:log-stream:*",
                  {
                    "lambda": {
                      "Ref": "SetStagePropertiesLambdaFunction"
                    }
                  }
                ]
              }
            },
            {
              "Effect": "Allow",
              "Action": [
                "apigateway:PATCH"
              ],
              "Resource": [
                {
                  "Fn::Sub": "arn:${AWS::Partition}:apigateway:${AWS::Region}::/restapis/${ApiGatewayRestApi}/stages/*"
                }
              ]
            }
          ]
        }
      }
    },
    "getIntegrationPolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "Roles": [
          {
            "Ref": "getIntegrationRole"
          }
        ],
        "PolicyName": "getIntegrationLogStreamPolicy",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents"
              ],
              "Resource": {
                "Fn::Sub": [
                  "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${lambda}:log-stream:*",
                  {
                    "lambda": {
                      "Ref": "GetIntegrationLambdaFunction"
                    }
                  }
                ]
              }
            },
            {
              "Effect": "Allow",
              "Action": [
                "kms:DescribeKey",
                "kms:Decrypt"
              ],
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "sourceAccountsTableEncryptionKey",
                    "Arn"
                  ]
                }
              ],
              "Condition": {
                "StringEquals": {
                  "kms:ViaService": {
                    "Fn::Sub": "dynamodb.${AWS::Region}.amazonaws.com"
                  }
                }
              }
            },
            {
              "Effect": "Allow",
              "Action": [
                "dynamodb:Query"
              ],
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "sourceAccountsTable",
                    "Arn"
                  ]
                },
                {
                  "Fn::Join": [
                    "/",
                    [
                      {
                        "Fn::GetAtt": [
                          "sourceAccountsTable",
                          "Arn"
                        ]
                      },
                      "index",
                      "CloudOneAccountIndex"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "/",
                    [
                      {
                        "Fn::GetAtt": [
                          "sourceAccountsTable",
                          "Arn"
                        ]
                      }
                    ]
                  ]
                }
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "xray:PutTraceSegments"
              ],
              "Resource": "*"
            }
          ]
        }
      }
    },
    "deleteIntegrationPolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "Roles": [
          {
            "Ref": "deleteIntegrationRole"
          }
        ],
        "PolicyName": "deleteIntegrationLogStreamPolicy",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents"
              ],
              "Resource": {
                "Fn::Sub": [
                  "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${lambda}:log-stream:*",
                  {
                    "lambda": {
                      "Ref": "DeleteIntegrationLambdaFunction"
                    }
                  }
                ]
              }
            },
            {
              "Effect": "Allow",
              "Action": [
                "kms:DescribeKey",
                "kms:Decrypt"
              ],
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "sourceAccountsTableEncryptionKey",
                    "Arn"
                  ]
                }
              ],
              "Condition": {
                "StringEquals": {
                  "kms:ViaService": {
                    "Fn::Sub": "dynamodb.${AWS::Region}.amazonaws.com"
                  }
                }
              }
            },
            {
              "Effect": "Allow",
              "Action": [
                "dynamodb:Query",
                "dynamodb:UpdateItem"
              ],
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "sourceAccountsTable",
                    "Arn"
                  ]
                },
                {
                  "Fn::Join": [
                    "/",
                    [
                      {
                        "Fn::GetAtt": [
                          "sourceAccountsTable",
                          "Arn"
                        ]
                      },
                      "index",
                      "CloudOneAccountIndex"
                    ]
                  ]
                },
                {
                  "Fn::Sub": [
                    "arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}",
                    {
                      "tableName": "service-source-accounts-local-sourceAccountsGlobalTable"
                    }
                  ]
                }
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "events:PutEvents"
              ],
              "Resource": {
                "Fn::Sub": [
                  "arn:${AWS::Partition}:events:${AWS::Region}:${awsAccountNumber}:event-bus/service-eventbridge-${AWS::Region}-alpha",
                  {
                    "awsAccountNumber": "000568857918"
                  }
                ]
              }
            },
            {
              "Effect": "Allow",
              "Action": [
                "xray:PutTraceSegments"
              ],
              "Resource": "*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "secretsmanager:GetSecretValue"
              ],
              "Resource": {
                "Ref": "pendoTrackEventSharedSecretKey"
              }
            },
            {
              "Effect": "Allow",
              "Action": [
                "kms:Decrypt"
              ],
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "pendoTrackEventSharedSecretKmsKey",
                    "Arn"
                  ]
                }
              ]
            }
          ]
        }
      }
    },
    "listIntegrationsPolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "Roles": [
          {
            "Ref": "listIntegrationsRole"
          }
        ],
        "PolicyName": "listIntegrationsLogStreamPolicy",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents"
              ],
              "Resource": {
                "Fn::Sub": [
                  "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${lambda}:log-stream:*",
                  {
                    "lambda": {
                      "Ref": "ListIntegrationsLambdaFunction"
                    }
                  }
                ]
              }
            },
            {
              "Effect": "Allow",
              "Action": [
                "kms:DescribeKey",
                "kms:Decrypt"
              ],
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "sourceAccountsTableEncryptionKey",
                    "Arn"
                  ]
                }
              ],
              "Condition": {
                "StringEquals": {
                  "kms:ViaService": {
                    "Fn::Sub": "dynamodb.${AWS::Region}.amazonaws.com"
                  }
                }
              }
            },
            {
              "Effect": "Allow",
              "Action": [
                "dynamodb:Query",
                "dynamodb:PutItem",
                "dynamodb:GetItem"
              ],
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "sourceAccountsTable",
                    "Arn"
                  ]
                },
                {
                  "Fn::Join": [
                    "/",
                    [
                      {
                        "Fn::GetAtt": [
                          "sourceAccountsTable",
                          "Arn"
                        ]
                      },
                      "index",
                      "CloudOneAccountIndex"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "/",
                    [
                      {
                        "Fn::GetAtt": [
                          "sourceAccountsTable",
                          "Arn"
                        ]
                      }
                    ]
                  ]
                }
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "xray:PutTraceSegments"
              ],
              "Resource": "*"
            }
          ]
        }
      }
    },
    "listIntegrationsInternalPolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "Roles": [
          {
            "Ref": "listIntegrationsInternalRole"
          }
        ],
        "PolicyName": "listIntegrationsInternalLogStreamPolicy",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents"
              ],
              "Resource": {
                "Fn::Sub": [
                  "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${lambda}:log-stream:*",
                  {
                    "lambda": {
                      "Ref": "ListIntegrationsIntlLambdaFunction"
                    }
                  }
                ]
              }
            },
            {
              "Effect": "Allow",
              "Action": [
                "kms:DescribeKey",
                "kms:Decrypt"
              ],
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "sourceAccountsTableEncryptionKey",
                    "Arn"
                  ]
                }
              ],
              "Condition": {
                "StringEquals": {
                  "kms:ViaService": {
                    "Fn::Sub": "dynamodb.${AWS::Region}.amazonaws.com"
                  }
                }
              }
            },
            {
              "Effect": "Allow",
              "Action": [
                "dynamodb:Query",
                "dynamodb:PutItem",
                "dynamodb:GetItem"
              ],
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "sourceAccountsTable",
                    "Arn"
                  ]
                },
                {
                  "Fn::Join": [
                    "/",
                    [
                      {
                        "Fn::GetAtt": [
                          "sourceAccountsTable",
                          "Arn"
                        ]
                      },
                      "index",
                      "CloudOneAccountIndex"
                    ]
                  ]
                }
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "xray:PutTraceSegments"
              ],
              "Resource": "*"
            }
          ]
        }
      }
    },
    "modifyIntegrationPolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "Roles": [
          {
            "Ref": "modifyIntegrationRole"
          }
        ],
        "PolicyName": "modifyIntegrationLogStreamPolicy",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents"
              ],
              "Resource": {
                "Fn::Sub": [
                  "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${lambda}:log-stream:*",
                  {
                    "lambda": {
                      "Ref": "ModifyIntegrationLambdaFunction"
                    }
                  }
                ]
              }
            },
            {
              "Effect": "Allow",
              "Action": [
                "kms:DescribeKey",
                "kms:Decrypt"
              ],
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "sourceAccountsTableEncryptionKey",
                    "Arn"
                  ]
                }
              ],
              "Condition": {
                "StringEquals": {
                  "kms:ViaService": {
                    "Fn::Sub": "dynamodb.${AWS::Region}.amazonaws.com"
                  }
                }
              }
            },
            {
              "Effect": "Allow",
              "Action": [
                "dynamodb:Query",
                "dynamodb:UpdateItem"
              ],
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "sourceAccountsTable",
                    "Arn"
                  ]
                },
                {
                  "Fn::Join": [
                    "/",
                    [
                      {
                        "Fn::GetAtt": [
                          "sourceAccountsTable",
                          "Arn"
                        ]
                      },
                      "index",
                      "CloudOneAccountIndex"
                    ]
                  ]
                }
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "events:PutEvents"
              ],
              "Resource": {
                "Fn::Sub": [
                  "arn:${AWS::Partition}:events:${AWS::Region}:${awsAccountNumber}:event-bus/service-eventbridge-${AWS::Region}-alpha",
                  {
                    "awsAccountNumber": "000568857918"
                  }
                ]
              }
            },
            {
              "Effect": "Allow",
              "Action": [
                "xray:PutTraceSegments"
              ],
              "Resource": "*"
            }
          ]
        }
      }
    },
    "modifyIntegrationTestPolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "Roles": [
          {
            "Ref": "modifyIntegrationTestRole"
          }
        ],
        "PolicyName": "modifyIntegrationPipelineTest",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents"
              ],
              "Resource": {
                "Fn::Sub": [
                  "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${lambda}:log-stream:*",
                  {
                    "lambda": {
                      "Ref": "ModifyIntegrationTestLambdaFunction"
                    }
                  }
                ]
              }
            },
            {
              "Effect": "Allow",
              "Action": [
                "lambda:InvokeFunction"
              ],
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "ModifyIntegrationLambdaFunction",
                    "Arn"
                  ]
                }
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "cloudformation:DescribeStacks"
              ],
              "Resource": "*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "sts:AssumeRole"
              ],
              "Resource": [
                "arn:aws:iam::787388474266:role/orchestrator-put-job-result-role"
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "dynamodb:DeleteItem",
                "dynamodb:PutItem",
                "dynamodb:GetItem",
                "dynamodb:Query"
              ],
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "sourceAccountsTable",
                    "Arn"
                  ]
                },
                {
                  "Fn::Join": [
                    "/",
                    [
                      {
                        "Fn::GetAtt": [
                          "sourceAccountsTable",
                          "Arn"
                        ]
                      },
                      "index",
                      "CloudOneAccountIndex"
                    ]
                  ]
                },
                {
                  "Fn::Sub": [
                    "arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}",
                    {
                      "tableName": "service-source-accounts-local-sourceAccountsGlobalTable"
                    }
                  ]
                }
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "kms:DescribeKey",
                "kms:Decrypt"
              ],
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "sourceAccountsTableEncryptionKey",
                    "Arn"
                  ]
                }
              ],
              "Condition": {
                "StringEquals": {
                  "kms:ViaService": {
                    "Fn::Sub": "dynamodb.${AWS::Region}.amazonaws.com"
                  }
                }
              }
            }
          ]
        }
      }
    },
    "getIntegrationTestPolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "Roles": [
          {
            "Ref": "getIntegrationTestRole"
          }
        ],
        "PolicyName": "getIntegrationPipelineTest",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents"
              ],
              "Resource": {
                "Fn::Sub": [
                  "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${lambda}:log-stream:*",
                  {
                    "lambda": {
                      "Ref": "GetIntegrationTestLambdaFunction"
                    }
                  }
                ]
              }
            },
            {
              "Effect": "Allow",
              "Action": [
                "lambda:InvokeFunction"
              ],
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "GetIntegrationLambdaFunction",
                    "Arn"
                  ]
                }
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "cloudformation:DescribeStacks"
              ],
              "Resource": "*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "sts:AssumeRole"
              ],
              "Resource": [
                "arn:aws:iam::787388474266:role/orchestrator-put-job-result-role"
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "dynamodb:DeleteItem",
                "dynamodb:PutItem",
                "dynamodb:GetItem",
                "dynamodb:Query"
              ],
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "sourceAccountsTable",
                    "Arn"
                  ]
                },
                {
                  "Fn::Join": [
                    "/",
                    [
                      {
                        "Fn::GetAtt": [
                          "sourceAccountsTable",
                          "Arn"
                        ]
                      },
                      "index",
                      "CloudOneAccountIndex"
                    ]
                  ]
                },
                {
                  "Fn::Sub": [
                    "arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}",
                    {
                      "tableName": "service-source-accounts-local-sourceAccountsGlobalTable"
                    }
                  ]
                }
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "kms:DescribeKey",
                "kms:Decrypt"
              ],
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "sourceAccountsTableEncryptionKey",
                    "Arn"
                  ]
                }
              ],
              "Condition": {
                "StringEquals": {
                  "kms:ViaService": {
                    "Fn::Sub": "dynamodb.${AWS::Region}.amazonaws.com"
                  }
                }
              }
            }
          ]
        }
      }
    },
    "publishLifecycleEventsPolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "Roles": [
          {
            "Ref": "publishLifecycleEventsRole"
          }
        ],
        "PolicyName": "publishLifecycleEvents",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents"
              ],
              "Resource": {
                "Fn::Sub": [
                  "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${lambda}:log-stream:*",
                  {
                    "lambda": {
                      "Ref": "PublishLifecycleEventsLambdaFunction"
                    }
                  }
                ]
              }
            },
            {
              "Effect": "Allow",
              "Action": [
                "kms:DescribeKey",
                "kms:Decrypt"
              ],
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "sourceAccountsTableEncryptionKey",
                    "Arn"
                  ]
                }
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "events:PutEvents"
              ],
              "Resource": {
                "Fn::Sub": [
                  "arn:${AWS::Partition}:events:*:${awsAccountNumber}:event-bus/service-eventbridge-*-alpha",
                  {
                    "awsAccountNumber": "000568857918"
                  }
                ]
              }
            }
          ]
        }
      }
    },
    "publishLifecycleTestPolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "Roles": [
          {
            "Ref": "publishLifecycleTestRole"
          }
        ],
        "PolicyName": "publishLifecycleTest",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents"
              ],
              "Resource": {
                "Fn::Sub": [
                  "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${lambda}:log-stream:*",
                  {
                    "lambda": {
                      "Ref": "PublishLifecycleTestLambdaFunction"
                    }
                  }
                ]
              }
            },
            {
              "Effect": "Allow",
              "Action": [
                "lambda:InvokeFunction"
              ],
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "PublishLifecycleEventsLambdaFunction",
                    "Arn"
                  ]
                }
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "cloudformation:DescribeStacks"
              ],
              "Resource": "*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "sts:AssumeRole"
              ],
              "Resource": [
                "arn:aws:iam::787388474266:role/orchestrator-put-job-result-role"
              ]
            }
          ]
        }
      }
    },
    "canaryInternalAPIExecutionPolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "Roles": [
          {
            "Ref": "canaryInternalAPIExecutionRole"
          }
        ],
        "PolicyName": "canaryInternalAPIPolicy",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "s3:PutObject",
                "s3:GetBucketLocation"
              ],
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "CanaryResultBucket",
                          "Arn"
                        ]
                      },
                      "/*"
                    ]
                  ]
                }
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
                "logs:CreateLogGroup"
              ],
              "Resource": {
                "Fn::Sub": [
                  "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/cwsyn-${canaryname}-*",
                  {
                    "canaryname": {
                      "Fn::If": [
                        "isDev",
                        "int-local",
                        "internal-api"
                      ]
                    }
                  }
                ]
              }
            },
            {
              "Effect": "Allow",
              "Action": [
                "s3:ListAllMyBuckets"
              ],
              "Resource": [
                "arn:aws:s3:::*"
              ]
            },
            {
              "Effect": "Allow",
              "Resource": "*",
              "Action": "cloudwatch:PutMetricData",
              "Condition": {
                "StringEquals": {
                  "cloudwatch:namespace": "CloudWatchSynthetics"
                }
              }
            },
            {
              "Effect": "Allow",
              "Action": [
                "execute-api:Invoke"
              ],
              "Resource": [
                {
                  "Fn::Sub": [
                    "arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${apigtwid}/*/GET/api/internal-integrations",
                    {
                      "apigtwid": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        }
      }
    },
    "canaryExternalAPIExecutionPolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "Roles": [
          {
            "Ref": "canaryExternalAPIExecutionRole"
          }
        ],
        "PolicyName": "canaryExternalAPIPolicy",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "s3:PutObject",
                "s3:GetBucketLocation"
              ],
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "CanaryResultBucket",
                          "Arn"
                        ]
                      },
                      "/*"
                    ]
                  ]
                }
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
                "logs:CreateLogGroup"
              ],
              "Resource": {
                "Fn::Sub": [
                  "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/cwsyn-${canaryname}-*",
                  {
                    "canaryname": {
                      "Fn::If": [
                        "isDev",
                        "ext-local",
                        "external-api"
                      ]
                    }
                  }
                ]
              }
            },
            {
              "Effect": "Allow",
              "Action": [
                "s3:ListAllMyBuckets"
              ],
              "Resource": [
                "arn:aws:s3:::*"
              ]
            },
            {
              "Effect": "Allow",
              "Resource": "*",
              "Action": "cloudwatch:PutMetricData",
              "Condition": {
                "StringEquals": {
                  "cloudwatch:namespace": "CloudWatchSynthetics"
                }
              }
            },
            {
              "Effect": "Allow",
              "Action": [
                "execute-api:Invoke"
              ],
              "Resource": [
                {
                  "Fn::Sub": [
                    "arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${apigtwid}/*/GET/api/integrations",
                    {
                      "apigtwid": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  ]
                },
                {
                  "Fn::Sub": [
                    "arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${apigtwid}/*/GET/api/integrations/*",
                    {
                      "apigtwid": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  ]
                },
                {
                  "Fn::Sub": [
                    "arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${apigtwid}/*/GET/api/integrations/github",
                    {
                      "apigtwid": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "secretsmanager:GetSecretValue"
              ],
              "Resource": [
                {
                  "Ref": "canaryAPIKey"
                }
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "kms:Decrypt"
              ],
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "canaryAPIKmsKey",
                    "Arn"
                  ]
                }
              ]
            }
          ]
        }
      }
    },
    "CanaryResultBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "PublicAccessBlockConfiguration": {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true
        },
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        },
        "LifecycleConfiguration": {
          "Rules": [
            {
              "Id": "ExpiryRule",
              "Status": "Enabled",
              "ExpirationInDays": 5
            }
          ]
        },
        "Tags": [
          {
            "Key": "SERVICE",
            "Value": "service-source-accounts"
          },
          {
            "Key": "STAGE",
            "Value": "local"
          }
        ]
      }
    },
    "CanaryResultBucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "CanaryResultBucket"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "s3:*"
              ],
              "Effect": "Deny",
              "Principal": "*",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":s3:::",
                    {
                      "Ref": "CanaryResultBucket"
                    },
                    "/*"
                  ]
                ]
              },
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": false
                }
              }
            }
          ]
        }
      }
    },
    "CanaryInternal": {
      "Type": "AWS::Synthetics::Canary",
      "Properties": {
        "ArtifactS3Location": {
          "Fn::Join": [
            "",
            [
              "s3://",
              {
                "Ref": "CanaryResultBucket"
              }
            ]
          ]
        },
        "Code": {
          "Handler": "index.handler",
          "Script": {
            "Fn::Sub": [
              "var synthetics = require(\"Synthetics\");\nconst log = require(\"SyntheticsLogger\");\nconst AWS = require(\"aws-sdk\");\n\nconst apiCanaryBlueprint = async function () {\n\tvar canaryCredentials = new AWS.EnvironmentCredentials(\"AWS\");\n\n\tvar path = \"\";\n\tvar host = \"\";\n\tif ([\"alpha\", \"staging\", \"prod\"].includes(\"${STAGE}\")) {\n\t\thost = \"${DOMAINNAME}\";\n\t\tpath = \"/api/internal-integrations\";\n\t} else {\n\t\thost = \"${APIGWTHOSTID}.execute-api.${AWS::Region}.amazonaws.com\";\n\t\tpath = \"/${STAGE}/api/internal-integrations\";\n\t}\n\n\tconst requestOptions = {\n\t\tmethod: \"GET\",\n\t\thostname: host,\n\t\tpath: path,\n\t\tport: 443,\n\t\theaders: {\n\t\t\t\"User-Agent\": synthetics.getCanaryUserAgentString(),\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t\"api-version\": \"v1\",\n\t\t\tcloudOneAccountID: \"012345678912\"\n\t\t}\n\t};\n\n\tconst verifyRequest = async function (requestOption) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tlog.info(\"Making request with options: \" + JSON.stringify(requestOption));\n\t\t\tvar endpoint = new AWS.Endpoint(\"https://\" + requestOptions.hostname + requestOptions.path);\n\t\t\tvar req = new AWS.HttpRequest(endpoint);\n\t\t\treq.method = requestOptions.method;\n\t\t\treq.path = requestOptions.path;\n\t\t\treq.region = \"${AWS::Region}\";\n\t\t\treq.headers = requestOptions.headers;\n\t\t\treq.headers[\"presigned-expires\"] = false;\n\t\t\treq.headers[\"Host\"] = endpoint.host;\n\n\t\t\tvar signer = new AWS.Signers.V4(req, \"execute-api\");\n\t\t\tvar dateNow = new Date();\n\t\t\tsigner.addAuthorization(canaryCredentials, dateNow);\n\n\t\t\tvar send = new AWS.NodeHttpClient();\n\t\t\tvar respBody = \"\";\n\t\t\tsend.handleRequest(\n\t\t\t\treq,\n\t\t\t\tnull,\n\t\t\t\tfunction (httpResp) {\n\t\t\t\t\tlog.info(\"Status Code: \" + httpResp.statusCode);\n\t\t\t\t\tlog.info(\"Response Headers: \" + JSON.stringify(httpResp.headers));\n\n\t\t\t\t\thttpResp.on(\"data\", function (chunk) {\n\t\t\t\t\t\trespBody += chunk;\n\t\t\t\t\t});\n\t\t\t\t\thttpResp.on(\"end\", function () {\n\t\t\t\t\t\tlog.info(\"Response: \" + respBody);\n\n\t\t\t\t\t\tif (httpResp.statusCode != 200) {\n\t\t\t\t\t\t\treject(\"The test request was not accepted, HTTP code: \" + httpResp.statusCode);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresolve();\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t\tfunction (err) {\n\t\t\t\t\tlog.error(\"Error: \" + err);\n\t\t\t\t\treject(\"Lambda failed with error \" + err);\n\t\t\t\t}\n\t\t\t);\n\t\t});\n\t};\n\tawait verifyRequest(requestOptions);\n};\nexports.handler = async () => {\n\treturn await apiCanaryBlueprint();\n};\n",
              {
                "APIGWTHOSTID": {
                  "Ref": "ApiGatewayRestApi"
                },
                "STAGE": "local",
                "DOMAINNAME": "sourceaccounts.trend-us-1.dev-cloudone.trendmicro.com"
              }
            ]
          }
        },
        "ExecutionRoleArn": {
          "Fn::GetAtt": [
            "canaryInternalAPIExecutionRole",
            "Arn"
          ]
        },
        "FailureRetentionPeriod": 31,
        "Name": {
          "Fn::If": [
            "isDev",
            "int-local",
            "internal-api"
          ]
        },
        "RunConfig": {
          "TimeoutInSeconds": 60
        },
        "RuntimeVersion": "syn-nodejs-puppeteer-3.7",
        "Schedule": {
          "DurationInSeconds": "0",
          "Expression": "rate(30 minutes)"
        },
        "StartCanaryAfterCreation": true,
        "SuccessRetentionPeriod": 31,
        "Tags": [
          {
            "Key": "SERVICE",
            "Value": "service-source-accounts"
          },
          {
            "Key": "STAGE",
            "Value": "local"
          }
        ]
      }
    },
    "CanaryInternalAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmName": "c1c-local-us-east-2-service-source-accounts-CanaryInternalAPIAlarm-p1",
        "AlarmDescription": "CloudWatch Alarm when the Source Account service Internal API Canary fails",
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "EvaluationPeriods": 1,
        "Threshold": 1,
        "Period": 60,
        "DatapointsToAlarm": 1,
        "MetricName": "Failed",
        "Dimensions": [
          {
            "Name": "CanaryName",
            "Value": {
              "Ref": "CanaryInternal"
            }
          }
        ],
        "Namespace": "CloudWatchSynthetics",
        "Statistic": "Average",
        "TreatMissingData": "notBreaching",
        "ActionsEnabled": false,
        "AlarmActions": [
          {
            "Ref": "alarmsSNSTopic"
          }
        ],
        "OKActions": [
          {
            "Ref": "alarmsSNSTopic"
          }
        ]
      }
    },
    "CanaryExternal": {
      "DependsOn": [
        "canaryAPIKey"
      ],
      "Type": "AWS::Synthetics::Canary",
      "Properties": {
        "ArtifactS3Location": {
          "Fn::Join": [
            "",
            [
              "s3://",
              {
                "Ref": "CanaryResultBucket"
              }
            ]
          ]
        },
        "Code": {
          "Handler": "index.handler",
          "Script": "var synthetics = require(\"Synthetics\");\nconst log = require(\"SyntheticsLogger\");\nconst AWS = require(\"aws-sdk\");\n\nconst secretsManager = new AWS.SecretsManager();\n\nconst getSecrets = async function (secretName) {\n\tvar params = {\n\t\tSecretId: secretName\n\t};\n\treturn await secretsManager.getSecretValue(params).promise();\n};\n\nlet stepConfig = {\n\tincludeRequestHeaders: true,\n\tincludeResponseHeaders: true,\n\trestrictedHeaders: [\"X-Amz-Security-Token\", \"Authorization\"], // Restricted header values do not appear in report generated.\n\tincludeRequestBody: true,\n\tincludeResponseBody: true\n};\n\ngetPath = apiPath => {\n\tlet stage = process.env.STAGE;\n\treturn [\"prod\", \"staging\", \"alpha\"].includes(stage) ? apiPath : `/${stage}${apiPath}`;\n};\n\nconst apiCanaryBlueprint = async function () {\n\tlet secretName = process.env.API_KEY;\n\tlet installationID = process.env.GH_INSTALLATION_ID;\n\tlet host = process.env.TEST_HOST;\n\tlet secret = await getSecrets(secretName);\n\n\tlet testIntegration = \"\";\n\n\tcreateTestRequest = (method, path, body) => {\n\t\treturn {\n\t\t\tmethod: method,\n\t\t\thostname: host,\n\t\t\tpath: getPath(path),\n\t\t\tport: 443,\n\t\t\theaders: {\n\t\t\t\t\"User-Agent\": synthetics.getCanaryUserAgentString(),\n\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t\t\"api-version\": \"v1\",\n\t\t\t\tAuthorization: `ApiKey ` + secret.SecretString\n\t\t\t},\n\t\t\tprotocol: \"https:\",\n\t\t\tbody: body\n\t\t};\n\t};\n\n\t// === Create GH Integration ===\n\tdateNow = new Date();\n\tconst requestOptionsCreateGHIntegration = createTestRequest(\n\t\t\"POST\",\n\t\t\"/api/integrations/github\",\n\t\tJSON.stringify({\n\t\t\talias: \"canary_test\",\n\t\t\tdescription: \"external api canary test \" + dateNow.toISOString().split(\".\")[0] + \"Z\",\n\t\t\tinstallationID: installationID\n\t\t})\n\t);\n\n\tconst verifyCreateGHIntegrationRequest = async function (response) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tif (response.statusCode == 409) {\n\t\t\t\tlog.info(\n\t\t\t\t\t\"Integration for the installationID already exists, HTTP code: \" + response.statusCode\n\t\t\t\t);\n\t\t\t\tresolve();\n\t\t\t} else if (response.statusCode == 201) {\n\t\t\t\tlog.info(\n\t\t\t\t\t\"The CreateGHIntegration - integration created, HTTP code: \" + response.statusCode\n\t\t\t\t);\n\t\t\t\tlet respBody = \"\";\n\t\t\t\tresponse.on(\"data\", chunk => {\n\t\t\t\t\trespBody += chunk;\n\t\t\t\t});\n\t\t\t\tresponse.on(\"end\", () => {\n\t\t\t\t\tlog.info(\"Response: \" + respBody);\n\n\t\t\t\t\tlet respObj = JSON.parse(respBody);\n\t\t\t\t\ttestIntegration = respObj.integrationID;\n\t\t\t\t\tif (!testIntegration) reject(\"No integrationID returned\");\n\n\t\t\t\t\tresolve();\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tlog.error(\"The CreateGHIntegration request failed, HTTP code: \" + response.statusCode);\n\t\t\t\treject(\"The CreateGHIntegration request failed, HTTP code: \" + response.statusCode);\n\t\t\t}\n\t\t});\n\t};\n\n\tawait synthetics.executeHttpStep(\n\t\t\"Create GH Integration\",\n\t\trequestOptionsCreateGHIntegration,\n\t\tverifyCreateGHIntegrationRequest,\n\t\tstepConfig\n\t);\n\n\t// === List Integrations ===\n\tconst requestOptionsListIntegrations = createTestRequest(\"GET\", \"/api/integrations\");\n\n\tconst verifyListIntegrationsRequest = async function (response) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tif (response.statusCode != 200) {\n\t\t\t\tlog.error(\"The ListIntegrations request failed, HTTP code: \" + response.statusCode);\n\t\t\t\treject(\"The ListIntegrations request failed, HTTP code: \" + response.statusCode);\n\t\t\t}\n\n\t\t\tlet respBody = \"\";\n\t\t\tresponse.on(\"data\", chunk => {\n\t\t\t\trespBody += chunk;\n\t\t\t});\n\t\t\tresponse.on(\"end\", () => {\n\t\t\t\tlog.info(\"Response: \" + respBody);\n\t\t\t\tlet respObj = JSON.parse(respBody);\n\t\t\t\tif (respObj.integrations.length < 1) reject(\"There is nothing to list for 'integrations'\");\n\n\t\t\t\tif (!testIntegration) testIntegration = respObj.integrations[0].integrationID;\n\n\t\t\t\tresolve();\n\t\t\t});\n\t\t});\n\t};\n\n\tawait synthetics.executeHttpStep(\n\t\t\"List Integrations\",\n\t\trequestOptionsListIntegrations,\n\t\tverifyListIntegrationsRequest,\n\t\tstepConfig\n\t);\n\n\t// === Get Integration ===\n\tconst requestOptionsGetIntegration = createTestRequest(\n\t\t\"GET\",\n\t\t\"/api/integrations/\" + testIntegration\n\t);\n\n\tconst verifyGetIntegrationRequest = async function (response) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tif (response.statusCode != 200) {\n\t\t\t\tlog.error(\"The GetIntegration request failed, HTTP code: \" + response.statusCode);\n\t\t\t\treject(\"The GetIntegration request failed, HTTP code: \" + response.statusCode);\n\t\t\t}\n\t\t\tlet respBody = \"\";\n\t\t\tresponse.on(\"data\", chunk => {\n\t\t\t\trespBody += chunk;\n\t\t\t});\n\t\t\tresponse.on(\"end\", () => {\n\t\t\t\tlog.info(\"Response: \" + respBody);\n\n\t\t\t\tlet respObj = JSON.parse(respBody);\n\t\t\t\tlet getIntegration = respObj.integrationID;\n\t\t\t\tif (!getIntegration || getIntegration != testIntegration) {\n\t\t\t\t\tlog.error(\"Unexpected Response: \" + respBody);\n\t\t\t\t\treject(\"GetIntegration returned something unexpected\");\n\t\t\t\t}\n\t\t\t\tresolve();\n\t\t\t});\n\t\t});\n\t};\n\n\tawait synthetics.executeHttpStep(\n\t\t\"Get Integration\",\n\t\trequestOptionsGetIntegration,\n\t\tverifyGetIntegrationRequest,\n\t\tstepConfig\n\t);\n\n\t// === Delete Integration ===\n\tconst requestOptionsDeleteIntegration = createTestRequest(\n\t\t\"DELETE\",\n\t\t\"/api/integrations/\" + testIntegration\n\t);\n\n\tconst verifyDeleteIntegrationRequest = async function (response) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tif (response.statusCode != 204) {\n\t\t\t\tlog.error(\"The DeleteIntegration request failed, HTTP code: \" + response.statusCode);\n\t\t\t\treject(\"The DeleteIntegration request failed, HTTP code: \" + response.statusCode);\n\t\t\t}\n\t\t\tresolve();\n\t\t});\n\t};\n\n\tawait synthetics.executeHttpStep(\n\t\t\"Delete Integration\",\n\t\trequestOptionsDeleteIntegration,\n\t\tverifyDeleteIntegrationRequest,\n\t\tstepConfig\n\t);\n};\n\nexports.handler = async () => {\n\treturn await apiCanaryBlueprint();\n};\n"
        },
        "ExecutionRoleArn": {
          "Fn::GetAtt": [
            "canaryExternalAPIExecutionRole",
            "Arn"
          ]
        },
        "FailureRetentionPeriod": 31,
        "Name": {
          "Fn::If": [
            "isDev",
            "ext-local",
            "external-api"
          ]
        },
        "RunConfig": {
          "TimeoutInSeconds": 60,
          "EnvironmentVariables": {
            "API_KEY": {
              "Ref": "canaryAPIKey"
            },
            "TEST_HOST": {
              "Fn::If": [
                "isDev",
                {
                  "Fn::Sub": [
                    "${API_GTW_HOST_ID}.execute-api.${AWS::Region}.amazonaws.com",
                    {
                      "API_GTW_HOST_ID": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  ]
                },
                "sourceaccounts.trend-us-1.dev-cloudone.trendmicro.com"
              ]
            },
            "STAGE": "local",
            "GH_INSTALLATION_ID": 30396787
          }
        },
        "RuntimeVersion": "syn-nodejs-puppeteer-3.7",
        "Schedule": {
          "DurationInSeconds": "0",
          "Expression": "rate(30 minutes)"
        },
        "StartCanaryAfterCreation": true,
        "SuccessRetentionPeriod": 31,
        "Tags": [
          {
            "Key": "SERVICE",
            "Value": "service-source-accounts"
          },
          {
            "Key": "STAGE",
            "Value": "local"
          }
        ]
      }
    },
    "CanaryExternalAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmName": "c1c-local-us-east-2-service-source-accounts-CanaryExternalAPIAlarm-p1",
        "AlarmDescription": "CloudWatch Alarm when the Source Account service External API Canary fails",
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "EvaluationPeriods": 1,
        "Threshold": 1,
        "Period": 60,
        "DatapointsToAlarm": 1,
        "MetricName": "Failed",
        "Dimensions": [
          {
            "Name": "CanaryName",
            "Value": {
              "Ref": "CanaryExternal"
            }
          }
        ],
        "Namespace": "CloudWatchSynthetics",
        "Statistic": "Average",
        "TreatMissingData": "notBreaching",
        "ActionsEnabled": false,
        "AlarmActions": [
          {
            "Ref": "alarmsSNSTopic"
          }
        ],
        "OKActions": [
          {
            "Ref": "alarmsSNSTopic"
          }
        ]
      }
    },
    "crossAccountPublishStatement": {
      "Type": "AWS::Events::EventBusPolicy",
      "Properties": {
        "StatementId": "publishFromCommonToSourceAccounts-local",
        "Statement": {
          "Effect": "Allow",
          "Principal": {
            "AWS": {
              "Fn::Sub": [
                "arn:${AWS::Partition}:iam::${awsAccountNumber}:root",
                {
                  "awsAccountNumber": "000568857918"
                }
              ]
            }
          },
          "Action": "events:PutEvents",
          "Resource": {
            "Fn::Sub": [
              "arn:${AWS::Partition}:events:${AWS::Region}:${awsAccountNumber}:event-bus/default",
              {
                "awsAccountNumber": "431319421842"
              }
            ]
          }
        }
      }
    },
    "DecryptSecretLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": {
          "Fn::Sub": "/aws/lambda/${DecryptSecretLambdaFunction}"
        },
        "RetentionInDays": 14,
        "Tags": [
          {
            "Key": "SERVICE",
            "Value": "service-source-accounts"
          },
          {
            "Key": "STAGE",
            "Value": "local"
          }
        ]
      }
    },
    "DecryptSecretRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "Path": "/",
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        ],
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "decrypt-secret-crhelper-service-source-accounts",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "events:PutRule",
                    "events:DeleteRule",
                    "events:PutTargets",
                    "events:RemoveTargets"
                  ],
                  "Resource": "*"
                }
              ]
            }
          },
          {
            "PolicyName": "decrypt-secret-shared-kms-service-source-accounts",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "kms:Decrypt",
                    "kms:GenerateDataKey"
                  ],
                  "Resource": "arn:aws:kms:us-east-2:245873510408:key/66f5e1af-7ab3-441d-ac00-47c2f7e40eca"
                }
              ]
            }
          },
          {
            "PolicyName": "service-source-accounts-decrypt-secret-kms",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "kms:Decrypt",
                    "kms:Encrypt",
                    "kms:ReEncrypt*",
                    "kms:GenerateDataKey*",
                    "kms:DescribeKey"
                  ],
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "githubKmsKey",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "githubWebhookKmsKey",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "canaryAPIKmsKey",
                        "Arn"
                      ]
                    }
                  ]
                }
              ]
            }
          },
          {
            "PolicyName": "decrypt-secret-secretsmanager-service-source-accounts",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "secretsmanager:PutSecretValue"
                  ],
                  "Resource": [
                    {
                      "Ref": "githubAppKey"
                    },
                    {
                      "Ref": "githubWebhookKey"
                    },
                    {
                      "Ref": "canaryAPIKey"
                    }
                  ]
                }
              ]
            }
          }
        ],
        "Tags": [
          {
            "Key": "SERVICE",
            "Value": "service-source-accounts"
          },
          {
            "Key": "STAGE",
            "Value": "local"
          }
        ]
      }
    },
    "CustomSecretManagedPolicy": {
      "Type": "AWS::IAM::ManagedPolicy",
      "Properties": {
        "Roles": [
          {
            "Ref": "DecryptSecretRole"
          }
        ],
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "lambda:AddPermission",
                "lambda:RemovePermission"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "DecryptSecretLambdaFunction",
                    "Arn"
                  ]
                }
              ]
            }
          ],
          "Version": "2012-10-17"
        }
      }
    },
    "githubAppKeyCustomValue": {
      "Type": "Custom::Secret",
      "DependsOn": [
        "CustomSecretManagedPolicy",
        "githubAppKey"
      ],
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "DecryptSecretLambdaFunction",
            "Arn"
          ]
        },
        "SecretArn": {
          "Ref": "githubAppKey"
        },
        "Base64SecretValue": "AgV4hMNzjUuLKKV5yR+TTXj0Krl4FW+chHZHzYdLvr3tS6sAewACABVhd3MtY3J5cHRvLXB1YmxpYy1rZXkAREF0VUM5VFVoQndONGU0MGZ6U05HdWJlQkpsanl2TDdDY2JzdVFPa2FhQU12OHRsMzJ0bi9HMEFTdHg4ZkJRa0xrZz09AAdwdXJwb3NlABFzZXJ2ZXJsZXNzLXBsdWdpbgABAAdhd3Mta21zAEthcm46YXdzOmttczp1cy1lYXN0LTI6MjQ1ODczNTEwNDA4OmtleS82NmY1ZTFhZi03YWIzLTQ0MWQtYWMwMC00N2MyZjdlNDBlY2EAuAECAQB41uAkEPaf1/YJXs3WtyzNj0vEIGsyw0GAoTyv+OnlUFwBAlaevsbBGfEErv/B4GCTJQAAAH4wfAYJKoZIhvcNAQcGoG8wbQIBADBoBgkqhkiG9w0BBwEwHgYJYIZIAWUDBAEuMBEEDAPQ+DFZXzQgHH+otQIBEIA7s+Jukrd0mefly4huELeEl4TBMO5tiYIV7h8wzDtG/iC9lDJBk76mugqvYTvLqWZhpsjAWCctjNTngxMCAAAQANoQ+uXecYMnQCdaIOTk5sf8NW5aSJcnujY+epo5PUbguFxQ7T51aNd+WEMXv/C/xf////8AAAABAAAAAAAAAAAAAAABAAAGir7M5VIMXpnxOWeU+9zwfqdL04TbVv8Fx087EaLTr7fZN4g9zjFzt0CiQm3hsEa1hsgUT5PLBhmWJvCG89f/FXGxFySjhRUEVQCPcZECTUE8fw6yZcP7fvEFSZfJNKGl8PEreTANfTkUBKC2Kcfs9GLkH0ExQmznxMzy1Wr2sxQUAOZp9Zu6M6oyq5jNN2sWM+O17n8wSFQkutylL1gBEmpvt3gTLBkGzPq9BZX5ZvjqcnT832qChz/YXmzidLWFcdIL4t7ZnJxhzj0yw0jJah+XMNolxv0U40t5cFOSIU+3pw+WsWWQkM9xA2T0z+Grs+rYjC8hsG10gjM6+lslJNHU+3R74zzXz+SZhuqq5hqNddYwirmSRPVPWtIAloRd6yAA7pXAuf46YqNf286U1laIqgbv4C0taiWV64ZLG+CPvT8vCiLcTYtu4A+hcf0U+ObehHcthPO/34KQorvToN9X4rI2s0pR9uI0sWS6mbKBnJoU70LVrD1PmKHgrJSPMX1guMwbQyE6Ra1qSUa8V7oPCELQKpn4KMZnF6Yvt7RxMw6TrE/JeZiHl+P3vE0h7RzePaj9jUFd8koVlpLYzOd9z3kikmmzoW0T4lBD/Q7IEo4bA6UOzq0ndGzj1pQUv1+kr0FkZJDw3JDASo3KpdmRcOC3QqLxWIt7YpyUdU2OmjNCyvcxDSZLYZJtvxK9WVIP0u9Sx5Q09bYYn1ztcomC0cMCbaLCekukpxNawC1e52wGi59+Qb1qq9Gudd5M9kbSloJ3N7Y0u9XHw6ifJ6M6WA5RpisSEjhtJkuE71QJqOJmqMdFeXrV1sgAW3KQwcQ4ufsyMOSB/CzNDLG1q6HaNRsnTvm4S0EejgYkv0VYFMQeigS1g7RV94JMtI0zZGzLuTsoA0fNbuAuZJEVkn7O7aBC6lkiaDBTXqPkZWKFNNPGGnTpCGM49BfQfEcL0lunIvlMbM2icFwyDsn2wahO7FO44sd9i33LpwB3rng8u5oZGhL4Gb7G7ZNzXkzuIBYHrYpSCcG8rQhoEl4XInXG/Z/rr9mhwrjoIYSbWDSpgOoireu5wA0nELFXx79Snfga40efg6+enE7Fz3TjadsXvuKYAF9LsxVbH8bd06WFOEber6pNJ5j3SV5eDr+yxBUcyxJ2SeT6qBuf2vpq9fZdKY5M5FPDG4/g9OMcOGZ5hMMEDIxTBzPzqYjDyW4owr7X1NNI5D1fUWdDRvRwbpepNEew6v5GIvYgU2yc3E9lXZBAWOTkCLTXuSp/C18uHIjKSM63q+0KMxnrJPTNmM71qa5d9DbtoBxJ005IGyW6RFAUtHwxE6Ke/0FMRjcF4ENoR0HAzz55gtSwjkIroUr/5iBoNZKxzC7yy87GfbDxRmDvEM0n0ZgYOy3i7hZsrlF20fIYEyz6Xtj4N4P7AORCs+USWHpdyaOGuZYO5h77W0rTmjBETzdWKT4f26GSndQkjc8k1tWUTX0lhqPZ7HSwSJ6bFwtK0IPpCnUvHG1JFJH0vEYfIjCK6FbxNgMQ+hfugzluKKCVcLITlAyYXa7s0201izrCMrDKjmUFoE5PVdNF3lfkqLCmlo06nh7yrIk0xmaZPCEB0QdZcRVt8aHTOFTO8VzwH3cdo0utDhmSJ1DvThFh2P1lPJm9T8cO6O9JByzLj5B6Eeyk8Lm+43xSunBtbjgP1MoGBCA79ClQj7kMdyTRNvgV66BSakbCxetymv9BDlJO5Jhs+aBRLGJxdP4leyX70au/bM4mMHJ2PCMRqkphbpgvAERQfl5EPhkqR/hm7NkcvD4X+82ye86o4Z3d7+rtQVZYVy4b8DyCMewGsb+yULLsk54V+KeyhjTByDNok96aLFh4eQs7XjoIqY8efwfSvx33ypSpM9alq7s7ntScD4YSqN1ndT5rkIebL/o7q6IyDufAUxhv3lNcD0L4mMQQ5ekm/MmtFXttfWszz6j04p7bzmIJMvT3cl+6dxeOLqHaPTmiZezl/NSS10314qUVON6vM6iOzQACImhk6eShfKiclYSqztQrj63z+QVPPDovRZ1yXMNR4KGWbU/JCbQyawQDXlJCgXs+JYdTX0h/SRicbF2Q8t4nhWWqsT6ACc0Wjd79CTl9+4Kv2mTC1zxPEb4YgnN5HiXD55WUN8MJ5CEPfTE6SP/s4AwruUPvtvvyWfCH7nMyh2dNL1yp/T1Ixhjc/OfKHteAl9igb82gl+aRnn/5njr2aj1uv7rfX62RYsQAZzBlAjEAriDI5V0JcDNSk2EZUtOHUNUuIEb+rj2+JLBoFYhy2LkM+3nsgbnjG959Chd5ZBxAAjBcoFeWPLfAlrBcvgFKWcEusID4LiqFZ1lE/ewv9TQjz2tfTV+609x9uPmI5hWVUx8="
      }
    },
    "githubWebhookKeyCustomValue": {
      "Type": "Custom::Secret",
      "DependsOn": [
        "CustomSecretManagedPolicy",
        "githubWebhookKey"
      ],
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "DecryptSecretLambdaFunction",
            "Arn"
          ]
        },
        "SecretArn": {
          "Ref": "githubWebhookKey"
        },
        "Base64SecretValue": "AgV4KtD66Y+M38B7dThFA3XaY5PoYAhey7rOzNM6CgjUuqwAewACABVhd3MtY3J5cHRvLXB1YmxpYy1rZXkAREFnWWk5RVRBVVlNV1QrY05KUmlpMU8xbEtNb1lmZUhSWWFLNFNrQmI0ZE56OHk0M2hiNkhBYjZFSlZrUzd0eThKQT09AAdwdXJwb3NlABFzZXJ2ZXJsZXNzLXBsdWdpbgABAAdhd3Mta21zAEthcm46YXdzOmttczp1cy1lYXN0LTI6MjQ1ODczNTEwNDA4OmtleS82NmY1ZTFhZi03YWIzLTQ0MWQtYWMwMC00N2MyZjdlNDBlY2EAuAECAQB41uAkEPaf1/YJXs3WtyzNj0vEIGsyw0GAoTyv+OnlUFwBqXCxkNKbo5/DMkB5Vw1d+QAAAH4wfAYJKoZIhvcNAQcGoG8wbQIBADBoBgkqhkiG9w0BBwEwHgYJYIZIAWUDBAEuMBEEDCibKMCj49Mi1urZrAIBEIA748v1/tMsnqpjXkQ8HTeYJLMvvUjnbwn6M6b1nkR38+5GW5luMEBuuydtHSu8wvuIBJpszEwtXjfA528CAAAQAKeRfcCGJEqFSPNdt9qgrjh/LHW6+lflePOMfTV8UbcU4kJ+UPRs+aG7id3RI3VFwv////8AAAABAAAAAAAAAAAAAAABAAAAQLyhn0IEaaf0D0HIsXaWFiZDIyM1oltMX8ahLRBJwFQU8zQ0PhFIUsxK5gcJC5fFvM5u+MjSfeQhsZoPlLLKI+3Rc9NPeJxMvYTtl7CltqmYAGcwZQIwIp4w4E3N3b1xbqVVg+T8wz9b+9WQqrcn+laltFgY7g7QTgoyoZTNBuAq018nAXN8AjEAoNd93ygQ/Lapex7b+gjnStAsh49BaIl+SLfspeuok4q36iWzfgLkPDrSbUUOMLBc"
      }
    },
    "canaryAPIKeyCustomValue": {
      "Type": "Custom::Secret",
      "DependsOn": [
        "CustomSecretManagedPolicy",
        "canaryAPIKey"
      ],
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "DecryptSecretLambdaFunction",
            "Arn"
          ]
        },
        "SecretArn": {
          "Ref": "canaryAPIKey"
        },
        "Base64SecretValue": "AgV4xH6NX4gwfdDPJfPU8cIlK8T6FPGdDXmk1Wohvl/7GzgAewACABVhd3MtY3J5cHRvLXB1YmxpYy1rZXkAREF6NGhjVDRWM0diN1hkSXJFY0RHbmtSbFJoU3AvTHRsTmRZTE1kTmFiYUtSMDBUd21EaUlvMFBOMTNGSHRzK3RnQT09AAdwdXJwb3NlABFzZXJ2ZXJsZXNzLXBsdWdpbgABAAdhd3Mta21zAEthcm46YXdzOmttczp1cy1lYXN0LTI6MjQ1ODczNTEwNDA4OmtleS82NmY1ZTFhZi03YWIzLTQ0MWQtYWMwMC00N2MyZjdlNDBlY2EAuAECAQB41uAkEPaf1/YJXs3WtyzNj0vEIGsyw0GAoTyv+OnlUFwBP3CYqGKh7+fAdyiL7uqbmAAAAH4wfAYJKoZIhvcNAQcGoG8wbQIBADBoBgkqhkiG9w0BBwEwHgYJYIZIAWUDBAEuMBEEDFBe9W4yg8QHmuCmkwIBEIA7UQfQjPl3EtOol0ZAOPz8XjKzcJznP9Y1L3JXabM7m9ONgC2Z2B3kGm/jgoieYNkH2hv9LEyVOuOQR/YCAAAQACJtfC4SFJ9WEkhWPwRtzTT8mux1QzPYXFZWdUCS8aM0APKEVCUdCrtlS1aYcRdjdv////8AAAABAAAAAAAAAAAAAAABAAAAYi6J/EhCPeu7N7eNjRG9QSicvHozQkqt3fjPT14kSYZuLTknhgER7nwJ8UoFKRhBPxjjOOsQiAliIyk0CJVSRQ2Y92HBWkopxM/m5y1govKRsz/1TxbaLulB5rQQ5vFGQRz2nAAfW1PVB4ek78QUG36kIQBnMGUCMQDtVzzV5o25hjYkT1OeSIrxMxFN2lmSuEByYmKZVv8nzKJLRSwvlzjSTqLqjNcYNCwCMHs53eHDSKTj/YUwUggA/SyIvKz/3FVzz7WNh4itrMu/bP811/jDMEwa6pD2EpyTLw=="
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": "codepipeline-dev-sourcebucket-us-east-2-787388474266"
    },
    "CreateGitHubIntLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CreateGitHubIntLambdaVersion1fsmUjJlgumQzDCQjXQPq0HYNuhrOyf5kwVyAvk3z4"
      },
      "Export": {
        "Name": "sls-service-source-accounts-local-CreateGitHubIntLambdaFunctionQualifiedArn"
      }
    },
    "CreateProviderAuthLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CreateProviderAuthLambdaVersionVsA0EvFwiw1edQDrpf7g0FCklV7wZxOxEwfu1HOgrQ"
      },
      "Export": {
        "Name": "sls-service-source-accounts-local-CreateProviderAuthLambdaFunctionQualifiedArn"
      }
    },
    "CreateGitHubIntTestLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CreateGitHubIntTestLambdaVersionf4IAGecHdlJqP4vz8OB9zqA3v5labkjYmBrQcN2cU"
      },
      "Export": {
        "Name": "sls-service-source-accounts-local-CreateGitHubIntTestLambdaFunctionQualifiedArn"
      }
    },
    "CreateProviderAuthTestLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CreateProviderAuthTestLambdaVersionrp2dVD4A5KYGrDLUHPQkmlMN67CYSYM292Xt0zriDIY"
      },
      "Export": {
        "Name": "sls-service-source-accounts-local-CreateProviderAuthTestLambdaFunctionQualifiedArn"
      }
    },
    "GithubWebhookLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GithubWebhookLambdaVersionX9FTe3zt4tZ7lkbFvuXDPhG4mvg7AHIl8jZ2dWlhi8k"
      },
      "Export": {
        "Name": "sls-service-source-accounts-local-GithubWebhookLambdaFunctionQualifiedArn"
      }
    },
    "GithubWebhookTestLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GithubWebhookTestLambdaVersiong2FIXa0liTyXcwTB6A3DFpHc9o0fwH70zfDMxBDSBjU"
      },
      "Export": {
        "Name": "sls-service-source-accounts-local-GithubWebhookTestLambdaFunctionQualifiedArn"
      }
    },
    "InternalEventsListenerLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "InternalEventsListenerLambdaVersionjAaT9ygNruL26ZxeCjZ4vkY23uiEI6kUwQcaKMnvYGY"
      },
      "Export": {
        "Name": "sls-service-source-accounts-local-InternalEventsListenerLambdaFunctionQualifiedArn"
      }
    },
    "GetIntegrationLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetIntegrationLambdaVersion59KAa8XqoEI3at1B4I5cbrzG7lzLTREecHfMPCu7jA"
      },
      "Export": {
        "Name": "sls-service-source-accounts-local-GetIntegrationLambdaFunctionQualifiedArn"
      }
    },
    "InternalEventsListTestLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "InternalEventsListTestLambdaVersionUPogTSGJz3MRRSCR4l85FfYMx0p67twxZPmrmWDw"
      },
      "Export": {
        "Name": "sls-service-source-accounts-local-InternalEventsListTestLambdaFunctionQualifiedArn"
      }
    },
    "ListIntegrationsLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "ListIntegrationsLambdaVersion8kNs5blhAavl9RMD8Gic10bLYwoIj39EbtsD0qADW6g"
      },
      "Export": {
        "Name": "sls-service-source-accounts-local-ListIntegrationsLambdaFunctionQualifiedArn"
      }
    },
    "DeleteIntegrationLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "DeleteIntegrationLambdaVersionK7raFWq34ZssQXHhhjRqavuyxTjtnNSsHTtfA1LrXI"
      },
      "Export": {
        "Name": "sls-service-source-accounts-local-DeleteIntegrationLambdaFunctionQualifiedArn"
      }
    },
    "DeleteIntegrationTestLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "DeleteIntegrationTestLambdaVersionz4C70GUkkMs04mxextDHmjrRNGIvZA0ewhKaScHg"
      },
      "Export": {
        "Name": "sls-service-source-accounts-local-DeleteIntegrationTestLambdaFunctionQualifiedArn"
      }
    },
    "ListIntegrationsTestLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "ListIntegrationsTestLambdaVersionK7x8xCt3ENufGquwhQI4Hw1rHkCkYzMWymBKBQYqpLE"
      },
      "Export": {
        "Name": "sls-service-source-accounts-local-ListIntegrationsTestLambdaFunctionQualifiedArn"
      }
    },
    "ModifyIntegrationLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "ModifyIntegrationLambdaVersiondehYOPo4B7ylqrF4D8EwTkUPcVTNoHAG8jjZGwV2U"
      },
      "Export": {
        "Name": "sls-service-source-accounts-local-ModifyIntegrationLambdaFunctionQualifiedArn"
      }
    },
    "GetIntegrationTestLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetIntegrationTestLambdaVersion7vTp6LLKn24v6JQn0ykT3dvPAnZrjj2aJGvyPXbRl8"
      },
      "Export": {
        "Name": "sls-service-source-accounts-local-GetIntegrationTestLambdaFunctionQualifiedArn"
      }
    },
    "ListIntegrationsIntlLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "ListIntegrationsIntlLambdaVersionxKqpqpWppLsKSy7OdNMgpVmnglHQWyOtFO7ldXDMAEU"
      },
      "Export": {
        "Name": "sls-service-source-accounts-local-ListIntegrationsIntlLambdaFunctionQualifiedArn"
      }
    },
    "ListIntegIntlTestLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "ListIntegIntlTestLambdaVersionj6C11pqesTazLkqCzFXdwqZ3IvuBkdhidsFzIEfHCI"
      },
      "Export": {
        "Name": "sls-service-source-accounts-local-ListIntegIntlTestLambdaFunctionQualifiedArn"
      }
    },
    "ModifyIntegrationTestLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "ModifyIntegrationTestLambdaVersionVVp8AfLR27yoPlEv33UatRtPY9s1pPuQCPwKKBbe9E"
      },
      "Export": {
        "Name": "sls-service-source-accounts-local-ModifyIntegrationTestLambdaFunctionQualifiedArn"
      }
    },
    "PublishLifecycleEventsLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "PublishLifecycleEventsLambdaVersionHIsDJcH96DcTlJo9Jytg0JLWBWQXeUQU1gYG7meWpA"
      },
      "Export": {
        "Name": "sls-service-source-accounts-local-PublishLifecycleEventsLambdaFunctionQualifiedArn"
      }
    },
    "PublishLifecycleTestLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "PublishLifecycleTestLambdaVersionZ1Q5496Hp1Gia8ccx2TnpWKpLwOzKqMlLFBwS86jM"
      },
      "Export": {
        "Name": "sls-service-source-accounts-local-PublishLifecycleTestLambdaFunctionQualifiedArn"
      }
    },
    "C1AccEventsListenerTestLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "C1AccEventsListenerTestLambdaVersionkLdJ2Jv0TODhb3RB85kuq3zxP260X9PNjJz5cbXm28"
      },
      "Export": {
        "Name": "sls-service-source-accounts-local-C1AccEventsListenerTestLambdaFunctionQualifiedArn"
      }
    },
    "C1AccEventsListenerLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "C1AccEventsListenerLambdaVersionkWdziiOYkLu50jIRCZiv12TEtAnZVR1fGuk7Bcw"
      },
      "Export": {
        "Name": "sls-service-source-accounts-local-C1AccEventsListenerLambdaFunctionQualifiedArn"
      }
    },
    "SetStagePropertiesLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "SetStagePropertiesLambdaVersionxl3w52izpdEC5Mw74V1N3m4ePpyJI1DbWUUYvOOT4"
      },
      "Export": {
        "Name": "sls-service-source-accounts-local-SetStagePropertiesLambdaFunctionQualifiedArn"
      }
    },
    "DecryptSecretLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "DecryptSecretLambdaVersiondLo6GXPatZFS2r4OJ0WiB8ffyy23lFqgR7zhYNjhG7o"
      },
      "Export": {
        "Name": "sls-service-source-accounts-local-DecryptSecretLambdaFunctionQualifiedArn"
      }
    },
    "ServiceEndpoint": {
      "Description": "URL of the service endpoint",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "ApiGatewayRestApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            },
            "/local"
          ]
        ]
      },
      "Export": {
        "Name": "sls-service-source-accounts-local-ServiceEndpoint"
      }
    },
    "hostedZoneNameServers": {
      "Condition": "deployHostedZone",
      "Description": "The list of nameservers for the sourceaccounts.trend-us-1.dev-cloudone.trendmicro.com hosted zone",
      "Value": {
        "Fn::Join": [
          ",",
          {
            "Fn::GetAtt": [
              "hostedZone",
              "NameServers"
            ]
          }
        ]
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}:${AWS::Region}:NameServers"
        }
      }
    },
    "hostedZoneID": {
      "Condition": "deployHostedZone",
      "Description": "The hosted zone ID for sourceaccounts.trend-us-1.dev-cloudone.trendmicro.com",
      "Value": {
        "Ref": "hostedZone"
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}:${AWS::Region}:HostedZoneID"
        }
      }
    }
  },
  "Conditions": {
    "isAlpha": {
      "Fn::Equals": [
        "local",
        "alpha"
      ]
    },
    "isStaging": {
      "Fn::Equals": [
        "local",
        "staging"
      ]
    },
    "isProd": {
      "Fn::Equals": [
        "local",
        "prod"
      ]
    },
    "deployHostedZone": {
      "Fn::Or": [
        {
          "Condition": "isAlpha"
        },
        {
          "Condition": "isStaging"
        },
        {
          "Condition": "isProd"
        }
      ]
    },
    "deployCustomDomain": {
      "Fn::And": [
        {
          "Condition": "deployHostedZone"
        },
        {
          "Fn::Equals": [
            false,
            true
          ]
        }
      ]
    },
    "isDev": {
      "Fn::Equals": [
        "resources/config.dev.yaml",
        "resources/config.dev.yaml"
      ]
    }
  }
}
